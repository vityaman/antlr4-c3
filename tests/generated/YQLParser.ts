// Generated from tests/YQL.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class YQLParser extends antlr.Parser {
    public static readonly EQUALS = 1;
    public static readonly EQUALS2 = 2;
    public static readonly NOT_EQUALS = 3;
    public static readonly NOT_EQUALS2 = 4;
    public static readonly LESS = 5;
    public static readonly LESS_OR_EQ = 6;
    public static readonly GREATER = 7;
    public static readonly GREATER_OR_EQ = 8;
    public static readonly SHIFT_LEFT = 9;
    public static readonly ROT_LEFT = 10;
    public static readonly AMPERSAND = 11;
    public static readonly PIPE = 12;
    public static readonly DOUBLE_PIPE = 13;
    public static readonly STRUCT_OPEN = 14;
    public static readonly STRUCT_CLOSE = 15;
    public static readonly PLUS = 16;
    public static readonly MINUS = 17;
    public static readonly TILDA = 18;
    public static readonly ASTERISK = 19;
    public static readonly SLASH = 20;
    public static readonly BACKSLASH = 21;
    public static readonly PERCENT = 22;
    public static readonly SEMICOLON = 23;
    public static readonly DOT = 24;
    public static readonly COMMA = 25;
    public static readonly LPAREN = 26;
    public static readonly RPAREN = 27;
    public static readonly QUESTION = 28;
    public static readonly COLON = 29;
    public static readonly AT = 30;
    public static readonly DOUBLE_AT = 31;
    public static readonly DOLLAR = 32;
    public static readonly QUOTE_DOUBLE = 33;
    public static readonly QUOTE_SINGLE = 34;
    public static readonly BACKTICK = 35;
    public static readonly LBRACE_CURLY = 36;
    public static readonly RBRACE_CURLY = 37;
    public static readonly CARET = 38;
    public static readonly NAMESPACE = 39;
    public static readonly ARROW = 40;
    public static readonly RBRACE_SQUARE = 41;
    public static readonly LBRACE_SQUARE = 42;
    public static readonly ABORT = 43;
    public static readonly ACTION = 44;
    public static readonly ADD = 45;
    public static readonly AFTER = 46;
    public static readonly ALL = 47;
    public static readonly ALTER = 48;
    public static readonly ANALYZE = 49;
    public static readonly AND = 50;
    public static readonly ANSI = 51;
    public static readonly ANY = 52;
    public static readonly ARRAY = 53;
    public static readonly AS = 54;
    public static readonly ASC = 55;
    public static readonly ASSUME = 56;
    public static readonly ASYMMETRIC = 57;
    public static readonly ASYNC = 58;
    public static readonly ATTACH = 59;
    public static readonly ATTRIBUTES = 60;
    public static readonly AUTOINCREMENT = 61;
    public static readonly AUTOMAP = 62;
    public static readonly BACKUP = 63;
    public static readonly COLLECTION = 64;
    public static readonly BEFORE = 65;
    public static readonly BEGIN = 66;
    public static readonly BERNOULLI = 67;
    public static readonly BETWEEN = 68;
    public static readonly BITCAST = 69;
    public static readonly BY = 70;
    public static readonly CALLABLE = 71;
    public static readonly CASCADE = 72;
    public static readonly CASE = 73;
    public static readonly CAST = 74;
    public static readonly CHANGEFEED = 75;
    public static readonly CHECK = 76;
    public static readonly CLASSIFIER = 77;
    public static readonly COLLATE = 78;
    public static readonly COLUMN = 79;
    public static readonly COLUMNS = 80;
    public static readonly COMMIT = 81;
    public static readonly COMPACT = 82;
    public static readonly CONDITIONAL = 83;
    public static readonly CONFLICT = 84;
    public static readonly CONNECT = 85;
    public static readonly CONSTRAINT = 86;
    public static readonly CONSUMER = 87;
    public static readonly COVER = 88;
    public static readonly CREATE = 89;
    public static readonly CROSS = 90;
    public static readonly CUBE = 91;
    public static readonly CURRENT = 92;
    public static readonly CURRENT_DATE = 93;
    public static readonly CURRENT_TIME = 94;
    public static readonly CURRENT_TIMESTAMP = 95;
    public static readonly DATA = 96;
    public static readonly DATABASE = 97;
    public static readonly DECIMAL = 98;
    public static readonly DECLARE = 99;
    public static readonly DEFAULT = 100;
    public static readonly DEFERRABLE = 101;
    public static readonly DEFERRED = 102;
    public static readonly DEFINE = 103;
    public static readonly DELETE = 104;
    public static readonly DESC = 105;
    public static readonly DESCRIBE = 106;
    public static readonly DETACH = 107;
    public static readonly DICT = 108;
    public static readonly DIRECTORY = 109;
    public static readonly DISABLE = 110;
    public static readonly DISCARD = 111;
    public static readonly DISTINCT = 112;
    public static readonly DO = 113;
    public static readonly DROP = 114;
    public static readonly EACH = 115;
    public static readonly ELSE = 116;
    public static readonly EMPTY = 117;
    public static readonly EMPTY_ACTION = 118;
    public static readonly ENCRYPTED = 119;
    public static readonly END = 120;
    public static readonly ENUM = 121;
    public static readonly ERASE = 122;
    public static readonly ERROR = 123;
    public static readonly ESCAPE = 124;
    public static readonly EVALUATE = 125;
    public static readonly EXCEPT = 126;
    public static readonly EXCLUDE = 127;
    public static readonly EXCLUSION = 128;
    public static readonly EXCLUSIVE = 129;
    public static readonly EXISTS = 130;
    public static readonly EXPLAIN = 131;
    public static readonly EXPORT = 132;
    public static readonly EXTERNAL = 133;
    public static readonly FAIL = 134;
    public static readonly FALSE = 135;
    public static readonly FAMILY = 136;
    public static readonly FILTER = 137;
    public static readonly FIRST = 138;
    public static readonly FLATTEN = 139;
    public static readonly FLOW = 140;
    public static readonly FOLLOWING = 141;
    public static readonly FOR = 142;
    public static readonly FOREIGN = 143;
    public static readonly FROM = 144;
    public static readonly FULL = 145;
    public static readonly FUNCTION = 146;
    public static readonly GLOB = 147;
    public static readonly GLOBAL = 148;
    public static readonly GRANT = 149;
    public static readonly GROUP = 150;
    public static readonly GROUPING = 151;
    public static readonly GROUPS = 152;
    public static readonly HASH = 153;
    public static readonly HAVING = 154;
    public static readonly HOP = 155;
    public static readonly IF = 156;
    public static readonly IGNORE = 157;
    public static readonly ILIKE = 158;
    public static readonly IMMEDIATE = 159;
    public static readonly IMPORT = 160;
    public static readonly IN = 161;
    public static readonly INDEX = 162;
    public static readonly INDEXED = 163;
    public static readonly INHERITS = 164;
    public static readonly INITIAL = 165;
    public static readonly INITIALLY = 166;
    public static readonly INNER = 167;
    public static readonly INSERT = 168;
    public static readonly INSTEAD = 169;
    public static readonly INTERSECT = 170;
    public static readonly INTO = 171;
    public static readonly IS = 172;
    public static readonly ISNULL = 173;
    public static readonly JOIN = 174;
    public static readonly JSON_EXISTS = 175;
    public static readonly JSON_QUERY = 176;
    public static readonly JSON_VALUE = 177;
    public static readonly KEY = 178;
    public static readonly LAST = 179;
    public static readonly LEFT = 180;
    public static readonly LEGACY = 181;
    public static readonly LIKE = 182;
    public static readonly LIMIT = 183;
    public static readonly LIST = 184;
    public static readonly LOCAL = 185;
    public static readonly MANAGE = 186;
    public static readonly MATCH = 187;
    public static readonly MATCHES = 188;
    public static readonly MATCH_RECOGNIZE = 189;
    public static readonly MEASURES = 190;
    public static readonly MICROSECONDS = 191;
    public static readonly MILLISECONDS = 192;
    public static readonly MODIFY = 193;
    public static readonly NANOSECONDS = 194;
    public static readonly NATURAL = 195;
    public static readonly NEXT = 196;
    public static readonly NO = 197;
    public static readonly NOT = 198;
    public static readonly NOTNULL = 199;
    public static readonly NULL = 200;
    public static readonly NULLS = 201;
    public static readonly OBJECT = 202;
    public static readonly OF = 203;
    public static readonly OFFSET = 204;
    public static readonly OMIT = 205;
    public static readonly ON = 206;
    public static readonly ONE = 207;
    public static readonly ONLY = 208;
    public static readonly OPTION = 209;
    public static readonly OPTIONAL = 210;
    public static readonly OR = 211;
    public static readonly ORDER = 212;
    public static readonly OTHERS = 213;
    public static readonly OUTER = 214;
    public static readonly OVER = 215;
    public static readonly PARALLEL = 216;
    public static readonly PARTITION = 217;
    public static readonly PASSING = 218;
    public static readonly PASSWORD = 219;
    public static readonly PAST = 220;
    public static readonly PATTERN = 221;
    public static readonly PER = 222;
    public static readonly PERMUTE = 223;
    public static readonly PLAN = 224;
    public static readonly POOL = 225;
    public static readonly PRAGMA = 226;
    public static readonly PRECEDING = 227;
    public static readonly PRESORT = 228;
    public static readonly PRIMARY = 229;
    public static readonly PRIVILEGES = 230;
    public static readonly PROCESS = 231;
    public static readonly QUEUE = 232;
    public static readonly RAISE = 233;
    public static readonly RANGE = 234;
    public static readonly REDUCE = 235;
    public static readonly REFERENCES = 236;
    public static readonly REGEXP = 237;
    public static readonly REINDEX = 238;
    public static readonly RELEASE = 239;
    public static readonly REMOVE = 240;
    public static readonly RENAME = 241;
    public static readonly REPEATABLE = 242;
    public static readonly REPLACE = 243;
    public static readonly REPLICATION = 244;
    public static readonly RESET = 245;
    public static readonly RESOURCE = 246;
    public static readonly RESPECT = 247;
    public static readonly RESTRICT = 248;
    public static readonly RESULT = 249;
    public static readonly RETURN = 250;
    public static readonly RETURNING = 251;
    public static readonly REVERT = 252;
    public static readonly REVOKE = 253;
    public static readonly RIGHT = 254;
    public static readonly RLIKE = 255;
    public static readonly ROLLBACK = 256;
    public static readonly ROLLUP = 257;
    public static readonly ROW = 258;
    public static readonly ROWS = 259;
    public static readonly SAMPLE = 260;
    public static readonly SAVEPOINT = 261;
    public static readonly SCHEMA = 262;
    public static readonly SECONDS = 263;
    public static readonly SEEK = 264;
    public static readonly SELECT = 265;
    public static readonly SEMI = 266;
    public static readonly SET = 267;
    public static readonly SETS = 268;
    public static readonly SHOW = 269;
    public static readonly TSKIP = 270;
    public static readonly SOURCE = 271;
    public static readonly STREAM = 272;
    public static readonly STRUCT = 273;
    public static readonly SUBQUERY = 274;
    public static readonly SUBSET = 275;
    public static readonly SYMBOLS = 276;
    public static readonly SYMMETRIC = 277;
    public static readonly SYNC = 278;
    public static readonly SYSTEM = 279;
    public static readonly TABLE = 280;
    public static readonly TABLES = 281;
    public static readonly TABLESAMPLE = 282;
    public static readonly TABLESTORE = 283;
    public static readonly TAGGED = 284;
    public static readonly TEMP = 285;
    public static readonly TEMPORARY = 286;
    public static readonly THEN = 287;
    public static readonly TIES = 288;
    public static readonly TO = 289;
    public static readonly TOPIC = 290;
    public static readonly TRANSACTION = 291;
    public static readonly TRIGGER = 292;
    public static readonly TRUE = 293;
    public static readonly TUPLE = 294;
    public static readonly TYPE = 295;
    public static readonly UNBOUNDED = 296;
    public static readonly UNCONDITIONAL = 297;
    public static readonly UNION = 298;
    public static readonly UNIQUE = 299;
    public static readonly UNKNOWN = 300;
    public static readonly UNMATCHED = 301;
    public static readonly UPDATE = 302;
    public static readonly UPSERT = 303;
    public static readonly USE = 304;
    public static readonly USER = 305;
    public static readonly USING = 306;
    public static readonly VACUUM = 307;
    public static readonly VALUES = 308;
    public static readonly VARIANT = 309;
    public static readonly VIEW = 310;
    public static readonly VIRTUAL = 311;
    public static readonly WHEN = 312;
    public static readonly WHERE = 313;
    public static readonly WINDOW = 314;
    public static readonly WITH = 315;
    public static readonly WITHOUT = 316;
    public static readonly WRAPPER = 317;
    public static readonly XOR = 318;
    public static readonly STRING_VALUE = 319;
    public static readonly ID_PLAIN = 320;
    public static readonly ID_QUOTED = 321;
    public static readonly DIGITS = 322;
    public static readonly INTEGER_VALUE = 323;
    public static readonly REAL = 324;
    public static readonly BLOB = 325;
    public static readonly TQ = 326;
    public static readonly TU = 327;
    public static readonly TE = 328;
    public static readonly TR = 329;
    public static readonly TY = 330;
    public static readonly WS = 331;
    public static readonly COMMENT = 332;
    public static readonly RULE_sql_query = 0;
    public static readonly RULE_sql_stmt_list = 1;
    public static readonly RULE_ansi_sql_stmt_list = 2;
    public static readonly RULE_lambda_body = 3;
    public static readonly RULE_lambda_stmt = 4;
    public static readonly RULE_sql_stmt = 5;
    public static readonly RULE_sql_stmt_core = 6;
    public static readonly RULE_expr = 7;
    public static readonly RULE_or_subexpr = 8;
    public static readonly RULE_and_subexpr = 9;
    public static readonly RULE_xor_subexpr = 10;
    public static readonly RULE_distinct_from_op = 11;
    public static readonly RULE_cond_expr = 12;
    public static readonly RULE_match_op = 13;
    public static readonly RULE_eq_subexpr = 14;
    public static readonly RULE_shift_right = 15;
    public static readonly RULE_rot_right = 16;
    public static readonly RULE_double_question = 17;
    public static readonly RULE_neq_subexpr = 18;
    public static readonly RULE_bit_subexpr = 19;
    public static readonly RULE_add_subexpr = 20;
    public static readonly RULE_mul_subexpr = 21;
    public static readonly RULE_con_subexpr = 22;
    public static readonly RULE_unary_op = 23;
    public static readonly RULE_unary_subexpr_suffix = 24;
    public static readonly RULE_unary_casual_subexpr = 25;
    public static readonly RULE_in_unary_casual_subexpr = 26;
    public static readonly RULE_unary_subexpr = 27;
    public static readonly RULE_in_unary_subexpr = 28;
    public static readonly RULE_list_literal = 29;
    public static readonly RULE_expr_dict_list = 30;
    public static readonly RULE_dict_literal = 31;
    public static readonly RULE_expr_struct_list = 32;
    public static readonly RULE_struct_literal = 33;
    public static readonly RULE_atom_expr = 34;
    public static readonly RULE_in_atom_expr = 35;
    public static readonly RULE_cast_expr = 36;
    public static readonly RULE_bitcast_expr = 37;
    public static readonly RULE_exists_expr = 38;
    public static readonly RULE_case_expr = 39;
    public static readonly RULE_lambda = 40;
    public static readonly RULE_in_expr = 41;
    public static readonly RULE_json_api_expr = 42;
    public static readonly RULE_jsonpath_spec = 43;
    public static readonly RULE_json_variable_name = 44;
    public static readonly RULE_json_variable = 45;
    public static readonly RULE_json_variables = 46;
    public static readonly RULE_json_common_args = 47;
    public static readonly RULE_json_case_handler = 48;
    public static readonly RULE_json_value = 49;
    public static readonly RULE_json_exists_handler = 50;
    public static readonly RULE_json_exists = 51;
    public static readonly RULE_json_query_wrapper = 52;
    public static readonly RULE_json_query_handler = 53;
    public static readonly RULE_json_query = 54;
    public static readonly RULE_smart_parenthesis = 55;
    public static readonly RULE_expr_list = 56;
    public static readonly RULE_pure_column_list = 57;
    public static readonly RULE_pure_column_or_named = 58;
    public static readonly RULE_pure_column_or_named_list = 59;
    public static readonly RULE_column_name = 60;
    public static readonly RULE_without_column_name = 61;
    public static readonly RULE_column_list = 62;
    public static readonly RULE_without_column_list = 63;
    public static readonly RULE_named_expr = 64;
    public static readonly RULE_named_expr_list = 65;
    public static readonly RULE_invoke_expr = 66;
    public static readonly RULE_invoke_expr_tail = 67;
    public static readonly RULE_using_call_expr = 68;
    public static readonly RULE_key_expr = 69;
    public static readonly RULE_when_expr = 70;
    public static readonly RULE_literal_value = 71;
    public static readonly RULE_bind_parameter = 72;
    public static readonly RULE_opt_bind_parameter = 73;
    public static readonly RULE_bind_parameter_list = 74;
    public static readonly RULE_named_bind_parameter = 75;
    public static readonly RULE_named_bind_parameter_list = 76;
    public static readonly RULE_signed_number = 77;
    public static readonly RULE_type_name_simple = 78;
    public static readonly RULE_integer_or_bind = 79;
    public static readonly RULE_type_name_tag = 80;
    public static readonly RULE_struct_arg = 81;
    public static readonly RULE_struct_arg_positional = 82;
    public static readonly RULE_variant_arg = 83;
    public static readonly RULE_callable_arg = 84;
    public static readonly RULE_callable_arg_list = 85;
    public static readonly RULE_type_name_decimal = 86;
    public static readonly RULE_type_name_optional = 87;
    public static readonly RULE_type_name_tuple = 88;
    public static readonly RULE_type_name_struct = 89;
    public static readonly RULE_type_name_variant = 90;
    public static readonly RULE_type_name_list = 91;
    public static readonly RULE_type_name_stream = 92;
    public static readonly RULE_type_name_flow = 93;
    public static readonly RULE_type_name_dict = 94;
    public static readonly RULE_type_name_set = 95;
    public static readonly RULE_type_name_enum = 96;
    public static readonly RULE_type_name_resource = 97;
    public static readonly RULE_type_name_tagged = 98;
    public static readonly RULE_type_name_callable = 99;
    public static readonly RULE_type_name_composite = 100;
    public static readonly RULE_type_name = 101;
    public static readonly RULE_type_name_or_bind = 102;
    public static readonly RULE_value_constructor_literal = 103;
    public static readonly RULE_value_constructor = 104;
    public static readonly RULE_declare_stmt = 105;
    public static readonly RULE_module_path = 106;
    public static readonly RULE_import_stmt = 107;
    public static readonly RULE_export_stmt = 108;
    public static readonly RULE_call_action = 109;
    public static readonly RULE_inline_action = 110;
    public static readonly RULE_do_stmt = 111;
    public static readonly RULE_pragma_stmt = 112;
    public static readonly RULE_pragma_value = 113;
    public static readonly RULE_sort_specification = 114;
    public static readonly RULE_sort_specification_list = 115;
    public static readonly RULE_select_stmt = 116;
    public static readonly RULE_select_unparenthesized_stmt = 117;
    public static readonly RULE_select_kind_parenthesis = 118;
    public static readonly RULE_select_op = 119;
    public static readonly RULE_select_kind_partial = 120;
    public static readonly RULE_select_kind = 121;
    public static readonly RULE_process_core = 122;
    public static readonly RULE_external_call_param = 123;
    public static readonly RULE_external_call_settings = 124;
    public static readonly RULE_reduce_core = 125;
    public static readonly RULE_opt_set_quantifier = 126;
    public static readonly RULE_select_core = 127;
    public static readonly RULE_row_pattern_recognition_clause = 128;
    public static readonly RULE_row_pattern_rows_per_match = 129;
    public static readonly RULE_row_pattern_empty_match_handling = 130;
    public static readonly RULE_row_pattern_measures = 131;
    public static readonly RULE_row_pattern_measure_list = 132;
    public static readonly RULE_row_pattern_measure_definition = 133;
    public static readonly RULE_row_pattern_common_syntax = 134;
    public static readonly RULE_row_pattern_skip_to = 135;
    public static readonly RULE_row_pattern_skip_to_variable_name = 136;
    public static readonly RULE_row_pattern_initial_or_seek = 137;
    public static readonly RULE_row_pattern = 138;
    public static readonly RULE_row_pattern_term = 139;
    public static readonly RULE_row_pattern_factor = 140;
    public static readonly RULE_row_pattern_quantifier = 141;
    public static readonly RULE_row_pattern_primary = 142;
    public static readonly RULE_row_pattern_primary_variable_name = 143;
    public static readonly RULE_row_pattern_permute = 144;
    public static readonly RULE_row_pattern_subset_clause = 145;
    public static readonly RULE_row_pattern_subset_list = 146;
    public static readonly RULE_row_pattern_subset_item = 147;
    public static readonly RULE_row_pattern_subset_item_variable_name = 148;
    public static readonly RULE_row_pattern_subset_rhs = 149;
    public static readonly RULE_row_pattern_subset_rhs_variable_name = 150;
    public static readonly RULE_row_pattern_definition_list = 151;
    public static readonly RULE_row_pattern_definition = 152;
    public static readonly RULE_row_pattern_definition_variable_name = 153;
    public static readonly RULE_row_pattern_definition_search_condition = 154;
    public static readonly RULE_search_condition = 155;
    public static readonly RULE_row_pattern_variable_name = 156;
    public static readonly RULE_order_by_clause = 157;
    public static readonly RULE_ext_order_by_clause = 158;
    public static readonly RULE_group_by_clause = 159;
    public static readonly RULE_grouping_element_list = 160;
    public static readonly RULE_grouping_element = 161;
    public static readonly RULE_ordinary_grouping_set = 162;
    public static readonly RULE_ordinary_grouping_set_list = 163;
    public static readonly RULE_rollup_list = 164;
    public static readonly RULE_cube_list = 165;
    public static readonly RULE_grouping_sets_specification = 166;
    public static readonly RULE_hopping_window_specification = 167;
    public static readonly RULE_result_column = 168;
    public static readonly RULE_join_source = 169;
    public static readonly RULE_named_column = 170;
    public static readonly RULE_flatten_by_arg = 171;
    public static readonly RULE_flatten_source = 172;
    public static readonly RULE_named_single_source = 173;
    public static readonly RULE_single_source = 174;
    public static readonly RULE_sample_clause = 175;
    public static readonly RULE_tablesample_clause = 176;
    public static readonly RULE_sampling_mode = 177;
    public static readonly RULE_repeatable_clause = 178;
    public static readonly RULE_join_op = 179;
    public static readonly RULE_join_constraint = 180;
    public static readonly RULE_returning_columns_list = 181;
    public static readonly RULE_into_table_stmt = 182;
    public static readonly RULE_into_values_source = 183;
    public static readonly RULE_values_stmt = 184;
    public static readonly RULE_values_source = 185;
    public static readonly RULE_values_source_row_list = 186;
    public static readonly RULE_values_source_row = 187;
    public static readonly RULE_simple_values_source = 188;
    public static readonly RULE_create_external_data_source_stmt = 189;
    public static readonly RULE_alter_external_data_source_stmt = 190;
    public static readonly RULE_alter_external_data_source_action = 191;
    public static readonly RULE_drop_external_data_source_stmt = 192;
    public static readonly RULE_create_view_stmt = 193;
    public static readonly RULE_drop_view_stmt = 194;
    public static readonly RULE_upsert_object_stmt = 195;
    public static readonly RULE_create_object_stmt = 196;
    public static readonly RULE_create_object_features = 197;
    public static readonly RULE_alter_object_stmt = 198;
    public static readonly RULE_alter_object_features = 199;
    public static readonly RULE_drop_object_stmt = 200;
    public static readonly RULE_drop_object_features = 201;
    public static readonly RULE_object_feature_value = 202;
    public static readonly RULE_object_feature_kv = 203;
    public static readonly RULE_object_feature_flag = 204;
    public static readonly RULE_object_feature = 205;
    public static readonly RULE_object_features = 206;
    public static readonly RULE_object_type_ref = 207;
    public static readonly RULE_create_table_stmt = 208;
    public static readonly RULE_create_table_entry = 209;
    public static readonly RULE_create_backup_collection_stmt = 210;
    public static readonly RULE_alter_backup_collection_stmt = 211;
    public static readonly RULE_drop_backup_collection_stmt = 212;
    public static readonly RULE_alter_backup_collection_actions = 213;
    public static readonly RULE_alter_backup_collection_action = 214;
    public static readonly RULE_backup_collection = 215;
    public static readonly RULE_backup_collection_settings = 216;
    public static readonly RULE_backup_collection_settings_entry = 217;
    public static readonly RULE_table_inherits = 218;
    public static readonly RULE_table_partition_by = 219;
    public static readonly RULE_with_table_settings = 220;
    public static readonly RULE_table_tablestore = 221;
    public static readonly RULE_table_settings_entry = 222;
    public static readonly RULE_table_as_source = 223;
    public static readonly RULE_alter_table_stmt = 224;
    public static readonly RULE_alter_table_action = 225;
    public static readonly RULE_alter_external_table_stmt = 226;
    public static readonly RULE_alter_external_table_action = 227;
    public static readonly RULE_alter_table_store_stmt = 228;
    public static readonly RULE_alter_table_store_action = 229;
    public static readonly RULE_alter_table_add_column = 230;
    public static readonly RULE_alter_table_drop_column = 231;
    public static readonly RULE_alter_table_alter_column = 232;
    public static readonly RULE_alter_table_alter_column_drop_not_null = 233;
    public static readonly RULE_alter_table_add_column_family = 234;
    public static readonly RULE_alter_table_alter_column_family = 235;
    public static readonly RULE_alter_table_set_table_setting_uncompat = 236;
    public static readonly RULE_alter_table_set_table_setting_compat = 237;
    public static readonly RULE_alter_table_reset_table_setting = 238;
    public static readonly RULE_alter_table_add_index = 239;
    public static readonly RULE_alter_table_drop_index = 240;
    public static readonly RULE_alter_table_rename_to = 241;
    public static readonly RULE_alter_table_rename_index_to = 242;
    public static readonly RULE_alter_table_add_changefeed = 243;
    public static readonly RULE_alter_table_alter_changefeed = 244;
    public static readonly RULE_alter_table_drop_changefeed = 245;
    public static readonly RULE_alter_table_alter_index = 246;
    public static readonly RULE_column_schema = 247;
    public static readonly RULE_family_relation = 248;
    public static readonly RULE_opt_column_constraints = 249;
    public static readonly RULE_column_order_by_specification = 250;
    public static readonly RULE_table_constraint = 251;
    public static readonly RULE_table_index = 252;
    public static readonly RULE_table_index_type = 253;
    public static readonly RULE_global_index = 254;
    public static readonly RULE_local_index = 255;
    public static readonly RULE_index_subtype = 256;
    public static readonly RULE_with_index_settings = 257;
    public static readonly RULE_index_setting_entry = 258;
    public static readonly RULE_index_setting_value = 259;
    public static readonly RULE_changefeed = 260;
    public static readonly RULE_changefeed_settings = 261;
    public static readonly RULE_changefeed_settings_entry = 262;
    public static readonly RULE_changefeed_setting_value = 263;
    public static readonly RULE_changefeed_alter_settings = 264;
    public static readonly RULE_alter_table_setting_entry = 265;
    public static readonly RULE_table_setting_value = 266;
    public static readonly RULE_family_entry = 267;
    public static readonly RULE_family_settings = 268;
    public static readonly RULE_family_settings_entry = 269;
    public static readonly RULE_family_setting_value = 270;
    public static readonly RULE_split_boundaries = 271;
    public static readonly RULE_literal_value_list = 272;
    public static readonly RULE_alter_table_alter_index_action = 273;
    public static readonly RULE_drop_table_stmt = 274;
    public static readonly RULE_create_user_stmt = 275;
    public static readonly RULE_alter_user_stmt = 276;
    public static readonly RULE_create_group_stmt = 277;
    public static readonly RULE_alter_group_stmt = 278;
    public static readonly RULE_drop_role_stmt = 279;
    public static readonly RULE_role_name = 280;
    public static readonly RULE_create_user_option = 281;
    public static readonly RULE_grant_permissions_stmt = 282;
    public static readonly RULE_revoke_permissions_stmt = 283;
    public static readonly RULE_permission_id = 284;
    public static readonly RULE_permission_name = 285;
    public static readonly RULE_permission_name_target = 286;
    public static readonly RULE_create_resource_pool_stmt = 287;
    public static readonly RULE_alter_resource_pool_stmt = 288;
    public static readonly RULE_alter_resource_pool_action = 289;
    public static readonly RULE_drop_resource_pool_stmt = 290;
    public static readonly RULE_create_resource_pool_classifier_stmt = 291;
    public static readonly RULE_alter_resource_pool_classifier_stmt = 292;
    public static readonly RULE_alter_resource_pool_classifier_action = 293;
    public static readonly RULE_drop_resource_pool_classifier_stmt = 294;
    public static readonly RULE_create_replication_stmt = 295;
    public static readonly RULE_replication_target = 296;
    public static readonly RULE_replication_settings = 297;
    public static readonly RULE_replication_settings_entry = 298;
    public static readonly RULE_alter_replication_stmt = 299;
    public static readonly RULE_alter_replication_action = 300;
    public static readonly RULE_alter_replication_set_setting = 301;
    public static readonly RULE_drop_replication_stmt = 302;
    public static readonly RULE_action_or_subquery_args = 303;
    public static readonly RULE_define_action_or_subquery_stmt = 304;
    public static readonly RULE_define_action_or_subquery_body = 305;
    public static readonly RULE_if_stmt = 306;
    public static readonly RULE_for_stmt = 307;
    public static readonly RULE_table_ref = 308;
    public static readonly RULE_table_key = 309;
    public static readonly RULE_table_arg = 310;
    public static readonly RULE_table_hints = 311;
    public static readonly RULE_table_hint = 312;
    public static readonly RULE_object_ref = 313;
    public static readonly RULE_simple_table_ref_core = 314;
    public static readonly RULE_simple_table_ref = 315;
    public static readonly RULE_into_simple_table_ref = 316;
    public static readonly RULE_delete_stmt = 317;
    public static readonly RULE_update_stmt = 318;
    public static readonly RULE_set_clause_choice = 319;
    public static readonly RULE_set_clause_list = 320;
    public static readonly RULE_set_clause = 321;
    public static readonly RULE_set_target = 322;
    public static readonly RULE_multiple_column_assignment = 323;
    public static readonly RULE_set_target_list = 324;
    public static readonly RULE_create_topic_stmt = 325;
    public static readonly RULE_create_topic_entries = 326;
    public static readonly RULE_create_topic_entry = 327;
    public static readonly RULE_with_topic_settings = 328;
    public static readonly RULE_alter_topic_stmt = 329;
    public static readonly RULE_alter_topic_action = 330;
    public static readonly RULE_alter_topic_add_consumer = 331;
    public static readonly RULE_topic_create_consumer_entry = 332;
    public static readonly RULE_alter_topic_alter_consumer = 333;
    public static readonly RULE_alter_topic_alter_consumer_entry = 334;
    public static readonly RULE_alter_topic_drop_consumer = 335;
    public static readonly RULE_topic_alter_consumer_set = 336;
    public static readonly RULE_topic_alter_consumer_reset = 337;
    public static readonly RULE_alter_topic_set_settings = 338;
    public static readonly RULE_alter_topic_reset_settings = 339;
    public static readonly RULE_drop_topic_stmt = 340;
    public static readonly RULE_topic_settings = 341;
    public static readonly RULE_topic_settings_entry = 342;
    public static readonly RULE_topic_setting_value = 343;
    public static readonly RULE_topic_consumer_with_settings = 344;
    public static readonly RULE_topic_consumer_settings = 345;
    public static readonly RULE_topic_consumer_settings_entry = 346;
    public static readonly RULE_topic_consumer_setting_value = 347;
    public static readonly RULE_topic_ref = 348;
    public static readonly RULE_topic_consumer_ref = 349;
    public static readonly RULE_null_treatment = 350;
    public static readonly RULE_filter_clause = 351;
    public static readonly RULE_window_name_or_specification = 352;
    public static readonly RULE_window_name = 353;
    public static readonly RULE_window_clause = 354;
    public static readonly RULE_window_definition_list = 355;
    public static readonly RULE_window_definition = 356;
    public static readonly RULE_new_window_name = 357;
    public static readonly RULE_window_specification = 358;
    public static readonly RULE_window_specification_details = 359;
    public static readonly RULE_existing_window_name = 360;
    public static readonly RULE_window_partition_clause = 361;
    public static readonly RULE_window_order_clause = 362;
    public static readonly RULE_window_frame_clause = 363;
    public static readonly RULE_window_frame_units = 364;
    public static readonly RULE_window_frame_extent = 365;
    public static readonly RULE_window_frame_between = 366;
    public static readonly RULE_window_frame_bound = 367;
    public static readonly RULE_window_frame_exclusion = 368;
    public static readonly RULE_use_stmt = 369;
    public static readonly RULE_subselect_stmt = 370;
    public static readonly RULE_named_nodes_stmt = 371;
    public static readonly RULE_commit_stmt = 372;
    public static readonly RULE_rollback_stmt = 373;
    public static readonly RULE_analyze_table = 374;
    public static readonly RULE_analyze_table_list = 375;
    public static readonly RULE_analyze_stmt = 376;
    public static readonly RULE_identifier = 377;
    public static readonly RULE_id = 378;
    public static readonly RULE_id_schema = 379;
    public static readonly RULE_id_expr = 380;
    public static readonly RULE_id_expr_in = 381;
    public static readonly RULE_id_window = 382;
    public static readonly RULE_id_table = 383;
    public static readonly RULE_id_without = 384;
    public static readonly RULE_id_hint = 385;
    public static readonly RULE_id_as_compat = 386;
    public static readonly RULE_an_id = 387;
    public static readonly RULE_an_id_or_type = 388;
    public static readonly RULE_an_id_schema = 389;
    public static readonly RULE_an_id_expr = 390;
    public static readonly RULE_an_id_expr_in = 391;
    public static readonly RULE_an_id_window = 392;
    public static readonly RULE_an_id_table = 393;
    public static readonly RULE_an_id_without = 394;
    public static readonly RULE_an_id_hint = 395;
    public static readonly RULE_an_id_pure = 396;
    public static readonly RULE_an_id_as_compat = 397;
    public static readonly RULE_view_name = 398;
    public static readonly RULE_opt_id_prefix = 399;
    public static readonly RULE_cluster_expr = 400;
    public static readonly RULE_id_or_type = 401;
    public static readonly RULE_opt_id_prefix_or_type = 402;
    public static readonly RULE_id_or_at = 403;
    public static readonly RULE_id_table_or_type = 404;
    public static readonly RULE_id_table_or_at = 405;
    public static readonly RULE_keyword = 406;
    public static readonly RULE_keyword_expr_uncompat = 407;
    public static readonly RULE_keyword_table_uncompat = 408;
    public static readonly RULE_keyword_select_uncompat = 409;
    public static readonly RULE_keyword_alter_uncompat = 410;
    public static readonly RULE_keyword_in_uncompat = 411;
    public static readonly RULE_keyword_window_uncompat = 412;
    public static readonly RULE_keyword_hint_uncompat = 413;
    public static readonly RULE_keyword_as_compat = 414;
    public static readonly RULE_keyword_compat = 415;
    public static readonly RULE_type_id = 416;
    public static readonly RULE_bool_value = 417;
    public static readonly RULE_real = 418;
    public static readonly RULE_integer = 419;

    public static readonly literalNames = [
        null, "'='", "'=='", "'!='", "'<>'", "'<'", "'<='", "'>'", "'>='", 
        "'<<'", "'|<<'", "'&'", "'|'", "'||'", "'<|'", "'|>'", "'+'", "'-'", 
        "'~'", "'*'", "'/'", "'\\'", "'%'", "';'", "'.'", "','", "'('", 
        "')'", "'?'", "':'", "'@'", "'@@'", "'$'", "'\"'", "'''", "'`'", 
        "'{'", "'}'", "'^'", "'::'", "'->'", "']'", "'['"
    ];

    public static readonly symbolicNames = [
        null, "EQUALS", "EQUALS2", "NOT_EQUALS", "NOT_EQUALS2", "LESS", 
        "LESS_OR_EQ", "GREATER", "GREATER_OR_EQ", "SHIFT_LEFT", "ROT_LEFT", 
        "AMPERSAND", "PIPE", "DOUBLE_PIPE", "STRUCT_OPEN", "STRUCT_CLOSE", 
        "PLUS", "MINUS", "TILDA", "ASTERISK", "SLASH", "BACKSLASH", "PERCENT", 
        "SEMICOLON", "DOT", "COMMA", "LPAREN", "RPAREN", "QUESTION", "COLON", 
        "AT", "DOUBLE_AT", "DOLLAR", "QUOTE_DOUBLE", "QUOTE_SINGLE", "BACKTICK", 
        "LBRACE_CURLY", "RBRACE_CURLY", "CARET", "NAMESPACE", "ARROW", "RBRACE_SQUARE", 
        "LBRACE_SQUARE", "ABORT", "ACTION", "ADD", "AFTER", "ALL", "ALTER", 
        "ANALYZE", "AND", "ANSI", "ANY", "ARRAY", "AS", "ASC", "ASSUME", 
        "ASYMMETRIC", "ASYNC", "ATTACH", "ATTRIBUTES", "AUTOINCREMENT", 
        "AUTOMAP", "BACKUP", "COLLECTION", "BEFORE", "BEGIN", "BERNOULLI", 
        "BETWEEN", "BITCAST", "BY", "CALLABLE", "CASCADE", "CASE", "CAST", 
        "CHANGEFEED", "CHECK", "CLASSIFIER", "COLLATE", "COLUMN", "COLUMNS", 
        "COMMIT", "COMPACT", "CONDITIONAL", "CONFLICT", "CONNECT", "CONSTRAINT", 
        "CONSUMER", "COVER", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", 
        "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATA", "DATABASE", "DECIMAL", 
        "DECLARE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DEFINE", "DELETE", 
        "DESC", "DESCRIBE", "DETACH", "DICT", "DIRECTORY", "DISABLE", "DISCARD", 
        "DISTINCT", "DO", "DROP", "EACH", "ELSE", "EMPTY", "EMPTY_ACTION", 
        "ENCRYPTED", "END", "ENUM", "ERASE", "ERROR", "ESCAPE", "EVALUATE", 
        "EXCEPT", "EXCLUDE", "EXCLUSION", "EXCLUSIVE", "EXISTS", "EXPLAIN", 
        "EXPORT", "EXTERNAL", "FAIL", "FALSE", "FAMILY", "FILTER", "FIRST", 
        "FLATTEN", "FLOW", "FOLLOWING", "FOR", "FOREIGN", "FROM", "FULL", 
        "FUNCTION", "GLOB", "GLOBAL", "GRANT", "GROUP", "GROUPING", "GROUPS", 
        "HASH", "HAVING", "HOP", "IF", "IGNORE", "ILIKE", "IMMEDIATE", "IMPORT", 
        "IN", "INDEX", "INDEXED", "INHERITS", "INITIAL", "INITIALLY", "INNER", 
        "INSERT", "INSTEAD", "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", 
        "JSON_EXISTS", "JSON_QUERY", "JSON_VALUE", "KEY", "LAST", "LEFT", 
        "LEGACY", "LIKE", "LIMIT", "LIST", "LOCAL", "MANAGE", "MATCH", "MATCHES", 
        "MATCH_RECOGNIZE", "MEASURES", "MICROSECONDS", "MILLISECONDS", "MODIFY", 
        "NANOSECONDS", "NATURAL", "NEXT", "NO", "NOT", "NOTNULL", "NULL", 
        "NULLS", "OBJECT", "OF", "OFFSET", "OMIT", "ON", "ONE", "ONLY", 
        "OPTION", "OPTIONAL", "OR", "ORDER", "OTHERS", "OUTER", "OVER", 
        "PARALLEL", "PARTITION", "PASSING", "PASSWORD", "PAST", "PATTERN", 
        "PER", "PERMUTE", "PLAN", "POOL", "PRAGMA", "PRECEDING", "PRESORT", 
        "PRIMARY", "PRIVILEGES", "PROCESS", "QUEUE", "RAISE", "RANGE", "REDUCE", 
        "REFERENCES", "REGEXP", "REINDEX", "RELEASE", "REMOVE", "RENAME", 
        "REPEATABLE", "REPLACE", "REPLICATION", "RESET", "RESOURCE", "RESPECT", 
        "RESTRICT", "RESULT", "RETURN", "RETURNING", "REVERT", "REVOKE", 
        "RIGHT", "RLIKE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "SAMPLE", 
        "SAVEPOINT", "SCHEMA", "SECONDS", "SEEK", "SELECT", "SEMI", "SET", 
        "SETS", "SHOW", "TSKIP", "SOURCE", "STREAM", "STRUCT", "SUBQUERY", 
        "SUBSET", "SYMBOLS", "SYMMETRIC", "SYNC", "SYSTEM", "TABLE", "TABLES", 
        "TABLESAMPLE", "TABLESTORE", "TAGGED", "TEMP", "TEMPORARY", "THEN", 
        "TIES", "TO", "TOPIC", "TRANSACTION", "TRIGGER", "TRUE", "TUPLE", 
        "TYPE", "UNBOUNDED", "UNCONDITIONAL", "UNION", "UNIQUE", "UNKNOWN", 
        "UNMATCHED", "UPDATE", "UPSERT", "USE", "USER", "USING", "VACUUM", 
        "VALUES", "VARIANT", "VIEW", "VIRTUAL", "WHEN", "WHERE", "WINDOW", 
        "WITH", "WITHOUT", "WRAPPER", "XOR", "STRING_VALUE", "ID_PLAIN", 
        "ID_QUOTED", "DIGITS", "INTEGER_VALUE", "REAL", "BLOB", "TQ", "TU", 
        "TE", "TR", "TY", "WS", "COMMENT"
    ];
    public static readonly ruleNames = [
        "sql_query", "sql_stmt_list", "ansi_sql_stmt_list", "lambda_body", 
        "lambda_stmt", "sql_stmt", "sql_stmt_core", "expr", "or_subexpr", 
        "and_subexpr", "xor_subexpr", "distinct_from_op", "cond_expr", "match_op", 
        "eq_subexpr", "shift_right", "rot_right", "double_question", "neq_subexpr", 
        "bit_subexpr", "add_subexpr", "mul_subexpr", "con_subexpr", "unary_op", 
        "unary_subexpr_suffix", "unary_casual_subexpr", "in_unary_casual_subexpr", 
        "unary_subexpr", "in_unary_subexpr", "list_literal", "expr_dict_list", 
        "dict_literal", "expr_struct_list", "struct_literal", "atom_expr", 
        "in_atom_expr", "cast_expr", "bitcast_expr", "exists_expr", "case_expr", 
        "lambda", "in_expr", "json_api_expr", "jsonpath_spec", "json_variable_name", 
        "json_variable", "json_variables", "json_common_args", "json_case_handler", 
        "json_value", "json_exists_handler", "json_exists", "json_query_wrapper", 
        "json_query_handler", "json_query", "smart_parenthesis", "expr_list", 
        "pure_column_list", "pure_column_or_named", "pure_column_or_named_list", 
        "column_name", "without_column_name", "column_list", "without_column_list", 
        "named_expr", "named_expr_list", "invoke_expr", "invoke_expr_tail", 
        "using_call_expr", "key_expr", "when_expr", "literal_value", "bind_parameter", 
        "opt_bind_parameter", "bind_parameter_list", "named_bind_parameter", 
        "named_bind_parameter_list", "signed_number", "type_name_simple", 
        "integer_or_bind", "type_name_tag", "struct_arg", "struct_arg_positional", 
        "variant_arg", "callable_arg", "callable_arg_list", "type_name_decimal", 
        "type_name_optional", "type_name_tuple", "type_name_struct", "type_name_variant", 
        "type_name_list", "type_name_stream", "type_name_flow", "type_name_dict", 
        "type_name_set", "type_name_enum", "type_name_resource", "type_name_tagged", 
        "type_name_callable", "type_name_composite", "type_name", "type_name_or_bind", 
        "value_constructor_literal", "value_constructor", "declare_stmt", 
        "module_path", "import_stmt", "export_stmt", "call_action", "inline_action", 
        "do_stmt", "pragma_stmt", "pragma_value", "sort_specification", 
        "sort_specification_list", "select_stmt", "select_unparenthesized_stmt", 
        "select_kind_parenthesis", "select_op", "select_kind_partial", "select_kind", 
        "process_core", "external_call_param", "external_call_settings", 
        "reduce_core", "opt_set_quantifier", "select_core", "row_pattern_recognition_clause", 
        "row_pattern_rows_per_match", "row_pattern_empty_match_handling", 
        "row_pattern_measures", "row_pattern_measure_list", "row_pattern_measure_definition", 
        "row_pattern_common_syntax", "row_pattern_skip_to", "row_pattern_skip_to_variable_name", 
        "row_pattern_initial_or_seek", "row_pattern", "row_pattern_term", 
        "row_pattern_factor", "row_pattern_quantifier", "row_pattern_primary", 
        "row_pattern_primary_variable_name", "row_pattern_permute", "row_pattern_subset_clause", 
        "row_pattern_subset_list", "row_pattern_subset_item", "row_pattern_subset_item_variable_name", 
        "row_pattern_subset_rhs", "row_pattern_subset_rhs_variable_name", 
        "row_pattern_definition_list", "row_pattern_definition", "row_pattern_definition_variable_name", 
        "row_pattern_definition_search_condition", "search_condition", "row_pattern_variable_name", 
        "order_by_clause", "ext_order_by_clause", "group_by_clause", "grouping_element_list", 
        "grouping_element", "ordinary_grouping_set", "ordinary_grouping_set_list", 
        "rollup_list", "cube_list", "grouping_sets_specification", "hopping_window_specification", 
        "result_column", "join_source", "named_column", "flatten_by_arg", 
        "flatten_source", "named_single_source", "single_source", "sample_clause", 
        "tablesample_clause", "sampling_mode", "repeatable_clause", "join_op", 
        "join_constraint", "returning_columns_list", "into_table_stmt", 
        "into_values_source", "values_stmt", "values_source", "values_source_row_list", 
        "values_source_row", "simple_values_source", "create_external_data_source_stmt", 
        "alter_external_data_source_stmt", "alter_external_data_source_action", 
        "drop_external_data_source_stmt", "create_view_stmt", "drop_view_stmt", 
        "upsert_object_stmt", "create_object_stmt", "create_object_features", 
        "alter_object_stmt", "alter_object_features", "drop_object_stmt", 
        "drop_object_features", "object_feature_value", "object_feature_kv", 
        "object_feature_flag", "object_feature", "object_features", "object_type_ref", 
        "create_table_stmt", "create_table_entry", "create_backup_collection_stmt", 
        "alter_backup_collection_stmt", "drop_backup_collection_stmt", "alter_backup_collection_actions", 
        "alter_backup_collection_action", "backup_collection", "backup_collection_settings", 
        "backup_collection_settings_entry", "table_inherits", "table_partition_by", 
        "with_table_settings", "table_tablestore", "table_settings_entry", 
        "table_as_source", "alter_table_stmt", "alter_table_action", "alter_external_table_stmt", 
        "alter_external_table_action", "alter_table_store_stmt", "alter_table_store_action", 
        "alter_table_add_column", "alter_table_drop_column", "alter_table_alter_column", 
        "alter_table_alter_column_drop_not_null", "alter_table_add_column_family", 
        "alter_table_alter_column_family", "alter_table_set_table_setting_uncompat", 
        "alter_table_set_table_setting_compat", "alter_table_reset_table_setting", 
        "alter_table_add_index", "alter_table_drop_index", "alter_table_rename_to", 
        "alter_table_rename_index_to", "alter_table_add_changefeed", "alter_table_alter_changefeed", 
        "alter_table_drop_changefeed", "alter_table_alter_index", "column_schema", 
        "family_relation", "opt_column_constraints", "column_order_by_specification", 
        "table_constraint", "table_index", "table_index_type", "global_index", 
        "local_index", "index_subtype", "with_index_settings", "index_setting_entry", 
        "index_setting_value", "changefeed", "changefeed_settings", "changefeed_settings_entry", 
        "changefeed_setting_value", "changefeed_alter_settings", "alter_table_setting_entry", 
        "table_setting_value", "family_entry", "family_settings", "family_settings_entry", 
        "family_setting_value", "split_boundaries", "literal_value_list", 
        "alter_table_alter_index_action", "drop_table_stmt", "create_user_stmt", 
        "alter_user_stmt", "create_group_stmt", "alter_group_stmt", "drop_role_stmt", 
        "role_name", "create_user_option", "grant_permissions_stmt", "revoke_permissions_stmt", 
        "permission_id", "permission_name", "permission_name_target", "create_resource_pool_stmt", 
        "alter_resource_pool_stmt", "alter_resource_pool_action", "drop_resource_pool_stmt", 
        "create_resource_pool_classifier_stmt", "alter_resource_pool_classifier_stmt", 
        "alter_resource_pool_classifier_action", "drop_resource_pool_classifier_stmt", 
        "create_replication_stmt", "replication_target", "replication_settings", 
        "replication_settings_entry", "alter_replication_stmt", "alter_replication_action", 
        "alter_replication_set_setting", "drop_replication_stmt", "action_or_subquery_args", 
        "define_action_or_subquery_stmt", "define_action_or_subquery_body", 
        "if_stmt", "for_stmt", "table_ref", "table_key", "table_arg", "table_hints", 
        "table_hint", "object_ref", "simple_table_ref_core", "simple_table_ref", 
        "into_simple_table_ref", "delete_stmt", "update_stmt", "set_clause_choice", 
        "set_clause_list", "set_clause", "set_target", "multiple_column_assignment", 
        "set_target_list", "create_topic_stmt", "create_topic_entries", 
        "create_topic_entry", "with_topic_settings", "alter_topic_stmt", 
        "alter_topic_action", "alter_topic_add_consumer", "topic_create_consumer_entry", 
        "alter_topic_alter_consumer", "alter_topic_alter_consumer_entry", 
        "alter_topic_drop_consumer", "topic_alter_consumer_set", "topic_alter_consumer_reset", 
        "alter_topic_set_settings", "alter_topic_reset_settings", "drop_topic_stmt", 
        "topic_settings", "topic_settings_entry", "topic_setting_value", 
        "topic_consumer_with_settings", "topic_consumer_settings", "topic_consumer_settings_entry", 
        "topic_consumer_setting_value", "topic_ref", "topic_consumer_ref", 
        "null_treatment", "filter_clause", "window_name_or_specification", 
        "window_name", "window_clause", "window_definition_list", "window_definition", 
        "new_window_name", "window_specification", "window_specification_details", 
        "existing_window_name", "window_partition_clause", "window_order_clause", 
        "window_frame_clause", "window_frame_units", "window_frame_extent", 
        "window_frame_between", "window_frame_bound", "window_frame_exclusion", 
        "use_stmt", "subselect_stmt", "named_nodes_stmt", "commit_stmt", 
        "rollback_stmt", "analyze_table", "analyze_table_list", "analyze_stmt", 
        "identifier", "id", "id_schema", "id_expr", "id_expr_in", "id_window", 
        "id_table", "id_without", "id_hint", "id_as_compat", "an_id", "an_id_or_type", 
        "an_id_schema", "an_id_expr", "an_id_expr_in", "an_id_window", "an_id_table", 
        "an_id_without", "an_id_hint", "an_id_pure", "an_id_as_compat", 
        "view_name", "opt_id_prefix", "cluster_expr", "id_or_type", "opt_id_prefix_or_type", 
        "id_or_at", "id_table_or_type", "id_table_or_at", "keyword", "keyword_expr_uncompat", 
        "keyword_table_uncompat", "keyword_select_uncompat", "keyword_alter_uncompat", 
        "keyword_in_uncompat", "keyword_window_uncompat", "keyword_hint_uncompat", 
        "keyword_as_compat", "keyword_compat", "type_id", "bool_value", 
        "real", "integer",
    ];

    public get grammarFileName(): string { return "YQL.g4"; }
    public get literalNames(): (string | null)[] { return YQLParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return YQLParser.symbolicNames; }
    public get ruleNames(): string[] { return YQLParser.ruleNames; }
    public get serializedATN(): number[] { return YQLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, YQLParser._ATN, YQLParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public sql_query(): Sql_queryContext {
        let localContext = new Sql_queryContext(this.context, this.state);
        this.enterRule(localContext, 0, YQLParser.RULE_sql_query);
        try {
            this.state = 845;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 0, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 840;
                this.sql_stmt_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 841;
                this.match(YQLParser.PRAGMA);
                this.state = 842;
                this.match(YQLParser.ANSI);
                this.state = 843;
                this.match(YQLParser.DIGITS);
                this.state = 844;
                this.ansi_sql_stmt_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt_list(): Sql_stmt_listContext {
        let localContext = new Sql_stmt_listContext(this.context, this.state);
        this.enterRule(localContext, 2, YQLParser.RULE_sql_stmt_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 850;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 847;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 852;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 853;
            this.sql_stmt();
            this.state = 862;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 3, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 855;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 854;
                        this.match(YQLParser.SEMICOLON);
                        }
                        }
                        this.state = 857;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 23);
                    this.state = 859;
                    this.sql_stmt();
                    }
                    }
                }
                this.state = 864;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 3, this.context);
            }
            this.state = 868;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 865;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 870;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 871;
            this.match(YQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ansi_sql_stmt_list(): Ansi_sql_stmt_listContext {
        let localContext = new Ansi_sql_stmt_listContext(this.context, this.state);
        this.enterRule(localContext, 4, YQLParser.RULE_ansi_sql_stmt_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 876;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 873;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 878;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 879;
            this.match(YQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lambda_body(): Lambda_bodyContext {
        let localContext = new Lambda_bodyContext(this.context, this.state);
        this.enterRule(localContext, 6, YQLParser.RULE_lambda_body);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 884;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 881;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 886;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 895;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 32 || _la === 160) {
                {
                {
                this.state = 887;
                this.lambda_stmt();
                this.state = 889;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 888;
                    this.match(YQLParser.SEMICOLON);
                    }
                    }
                    this.state = 891;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 23);
                }
                }
                this.state = 897;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 898;
            this.match(YQLParser.RETURN);
            this.state = 899;
            this.expr();
            this.state = 903;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 900;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 905;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lambda_stmt(): Lambda_stmtContext {
        let localContext = new Lambda_stmtContext(this.context, this.state);
        this.enterRule(localContext, 8, YQLParser.RULE_lambda_stmt);
        try {
            this.state = 908;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 906;
                this.named_nodes_stmt();
                }
                break;
            case YQLParser.IMPORT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 907;
                this.import_stmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt(): Sql_stmtContext {
        let localContext = new Sql_stmtContext(this.context, this.state);
        this.enterRule(localContext, 10, YQLParser.RULE_sql_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 919;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 131) {
                {
                this.state = 910;
                this.match(YQLParser.EXPLAIN);
                this.state = 917;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 326) {
                    {
                    this.state = 911;
                    this.match(YQLParser.TQ);
                    this.state = 912;
                    this.match(YQLParser.TU);
                    this.state = 913;
                    this.match(YQLParser.TE);
                    this.state = 914;
                    this.match(YQLParser.TR);
                    this.state = 915;
                    this.match(YQLParser.TY);
                    this.state = 916;
                    this.match(YQLParser.PLAN);
                    }
                }

                }
            }

            this.state = 921;
            this.sql_stmt_core();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_stmt_core(): Sql_stmt_coreContext {
        let localContext = new Sql_stmt_coreContext(this.context, this.state);
        this.enterRule(localContext, 12, YQLParser.RULE_sql_stmt_core);
        try {
            this.state = 977;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 13, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 923;
                this.pragma_stmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 924;
                this.select_stmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 925;
                this.named_nodes_stmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 926;
                this.create_table_stmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 927;
                this.drop_table_stmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 928;
                this.use_stmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 929;
                this.into_table_stmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 930;
                this.commit_stmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 931;
                this.update_stmt();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 932;
                this.delete_stmt();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 933;
                this.rollback_stmt();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 934;
                this.declare_stmt();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 935;
                this.import_stmt();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 936;
                this.export_stmt();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 937;
                this.alter_table_stmt();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 938;
                this.alter_external_table_stmt();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 939;
                this.do_stmt();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 940;
                this.define_action_or_subquery_stmt();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 941;
                this.if_stmt();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 942;
                this.for_stmt();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 943;
                this.values_stmt();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 944;
                this.create_user_stmt();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 945;
                this.alter_user_stmt();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 946;
                this.create_group_stmt();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 947;
                this.alter_group_stmt();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 948;
                this.drop_role_stmt();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 949;
                this.create_object_stmt();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 950;
                this.alter_object_stmt();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 951;
                this.drop_object_stmt();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 952;
                this.create_external_data_source_stmt();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 953;
                this.alter_external_data_source_stmt();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 954;
                this.drop_external_data_source_stmt();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 955;
                this.create_replication_stmt();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 956;
                this.drop_replication_stmt();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 957;
                this.create_topic_stmt();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 958;
                this.alter_topic_stmt();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 959;
                this.drop_topic_stmt();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 960;
                this.grant_permissions_stmt();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 961;
                this.revoke_permissions_stmt();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 962;
                this.alter_table_store_stmt();
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 963;
                this.upsert_object_stmt();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 964;
                this.create_view_stmt();
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 965;
                this.drop_view_stmt();
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 966;
                this.alter_replication_stmt();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 967;
                this.create_resource_pool_stmt();
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 968;
                this.alter_resource_pool_stmt();
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 969;
                this.drop_resource_pool_stmt();
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 970;
                this.create_backup_collection_stmt();
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 971;
                this.alter_backup_collection_stmt();
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 972;
                this.drop_backup_collection_stmt();
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 973;
                this.analyze_stmt();
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 974;
                this.create_resource_pool_classifier_stmt();
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 975;
                this.alter_resource_pool_classifier_stmt();
                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 976;
                this.drop_resource_pool_classifier_stmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr(): ExprContext {
        let localContext = new ExprContext(this.context, this.state);
        this.enterRule(localContext, 14, YQLParser.RULE_expr);
        try {
            let alternative: number;
            this.state = 988;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 979;
                this.or_subexpr();
                this.state = 984;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 14, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 980;
                        this.match(YQLParser.OR);
                        this.state = 981;
                        this.or_subexpr();
                        }
                        }
                    }
                    this.state = 986;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 14, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 987;
                this.type_name_composite();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public or_subexpr(): Or_subexprContext {
        let localContext = new Or_subexprContext(this.context, this.state);
        this.enterRule(localContext, 16, YQLParser.RULE_or_subexpr);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 990;
            this.and_subexpr();
            this.state = 995;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 16, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 991;
                    this.match(YQLParser.AND);
                    this.state = 992;
                    this.and_subexpr();
                    }
                    }
                }
                this.state = 997;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 16, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public and_subexpr(): And_subexprContext {
        let localContext = new And_subexprContext(this.context, this.state);
        this.enterRule(localContext, 18, YQLParser.RULE_and_subexpr);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 998;
            this.xor_subexpr();
            this.state = 1003;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 17, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 999;
                    this.match(YQLParser.XOR);
                    this.state = 1000;
                    this.xor_subexpr();
                    }
                    }
                }
                this.state = 1005;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 17, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xor_subexpr(): Xor_subexprContext {
        let localContext = new Xor_subexprContext(this.context, this.state);
        this.enterRule(localContext, 20, YQLParser.RULE_xor_subexpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1006;
            this.eq_subexpr();
            this.state = 1008;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 18, this.context) ) {
            case 1:
                {
                this.state = 1007;
                this.cond_expr();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distinct_from_op(): Distinct_from_opContext {
        let localContext = new Distinct_from_opContext(this.context, this.state);
        this.enterRule(localContext, 22, YQLParser.RULE_distinct_from_op);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1010;
            this.match(YQLParser.IS);
            this.state = 1012;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 198) {
                {
                this.state = 1011;
                this.match(YQLParser.NOT);
                }
            }

            this.state = 1014;
            this.match(YQLParser.DISTINCT);
            this.state = 1015;
            this.match(YQLParser.FROM);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cond_expr(): Cond_exprContext {
        let localContext = new Cond_exprContext(this.context, this.state);
        this.enterRule(localContext, 24, YQLParser.RULE_cond_expr);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1068;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1018;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 1017;
                    this.match(YQLParser.NOT);
                    }
                }

                this.state = 1020;
                this.match_op();
                this.state = 1021;
                this.eq_subexpr();
                this.state = 1024;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 21, this.context) ) {
                case 1:
                    {
                    this.state = 1022;
                    this.match(YQLParser.ESCAPE);
                    this.state = 1023;
                    this.eq_subexpr();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1027;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 1026;
                    this.match(YQLParser.NOT);
                    }
                }

                this.state = 1029;
                this.match(YQLParser.IN);
                this.state = 1031;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context) ) {
                case 1:
                    {
                    this.state = 1030;
                    this.match(YQLParser.COMPACT);
                    }
                    break;
                }
                this.state = 1033;
                this.in_expr();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1043;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
                case 1:
                    {
                    this.state = 1034;
                    this.match(YQLParser.ISNULL);
                    }
                    break;
                case 2:
                    {
                    this.state = 1035;
                    this.match(YQLParser.NOTNULL);
                    }
                    break;
                case 3:
                    {
                    this.state = 1036;
                    this.match(YQLParser.IS);
                    this.state = 1037;
                    this.match(YQLParser.NULL);
                    }
                    break;
                case 4:
                    {
                    this.state = 1039;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 172) {
                        {
                        this.state = 1038;
                        this.match(YQLParser.IS);
                        }
                    }

                    this.state = 1041;
                    this.match(YQLParser.NOT);
                    this.state = 1042;
                    this.match(YQLParser.NULL);
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1046;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 1045;
                    this.match(YQLParser.NOT);
                    }
                }

                this.state = 1048;
                this.match(YQLParser.BETWEEN);
                this.state = 1050;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
                case 1:
                    {
                    this.state = 1049;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 57 || _la === 277)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 1052;
                this.eq_subexpr();
                this.state = 1053;
                this.match(YQLParser.AND);
                this.state = 1054;
                this.eq_subexpr();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1064;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 1061;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case YQLParser.EQUALS:
                            {
                            this.state = 1056;
                            this.match(YQLParser.EQUALS);
                            }
                            break;
                        case YQLParser.EQUALS2:
                            {
                            this.state = 1057;
                            this.match(YQLParser.EQUALS2);
                            }
                            break;
                        case YQLParser.NOT_EQUALS:
                            {
                            this.state = 1058;
                            this.match(YQLParser.NOT_EQUALS);
                            }
                            break;
                        case YQLParser.NOT_EQUALS2:
                            {
                            this.state = 1059;
                            this.match(YQLParser.NOT_EQUALS2);
                            }
                            break;
                        case YQLParser.IS:
                            {
                            this.state = 1060;
                            this.distinct_from_op();
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        this.state = 1063;
                        this.eq_subexpr();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1066;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 29, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public match_op(): Match_opContext {
        let localContext = new Match_opContext(this.context, this.state);
        this.enterRule(localContext, 26, YQLParser.RULE_match_op);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1070;
            _la = this.tokenStream.LA(1);
            if(!(_la === 147 || _la === 158 || _la === 182 || _la === 187 || _la === 237 || _la === 255)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public eq_subexpr(): Eq_subexprContext {
        let localContext = new Eq_subexprContext(this.context, this.state);
        this.enterRule(localContext, 28, YQLParser.RULE_eq_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1072;
            this.neq_subexpr();
            this.state = 1077;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 480) !== 0)) {
                {
                {
                this.state = 1073;
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 480) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1074;
                this.neq_subexpr();
                }
                }
                this.state = 1079;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public shift_right(): Shift_rightContext {
        let localContext = new Shift_rightContext(this.context, this.state);
        this.enterRule(localContext, 30, YQLParser.RULE_shift_right);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1080;
            this.match(YQLParser.GREATER);
            this.state = 1081;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rot_right(): Rot_rightContext {
        let localContext = new Rot_rightContext(this.context, this.state);
        this.enterRule(localContext, 32, YQLParser.RULE_rot_right);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1083;
            this.match(YQLParser.GREATER);
            this.state = 1084;
            this.match(YQLParser.GREATER);
            this.state = 1085;
            this.match(YQLParser.PIPE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public double_question(): Double_questionContext {
        let localContext = new Double_questionContext(this.context, this.state);
        this.enterRule(localContext, 34, YQLParser.RULE_double_question);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1087;
            this.match(YQLParser.QUESTION);
            this.state = 1088;
            this.match(YQLParser.QUESTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public neq_subexpr(): Neq_subexprContext {
        let localContext = new Neq_subexprContext(this.context, this.state);
        this.enterRule(localContext, 36, YQLParser.RULE_neq_subexpr);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1090;
            this.bit_subexpr();
            this.state = 1103;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 33, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1098;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
                    case 1:
                        {
                        this.state = 1091;
                        this.match(YQLParser.SHIFT_LEFT);
                        }
                        break;
                    case 2:
                        {
                        this.state = 1092;
                        this.shift_right();
                        }
                        break;
                    case 3:
                        {
                        this.state = 1093;
                        this.match(YQLParser.ROT_LEFT);
                        }
                        break;
                    case 4:
                        {
                        this.state = 1094;
                        this.rot_right();
                        }
                        break;
                    case 5:
                        {
                        this.state = 1095;
                        this.match(YQLParser.AMPERSAND);
                        }
                        break;
                    case 6:
                        {
                        this.state = 1096;
                        this.match(YQLParser.PIPE);
                        }
                        break;
                    case 7:
                        {
                        this.state = 1097;
                        this.match(YQLParser.CARET);
                        }
                        break;
                    }
                    this.state = 1100;
                    this.bit_subexpr();
                    }
                    }
                }
                this.state = 1105;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 33, this.context);
            }
            this.state = 1114;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 35, this.context) ) {
            case 1:
                {
                this.state = 1106;
                this.double_question();
                this.state = 1107;
                this.neq_subexpr();
                }
                break;
            case 2:
                {
                this.state = 1110;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 1109;
                    this.match(YQLParser.QUESTION);
                    }
                    }
                    this.state = 1112;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 28);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bit_subexpr(): Bit_subexprContext {
        let localContext = new Bit_subexprContext(this.context, this.state);
        this.enterRule(localContext, 38, YQLParser.RULE_bit_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1116;
            this.add_subexpr();
            this.state = 1121;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 16 || _la === 17) {
                {
                {
                this.state = 1117;
                _la = this.tokenStream.LA(1);
                if(!(_la === 16 || _la === 17)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1118;
                this.add_subexpr();
                }
                }
                this.state = 1123;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public add_subexpr(): Add_subexprContext {
        let localContext = new Add_subexprContext(this.context, this.state);
        this.enterRule(localContext, 40, YQLParser.RULE_add_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1124;
            this.mul_subexpr();
            this.state = 1129;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 5767168) !== 0)) {
                {
                {
                this.state = 1125;
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 5767168) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1126;
                this.mul_subexpr();
                }
                }
                this.state = 1131;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mul_subexpr(): Mul_subexprContext {
        let localContext = new Mul_subexprContext(this.context, this.state);
        this.enterRule(localContext, 42, YQLParser.RULE_mul_subexpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1132;
            this.con_subexpr();
            this.state = 1137;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 13) {
                {
                {
                this.state = 1133;
                this.match(YQLParser.DOUBLE_PIPE);
                this.state = 1134;
                this.con_subexpr();
                }
                }
                this.state = 1139;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public con_subexpr(): Con_subexprContext {
        let localContext = new Con_subexprContext(this.context, this.state);
        this.enterRule(localContext, 44, YQLParser.RULE_con_subexpr);
        try {
            this.state = 1144;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1140;
                this.unary_subexpr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1141;
                this.unary_op();
                this.state = 1142;
                this.unary_subexpr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unary_op(): Unary_opContext {
        let localContext = new Unary_opContext(this.context, this.state);
        this.enterRule(localContext, 46, YQLParser.RULE_unary_op);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1146;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 458752) !== 0) || _la === 198)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unary_subexpr_suffix(): Unary_subexpr_suffixContext {
        let localContext = new Unary_subexpr_suffixContext(this.context, this.state);
        this.enterRule(localContext, 48, YQLParser.RULE_unary_subexpr_suffix);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1160;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 24)) & ~0x1F) === 0 && ((1 << (_la - 24)) & 262149) !== 0)) {
                {
                {
                this.state = 1156;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.LBRACE_SQUARE:
                    {
                    this.state = 1148;
                    this.key_expr();
                    }
                    break;
                case YQLParser.LPAREN:
                    {
                    this.state = 1149;
                    this.invoke_expr();
                    }
                    break;
                case YQLParser.DOT:
                    {
                    this.state = 1150;
                    this.match(YQLParser.DOT);
                    this.state = 1154;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case YQLParser.DOLLAR:
                        {
                        this.state = 1151;
                        this.bind_parameter();
                        }
                        break;
                    case YQLParser.DIGITS:
                        {
                        this.state = 1152;
                        this.match(YQLParser.DIGITS);
                        }
                        break;
                    case YQLParser.ABORT:
                    case YQLParser.ACTION:
                    case YQLParser.ADD:
                    case YQLParser.AFTER:
                    case YQLParser.ALL:
                    case YQLParser.ALTER:
                    case YQLParser.ANALYZE:
                    case YQLParser.AND:
                    case YQLParser.ANSI:
                    case YQLParser.ANY:
                    case YQLParser.ARRAY:
                    case YQLParser.AS:
                    case YQLParser.ASC:
                    case YQLParser.ASSUME:
                    case YQLParser.ASYMMETRIC:
                    case YQLParser.ASYNC:
                    case YQLParser.ATTACH:
                    case YQLParser.ATTRIBUTES:
                    case YQLParser.AUTOINCREMENT:
                    case YQLParser.BACKUP:
                    case YQLParser.COLLECTION:
                    case YQLParser.BEFORE:
                    case YQLParser.BEGIN:
                    case YQLParser.BERNOULLI:
                    case YQLParser.BETWEEN:
                    case YQLParser.BITCAST:
                    case YQLParser.BY:
                    case YQLParser.CALLABLE:
                    case YQLParser.CASCADE:
                    case YQLParser.CASE:
                    case YQLParser.CAST:
                    case YQLParser.CHANGEFEED:
                    case YQLParser.CHECK:
                    case YQLParser.CLASSIFIER:
                    case YQLParser.COLLATE:
                    case YQLParser.COLUMN:
                    case YQLParser.COLUMNS:
                    case YQLParser.COMMIT:
                    case YQLParser.COMPACT:
                    case YQLParser.CONDITIONAL:
                    case YQLParser.CONFLICT:
                    case YQLParser.CONNECT:
                    case YQLParser.CONSTRAINT:
                    case YQLParser.CONSUMER:
                    case YQLParser.COVER:
                    case YQLParser.CREATE:
                    case YQLParser.CROSS:
                    case YQLParser.CUBE:
                    case YQLParser.CURRENT:
                    case YQLParser.CURRENT_DATE:
                    case YQLParser.CURRENT_TIME:
                    case YQLParser.CURRENT_TIMESTAMP:
                    case YQLParser.DATA:
                    case YQLParser.DATABASE:
                    case YQLParser.DECIMAL:
                    case YQLParser.DECLARE:
                    case YQLParser.DEFAULT:
                    case YQLParser.DEFERRABLE:
                    case YQLParser.DEFERRED:
                    case YQLParser.DEFINE:
                    case YQLParser.DELETE:
                    case YQLParser.DESC:
                    case YQLParser.DESCRIBE:
                    case YQLParser.DETACH:
                    case YQLParser.DICT:
                    case YQLParser.DIRECTORY:
                    case YQLParser.DISABLE:
                    case YQLParser.DISCARD:
                    case YQLParser.DISTINCT:
                    case YQLParser.DO:
                    case YQLParser.DROP:
                    case YQLParser.EACH:
                    case YQLParser.ELSE:
                    case YQLParser.EMPTY:
                    case YQLParser.EMPTY_ACTION:
                    case YQLParser.ENCRYPTED:
                    case YQLParser.END:
                    case YQLParser.ENUM:
                    case YQLParser.ERASE:
                    case YQLParser.ERROR:
                    case YQLParser.ESCAPE:
                    case YQLParser.EVALUATE:
                    case YQLParser.EXCEPT:
                    case YQLParser.EXCLUDE:
                    case YQLParser.EXCLUSION:
                    case YQLParser.EXCLUSIVE:
                    case YQLParser.EXISTS:
                    case YQLParser.EXPLAIN:
                    case YQLParser.EXPORT:
                    case YQLParser.EXTERNAL:
                    case YQLParser.FAIL:
                    case YQLParser.FAMILY:
                    case YQLParser.FILTER:
                    case YQLParser.FIRST:
                    case YQLParser.FLATTEN:
                    case YQLParser.FLOW:
                    case YQLParser.FOLLOWING:
                    case YQLParser.FOR:
                    case YQLParser.FOREIGN:
                    case YQLParser.FROM:
                    case YQLParser.FULL:
                    case YQLParser.FUNCTION:
                    case YQLParser.GLOB:
                    case YQLParser.GRANT:
                    case YQLParser.GROUP:
                    case YQLParser.GROUPING:
                    case YQLParser.GROUPS:
                    case YQLParser.HASH:
                    case YQLParser.HAVING:
                    case YQLParser.HOP:
                    case YQLParser.IF:
                    case YQLParser.IGNORE:
                    case YQLParser.ILIKE:
                    case YQLParser.IMMEDIATE:
                    case YQLParser.IMPORT:
                    case YQLParser.IN:
                    case YQLParser.INDEX:
                    case YQLParser.INDEXED:
                    case YQLParser.INHERITS:
                    case YQLParser.INITIAL:
                    case YQLParser.INITIALLY:
                    case YQLParser.INNER:
                    case YQLParser.INSERT:
                    case YQLParser.INSTEAD:
                    case YQLParser.INTERSECT:
                    case YQLParser.INTO:
                    case YQLParser.IS:
                    case YQLParser.ISNULL:
                    case YQLParser.JOIN:
                    case YQLParser.JSON_EXISTS:
                    case YQLParser.JSON_QUERY:
                    case YQLParser.JSON_VALUE:
                    case YQLParser.KEY:
                    case YQLParser.LAST:
                    case YQLParser.LEFT:
                    case YQLParser.LEGACY:
                    case YQLParser.LIKE:
                    case YQLParser.LIMIT:
                    case YQLParser.LIST:
                    case YQLParser.LOCAL:
                    case YQLParser.MANAGE:
                    case YQLParser.MATCH:
                    case YQLParser.MATCHES:
                    case YQLParser.MATCH_RECOGNIZE:
                    case YQLParser.MEASURES:
                    case YQLParser.MICROSECONDS:
                    case YQLParser.MILLISECONDS:
                    case YQLParser.MODIFY:
                    case YQLParser.NANOSECONDS:
                    case YQLParser.NATURAL:
                    case YQLParser.NEXT:
                    case YQLParser.NO:
                    case YQLParser.NOT:
                    case YQLParser.NOTNULL:
                    case YQLParser.NULL:
                    case YQLParser.NULLS:
                    case YQLParser.OBJECT:
                    case YQLParser.OF:
                    case YQLParser.OFFSET:
                    case YQLParser.OMIT:
                    case YQLParser.ON:
                    case YQLParser.ONE:
                    case YQLParser.ONLY:
                    case YQLParser.OPTION:
                    case YQLParser.OPTIONAL:
                    case YQLParser.OR:
                    case YQLParser.ORDER:
                    case YQLParser.OTHERS:
                    case YQLParser.OUTER:
                    case YQLParser.OVER:
                    case YQLParser.PARALLEL:
                    case YQLParser.PARTITION:
                    case YQLParser.PASSING:
                    case YQLParser.PASSWORD:
                    case YQLParser.PAST:
                    case YQLParser.PATTERN:
                    case YQLParser.PER:
                    case YQLParser.PERMUTE:
                    case YQLParser.PLAN:
                    case YQLParser.POOL:
                    case YQLParser.PRAGMA:
                    case YQLParser.PRECEDING:
                    case YQLParser.PRESORT:
                    case YQLParser.PRIMARY:
                    case YQLParser.PRIVILEGES:
                    case YQLParser.PROCESS:
                    case YQLParser.QUEUE:
                    case YQLParser.RAISE:
                    case YQLParser.RANGE:
                    case YQLParser.REDUCE:
                    case YQLParser.REFERENCES:
                    case YQLParser.REGEXP:
                    case YQLParser.REINDEX:
                    case YQLParser.RELEASE:
                    case YQLParser.REMOVE:
                    case YQLParser.RENAME:
                    case YQLParser.REPLACE:
                    case YQLParser.REPLICATION:
                    case YQLParser.RESET:
                    case YQLParser.RESOURCE:
                    case YQLParser.RESPECT:
                    case YQLParser.RESTRICT:
                    case YQLParser.RESULT:
                    case YQLParser.RETURN:
                    case YQLParser.RETURNING:
                    case YQLParser.REVERT:
                    case YQLParser.REVOKE:
                    case YQLParser.RIGHT:
                    case YQLParser.RLIKE:
                    case YQLParser.ROLLBACK:
                    case YQLParser.ROLLUP:
                    case YQLParser.ROW:
                    case YQLParser.ROWS:
                    case YQLParser.SAMPLE:
                    case YQLParser.SAVEPOINT:
                    case YQLParser.SCHEMA:
                    case YQLParser.SECONDS:
                    case YQLParser.SEEK:
                    case YQLParser.SELECT:
                    case YQLParser.SEMI:
                    case YQLParser.SET:
                    case YQLParser.SETS:
                    case YQLParser.SHOW:
                    case YQLParser.TSKIP:
                    case YQLParser.SOURCE:
                    case YQLParser.STREAM:
                    case YQLParser.STRUCT:
                    case YQLParser.SUBQUERY:
                    case YQLParser.SUBSET:
                    case YQLParser.SYMBOLS:
                    case YQLParser.SYMMETRIC:
                    case YQLParser.SYNC:
                    case YQLParser.SYSTEM:
                    case YQLParser.TABLE:
                    case YQLParser.TABLES:
                    case YQLParser.TABLESAMPLE:
                    case YQLParser.TABLESTORE:
                    case YQLParser.TAGGED:
                    case YQLParser.TEMP:
                    case YQLParser.TEMPORARY:
                    case YQLParser.THEN:
                    case YQLParser.TIES:
                    case YQLParser.TO:
                    case YQLParser.TOPIC:
                    case YQLParser.TRANSACTION:
                    case YQLParser.TRIGGER:
                    case YQLParser.TUPLE:
                    case YQLParser.TYPE:
                    case YQLParser.UNBOUNDED:
                    case YQLParser.UNCONDITIONAL:
                    case YQLParser.UNION:
                    case YQLParser.UNIQUE:
                    case YQLParser.UNKNOWN:
                    case YQLParser.UNMATCHED:
                    case YQLParser.UPDATE:
                    case YQLParser.UPSERT:
                    case YQLParser.USE:
                    case YQLParser.USER:
                    case YQLParser.USING:
                    case YQLParser.VACUUM:
                    case YQLParser.VALUES:
                    case YQLParser.VARIANT:
                    case YQLParser.VIEW:
                    case YQLParser.VIRTUAL:
                    case YQLParser.WHEN:
                    case YQLParser.WHERE:
                    case YQLParser.WINDOW:
                    case YQLParser.WITH:
                    case YQLParser.WITHOUT:
                    case YQLParser.WRAPPER:
                    case YQLParser.XOR:
                    case YQLParser.STRING_VALUE:
                    case YQLParser.ID_PLAIN:
                    case YQLParser.ID_QUOTED:
                        {
                        this.state = 1153;
                        this.an_id_or_type();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                }
                this.state = 1162;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1165;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 78) {
                {
                this.state = 1163;
                this.match(YQLParser.COLLATE);
                this.state = 1164;
                this.an_id();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unary_casual_subexpr(): Unary_casual_subexprContext {
        let localContext = new Unary_casual_subexprContext(this.context, this.state);
        this.enterRule(localContext, 50, YQLParser.RULE_unary_casual_subexpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1169;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 44, this.context) ) {
            case 1:
                {
                this.state = 1167;
                this.id_expr();
                }
                break;
            case 2:
                {
                this.state = 1168;
                this.atom_expr();
                }
                break;
            }
            this.state = 1171;
            this.unary_subexpr_suffix();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_unary_casual_subexpr(): In_unary_casual_subexprContext {
        let localContext = new In_unary_casual_subexprContext(this.context, this.state);
        this.enterRule(localContext, 52, YQLParser.RULE_in_unary_casual_subexpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1175;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 45, this.context) ) {
            case 1:
                {
                this.state = 1173;
                this.id_expr_in();
                }
                break;
            case 2:
                {
                this.state = 1174;
                this.in_atom_expr();
                }
                break;
            }
            this.state = 1177;
            this.unary_subexpr_suffix();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unary_subexpr(): Unary_subexprContext {
        let localContext = new Unary_subexprContext(this.context, this.state);
        this.enterRule(localContext, 54, YQLParser.RULE_unary_subexpr);
        try {
            this.state = 1181;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 46, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1179;
                this.unary_casual_subexpr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1180;
                this.json_api_expr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_unary_subexpr(): In_unary_subexprContext {
        let localContext = new In_unary_subexprContext(this.context, this.state);
        this.enterRule(localContext, 56, YQLParser.RULE_in_unary_subexpr);
        try {
            this.state = 1185;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 47, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1183;
                this.in_unary_casual_subexpr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1184;
                this.json_api_expr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public list_literal(): List_literalContext {
        let localContext = new List_literalContext(this.context, this.state);
        this.enterRule(localContext, 58, YQLParser.RULE_list_literal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1187;
            this.match(YQLParser.LBRACE_SQUARE);
            this.state = 1189;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 14)) & ~0x1F) === 0 && ((1 << (_la - 14)) & 4030992413) !== 0) || ((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & 4294901759) !== 0) || ((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & 4294967231) !== 0) || ((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967279) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 16777215) !== 0)) {
                {
                this.state = 1188;
                this.expr_list();
                }
            }

            this.state = 1192;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1191;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1194;
            this.match(YQLParser.RBRACE_SQUARE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr_dict_list(): Expr_dict_listContext {
        let localContext = new Expr_dict_listContext(this.context, this.state);
        this.enterRule(localContext, 60, YQLParser.RULE_expr_dict_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1196;
            this.expr();
            this.state = 1199;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 29) {
                {
                this.state = 1197;
                this.match(YQLParser.COLON);
                this.state = 1198;
                this.expr();
                }
            }

            this.state = 1209;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 52, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1201;
                    this.match(YQLParser.COMMA);
                    this.state = 1202;
                    this.expr();
                    this.state = 1205;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 29) {
                        {
                        this.state = 1203;
                        this.match(YQLParser.COLON);
                        this.state = 1204;
                        this.expr();
                        }
                    }

                    }
                    }
                }
                this.state = 1211;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 52, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dict_literal(): Dict_literalContext {
        let localContext = new Dict_literalContext(this.context, this.state);
        this.enterRule(localContext, 62, YQLParser.RULE_dict_literal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1212;
            this.match(YQLParser.LBRACE_CURLY);
            this.state = 1214;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 14)) & ~0x1F) === 0 && ((1 << (_la - 14)) & 4030992413) !== 0) || ((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & 4294901759) !== 0) || ((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & 4294967231) !== 0) || ((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967279) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 16777215) !== 0)) {
                {
                this.state = 1213;
                this.expr_dict_list();
                }
            }

            this.state = 1217;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1216;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1219;
            this.match(YQLParser.RBRACE_CURLY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr_struct_list(): Expr_struct_listContext {
        let localContext = new Expr_struct_listContext(this.context, this.state);
        this.enterRule(localContext, 64, YQLParser.RULE_expr_struct_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1221;
            this.expr();
            this.state = 1222;
            this.match(YQLParser.COLON);
            this.state = 1223;
            this.expr();
            this.state = 1231;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 55, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1224;
                    this.match(YQLParser.COMMA);
                    this.state = 1225;
                    this.expr();
                    this.state = 1226;
                    this.match(YQLParser.COLON);
                    this.state = 1227;
                    this.expr();
                    }
                    }
                }
                this.state = 1233;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 55, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public struct_literal(): Struct_literalContext {
        let localContext = new Struct_literalContext(this.context, this.state);
        this.enterRule(localContext, 66, YQLParser.RULE_struct_literal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1234;
            this.match(YQLParser.STRUCT_OPEN);
            this.state = 1236;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 14)) & ~0x1F) === 0 && ((1 << (_la - 14)) & 4030992413) !== 0) || ((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & 4294901759) !== 0) || ((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & 4294967231) !== 0) || ((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967279) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 16777215) !== 0)) {
                {
                this.state = 1235;
                this.expr_struct_list();
                }
            }

            this.state = 1239;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1238;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1241;
            this.match(YQLParser.STRUCT_CLOSE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atom_expr(): Atom_exprContext {
        let localContext = new Atom_exprContext(this.context, this.state);
        this.enterRule(localContext, 68, YQLParser.RULE_atom_expr);
        try {
            this.state = 1260;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 59, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1243;
                this.literal_value();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1244;
                this.bind_parameter();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1245;
                this.lambda();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1246;
                this.cast_expr();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1247;
                this.exists_expr();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1248;
                this.case_expr();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1249;
                this.an_id_or_type();
                this.state = 1250;
                this.match(YQLParser.NAMESPACE);
                this.state = 1253;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.ABORT:
                case YQLParser.ACTION:
                case YQLParser.ADD:
                case YQLParser.AFTER:
                case YQLParser.ALL:
                case YQLParser.ALTER:
                case YQLParser.ANALYZE:
                case YQLParser.AND:
                case YQLParser.ANSI:
                case YQLParser.ANY:
                case YQLParser.ARRAY:
                case YQLParser.AS:
                case YQLParser.ASC:
                case YQLParser.ASSUME:
                case YQLParser.ASYMMETRIC:
                case YQLParser.ASYNC:
                case YQLParser.ATTACH:
                case YQLParser.ATTRIBUTES:
                case YQLParser.AUTOINCREMENT:
                case YQLParser.BACKUP:
                case YQLParser.COLLECTION:
                case YQLParser.BEFORE:
                case YQLParser.BEGIN:
                case YQLParser.BERNOULLI:
                case YQLParser.BETWEEN:
                case YQLParser.BITCAST:
                case YQLParser.BY:
                case YQLParser.CALLABLE:
                case YQLParser.CASCADE:
                case YQLParser.CASE:
                case YQLParser.CAST:
                case YQLParser.CHANGEFEED:
                case YQLParser.CHECK:
                case YQLParser.CLASSIFIER:
                case YQLParser.COLLATE:
                case YQLParser.COLUMN:
                case YQLParser.COLUMNS:
                case YQLParser.COMMIT:
                case YQLParser.COMPACT:
                case YQLParser.CONDITIONAL:
                case YQLParser.CONFLICT:
                case YQLParser.CONNECT:
                case YQLParser.CONSTRAINT:
                case YQLParser.CONSUMER:
                case YQLParser.COVER:
                case YQLParser.CREATE:
                case YQLParser.CROSS:
                case YQLParser.CUBE:
                case YQLParser.CURRENT:
                case YQLParser.CURRENT_DATE:
                case YQLParser.CURRENT_TIME:
                case YQLParser.CURRENT_TIMESTAMP:
                case YQLParser.DATA:
                case YQLParser.DATABASE:
                case YQLParser.DECIMAL:
                case YQLParser.DECLARE:
                case YQLParser.DEFAULT:
                case YQLParser.DEFERRABLE:
                case YQLParser.DEFERRED:
                case YQLParser.DEFINE:
                case YQLParser.DELETE:
                case YQLParser.DESC:
                case YQLParser.DESCRIBE:
                case YQLParser.DETACH:
                case YQLParser.DICT:
                case YQLParser.DIRECTORY:
                case YQLParser.DISABLE:
                case YQLParser.DISCARD:
                case YQLParser.DISTINCT:
                case YQLParser.DO:
                case YQLParser.DROP:
                case YQLParser.EACH:
                case YQLParser.ELSE:
                case YQLParser.EMPTY:
                case YQLParser.EMPTY_ACTION:
                case YQLParser.ENCRYPTED:
                case YQLParser.END:
                case YQLParser.ENUM:
                case YQLParser.ERASE:
                case YQLParser.ERROR:
                case YQLParser.ESCAPE:
                case YQLParser.EVALUATE:
                case YQLParser.EXCEPT:
                case YQLParser.EXCLUDE:
                case YQLParser.EXCLUSION:
                case YQLParser.EXCLUSIVE:
                case YQLParser.EXISTS:
                case YQLParser.EXPLAIN:
                case YQLParser.EXPORT:
                case YQLParser.EXTERNAL:
                case YQLParser.FAIL:
                case YQLParser.FAMILY:
                case YQLParser.FILTER:
                case YQLParser.FIRST:
                case YQLParser.FLATTEN:
                case YQLParser.FLOW:
                case YQLParser.FOLLOWING:
                case YQLParser.FOR:
                case YQLParser.FOREIGN:
                case YQLParser.FROM:
                case YQLParser.FULL:
                case YQLParser.FUNCTION:
                case YQLParser.GLOB:
                case YQLParser.GRANT:
                case YQLParser.GROUP:
                case YQLParser.GROUPING:
                case YQLParser.GROUPS:
                case YQLParser.HASH:
                case YQLParser.HAVING:
                case YQLParser.HOP:
                case YQLParser.IF:
                case YQLParser.IGNORE:
                case YQLParser.ILIKE:
                case YQLParser.IMMEDIATE:
                case YQLParser.IMPORT:
                case YQLParser.IN:
                case YQLParser.INDEX:
                case YQLParser.INDEXED:
                case YQLParser.INHERITS:
                case YQLParser.INITIAL:
                case YQLParser.INITIALLY:
                case YQLParser.INNER:
                case YQLParser.INSERT:
                case YQLParser.INSTEAD:
                case YQLParser.INTERSECT:
                case YQLParser.INTO:
                case YQLParser.IS:
                case YQLParser.ISNULL:
                case YQLParser.JOIN:
                case YQLParser.JSON_EXISTS:
                case YQLParser.JSON_QUERY:
                case YQLParser.JSON_VALUE:
                case YQLParser.KEY:
                case YQLParser.LAST:
                case YQLParser.LEFT:
                case YQLParser.LEGACY:
                case YQLParser.LIKE:
                case YQLParser.LIMIT:
                case YQLParser.LIST:
                case YQLParser.LOCAL:
                case YQLParser.MANAGE:
                case YQLParser.MATCH:
                case YQLParser.MATCHES:
                case YQLParser.MATCH_RECOGNIZE:
                case YQLParser.MEASURES:
                case YQLParser.MICROSECONDS:
                case YQLParser.MILLISECONDS:
                case YQLParser.MODIFY:
                case YQLParser.NANOSECONDS:
                case YQLParser.NATURAL:
                case YQLParser.NEXT:
                case YQLParser.NO:
                case YQLParser.NOT:
                case YQLParser.NOTNULL:
                case YQLParser.NULL:
                case YQLParser.NULLS:
                case YQLParser.OBJECT:
                case YQLParser.OF:
                case YQLParser.OFFSET:
                case YQLParser.OMIT:
                case YQLParser.ON:
                case YQLParser.ONE:
                case YQLParser.ONLY:
                case YQLParser.OPTION:
                case YQLParser.OPTIONAL:
                case YQLParser.OR:
                case YQLParser.ORDER:
                case YQLParser.OTHERS:
                case YQLParser.OUTER:
                case YQLParser.OVER:
                case YQLParser.PARALLEL:
                case YQLParser.PARTITION:
                case YQLParser.PASSING:
                case YQLParser.PASSWORD:
                case YQLParser.PAST:
                case YQLParser.PATTERN:
                case YQLParser.PER:
                case YQLParser.PERMUTE:
                case YQLParser.PLAN:
                case YQLParser.POOL:
                case YQLParser.PRAGMA:
                case YQLParser.PRECEDING:
                case YQLParser.PRESORT:
                case YQLParser.PRIMARY:
                case YQLParser.PRIVILEGES:
                case YQLParser.PROCESS:
                case YQLParser.QUEUE:
                case YQLParser.RAISE:
                case YQLParser.RANGE:
                case YQLParser.REDUCE:
                case YQLParser.REFERENCES:
                case YQLParser.REGEXP:
                case YQLParser.REINDEX:
                case YQLParser.RELEASE:
                case YQLParser.REMOVE:
                case YQLParser.RENAME:
                case YQLParser.REPLACE:
                case YQLParser.REPLICATION:
                case YQLParser.RESET:
                case YQLParser.RESOURCE:
                case YQLParser.RESPECT:
                case YQLParser.RESTRICT:
                case YQLParser.RESULT:
                case YQLParser.RETURN:
                case YQLParser.RETURNING:
                case YQLParser.REVERT:
                case YQLParser.REVOKE:
                case YQLParser.RIGHT:
                case YQLParser.RLIKE:
                case YQLParser.ROLLBACK:
                case YQLParser.ROLLUP:
                case YQLParser.ROW:
                case YQLParser.ROWS:
                case YQLParser.SAMPLE:
                case YQLParser.SAVEPOINT:
                case YQLParser.SCHEMA:
                case YQLParser.SECONDS:
                case YQLParser.SEEK:
                case YQLParser.SELECT:
                case YQLParser.SEMI:
                case YQLParser.SET:
                case YQLParser.SETS:
                case YQLParser.SHOW:
                case YQLParser.TSKIP:
                case YQLParser.SOURCE:
                case YQLParser.STREAM:
                case YQLParser.STRUCT:
                case YQLParser.SUBQUERY:
                case YQLParser.SUBSET:
                case YQLParser.SYMBOLS:
                case YQLParser.SYMMETRIC:
                case YQLParser.SYNC:
                case YQLParser.SYSTEM:
                case YQLParser.TABLE:
                case YQLParser.TABLES:
                case YQLParser.TABLESAMPLE:
                case YQLParser.TABLESTORE:
                case YQLParser.TAGGED:
                case YQLParser.TEMP:
                case YQLParser.TEMPORARY:
                case YQLParser.THEN:
                case YQLParser.TIES:
                case YQLParser.TO:
                case YQLParser.TOPIC:
                case YQLParser.TRANSACTION:
                case YQLParser.TRIGGER:
                case YQLParser.TUPLE:
                case YQLParser.TYPE:
                case YQLParser.UNBOUNDED:
                case YQLParser.UNCONDITIONAL:
                case YQLParser.UNION:
                case YQLParser.UNIQUE:
                case YQLParser.UNKNOWN:
                case YQLParser.UNMATCHED:
                case YQLParser.UPDATE:
                case YQLParser.UPSERT:
                case YQLParser.USE:
                case YQLParser.USER:
                case YQLParser.USING:
                case YQLParser.VACUUM:
                case YQLParser.VALUES:
                case YQLParser.VARIANT:
                case YQLParser.VIEW:
                case YQLParser.VIRTUAL:
                case YQLParser.WHEN:
                case YQLParser.WHERE:
                case YQLParser.WINDOW:
                case YQLParser.WITH:
                case YQLParser.WITHOUT:
                case YQLParser.WRAPPER:
                case YQLParser.XOR:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 1251;
                    this.id_or_type();
                    }
                    break;
                case YQLParser.STRING_VALUE:
                    {
                    this.state = 1252;
                    this.match(YQLParser.STRING_VALUE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1255;
                this.value_constructor();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1256;
                this.bitcast_expr();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1257;
                this.list_literal();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1258;
                this.dict_literal();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1259;
                this.struct_literal();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_atom_expr(): In_atom_exprContext {
        let localContext = new In_atom_exprContext(this.context, this.state);
        this.enterRule(localContext, 70, YQLParser.RULE_in_atom_expr);
        try {
            this.state = 1282;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 61, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1262;
                this.literal_value();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1263;
                this.bind_parameter();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1264;
                this.lambda();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1265;
                this.cast_expr();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1266;
                this.case_expr();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1267;
                this.an_id_or_type();
                this.state = 1268;
                this.match(YQLParser.NAMESPACE);
                this.state = 1271;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.ABORT:
                case YQLParser.ACTION:
                case YQLParser.ADD:
                case YQLParser.AFTER:
                case YQLParser.ALL:
                case YQLParser.ALTER:
                case YQLParser.ANALYZE:
                case YQLParser.AND:
                case YQLParser.ANSI:
                case YQLParser.ANY:
                case YQLParser.ARRAY:
                case YQLParser.AS:
                case YQLParser.ASC:
                case YQLParser.ASSUME:
                case YQLParser.ASYMMETRIC:
                case YQLParser.ASYNC:
                case YQLParser.ATTACH:
                case YQLParser.ATTRIBUTES:
                case YQLParser.AUTOINCREMENT:
                case YQLParser.BACKUP:
                case YQLParser.COLLECTION:
                case YQLParser.BEFORE:
                case YQLParser.BEGIN:
                case YQLParser.BERNOULLI:
                case YQLParser.BETWEEN:
                case YQLParser.BITCAST:
                case YQLParser.BY:
                case YQLParser.CALLABLE:
                case YQLParser.CASCADE:
                case YQLParser.CASE:
                case YQLParser.CAST:
                case YQLParser.CHANGEFEED:
                case YQLParser.CHECK:
                case YQLParser.CLASSIFIER:
                case YQLParser.COLLATE:
                case YQLParser.COLUMN:
                case YQLParser.COLUMNS:
                case YQLParser.COMMIT:
                case YQLParser.COMPACT:
                case YQLParser.CONDITIONAL:
                case YQLParser.CONFLICT:
                case YQLParser.CONNECT:
                case YQLParser.CONSTRAINT:
                case YQLParser.CONSUMER:
                case YQLParser.COVER:
                case YQLParser.CREATE:
                case YQLParser.CROSS:
                case YQLParser.CUBE:
                case YQLParser.CURRENT:
                case YQLParser.CURRENT_DATE:
                case YQLParser.CURRENT_TIME:
                case YQLParser.CURRENT_TIMESTAMP:
                case YQLParser.DATA:
                case YQLParser.DATABASE:
                case YQLParser.DECIMAL:
                case YQLParser.DECLARE:
                case YQLParser.DEFAULT:
                case YQLParser.DEFERRABLE:
                case YQLParser.DEFERRED:
                case YQLParser.DEFINE:
                case YQLParser.DELETE:
                case YQLParser.DESC:
                case YQLParser.DESCRIBE:
                case YQLParser.DETACH:
                case YQLParser.DICT:
                case YQLParser.DIRECTORY:
                case YQLParser.DISABLE:
                case YQLParser.DISCARD:
                case YQLParser.DISTINCT:
                case YQLParser.DO:
                case YQLParser.DROP:
                case YQLParser.EACH:
                case YQLParser.ELSE:
                case YQLParser.EMPTY:
                case YQLParser.EMPTY_ACTION:
                case YQLParser.ENCRYPTED:
                case YQLParser.END:
                case YQLParser.ENUM:
                case YQLParser.ERASE:
                case YQLParser.ERROR:
                case YQLParser.ESCAPE:
                case YQLParser.EVALUATE:
                case YQLParser.EXCEPT:
                case YQLParser.EXCLUDE:
                case YQLParser.EXCLUSION:
                case YQLParser.EXCLUSIVE:
                case YQLParser.EXISTS:
                case YQLParser.EXPLAIN:
                case YQLParser.EXPORT:
                case YQLParser.EXTERNAL:
                case YQLParser.FAIL:
                case YQLParser.FAMILY:
                case YQLParser.FILTER:
                case YQLParser.FIRST:
                case YQLParser.FLATTEN:
                case YQLParser.FLOW:
                case YQLParser.FOLLOWING:
                case YQLParser.FOR:
                case YQLParser.FOREIGN:
                case YQLParser.FROM:
                case YQLParser.FULL:
                case YQLParser.FUNCTION:
                case YQLParser.GLOB:
                case YQLParser.GRANT:
                case YQLParser.GROUP:
                case YQLParser.GROUPING:
                case YQLParser.GROUPS:
                case YQLParser.HASH:
                case YQLParser.HAVING:
                case YQLParser.HOP:
                case YQLParser.IF:
                case YQLParser.IGNORE:
                case YQLParser.ILIKE:
                case YQLParser.IMMEDIATE:
                case YQLParser.IMPORT:
                case YQLParser.IN:
                case YQLParser.INDEX:
                case YQLParser.INDEXED:
                case YQLParser.INHERITS:
                case YQLParser.INITIAL:
                case YQLParser.INITIALLY:
                case YQLParser.INNER:
                case YQLParser.INSERT:
                case YQLParser.INSTEAD:
                case YQLParser.INTERSECT:
                case YQLParser.INTO:
                case YQLParser.IS:
                case YQLParser.ISNULL:
                case YQLParser.JOIN:
                case YQLParser.JSON_EXISTS:
                case YQLParser.JSON_QUERY:
                case YQLParser.JSON_VALUE:
                case YQLParser.KEY:
                case YQLParser.LAST:
                case YQLParser.LEFT:
                case YQLParser.LEGACY:
                case YQLParser.LIKE:
                case YQLParser.LIMIT:
                case YQLParser.LIST:
                case YQLParser.LOCAL:
                case YQLParser.MANAGE:
                case YQLParser.MATCH:
                case YQLParser.MATCHES:
                case YQLParser.MATCH_RECOGNIZE:
                case YQLParser.MEASURES:
                case YQLParser.MICROSECONDS:
                case YQLParser.MILLISECONDS:
                case YQLParser.MODIFY:
                case YQLParser.NANOSECONDS:
                case YQLParser.NATURAL:
                case YQLParser.NEXT:
                case YQLParser.NO:
                case YQLParser.NOT:
                case YQLParser.NOTNULL:
                case YQLParser.NULL:
                case YQLParser.NULLS:
                case YQLParser.OBJECT:
                case YQLParser.OF:
                case YQLParser.OFFSET:
                case YQLParser.OMIT:
                case YQLParser.ON:
                case YQLParser.ONE:
                case YQLParser.ONLY:
                case YQLParser.OPTION:
                case YQLParser.OPTIONAL:
                case YQLParser.OR:
                case YQLParser.ORDER:
                case YQLParser.OTHERS:
                case YQLParser.OUTER:
                case YQLParser.OVER:
                case YQLParser.PARALLEL:
                case YQLParser.PARTITION:
                case YQLParser.PASSING:
                case YQLParser.PASSWORD:
                case YQLParser.PAST:
                case YQLParser.PATTERN:
                case YQLParser.PER:
                case YQLParser.PERMUTE:
                case YQLParser.PLAN:
                case YQLParser.POOL:
                case YQLParser.PRAGMA:
                case YQLParser.PRECEDING:
                case YQLParser.PRESORT:
                case YQLParser.PRIMARY:
                case YQLParser.PRIVILEGES:
                case YQLParser.PROCESS:
                case YQLParser.QUEUE:
                case YQLParser.RAISE:
                case YQLParser.RANGE:
                case YQLParser.REDUCE:
                case YQLParser.REFERENCES:
                case YQLParser.REGEXP:
                case YQLParser.REINDEX:
                case YQLParser.RELEASE:
                case YQLParser.REMOVE:
                case YQLParser.RENAME:
                case YQLParser.REPLACE:
                case YQLParser.REPLICATION:
                case YQLParser.RESET:
                case YQLParser.RESOURCE:
                case YQLParser.RESPECT:
                case YQLParser.RESTRICT:
                case YQLParser.RESULT:
                case YQLParser.RETURN:
                case YQLParser.RETURNING:
                case YQLParser.REVERT:
                case YQLParser.REVOKE:
                case YQLParser.RIGHT:
                case YQLParser.RLIKE:
                case YQLParser.ROLLBACK:
                case YQLParser.ROLLUP:
                case YQLParser.ROW:
                case YQLParser.ROWS:
                case YQLParser.SAMPLE:
                case YQLParser.SAVEPOINT:
                case YQLParser.SCHEMA:
                case YQLParser.SECONDS:
                case YQLParser.SEEK:
                case YQLParser.SELECT:
                case YQLParser.SEMI:
                case YQLParser.SET:
                case YQLParser.SETS:
                case YQLParser.SHOW:
                case YQLParser.TSKIP:
                case YQLParser.SOURCE:
                case YQLParser.STREAM:
                case YQLParser.STRUCT:
                case YQLParser.SUBQUERY:
                case YQLParser.SUBSET:
                case YQLParser.SYMBOLS:
                case YQLParser.SYMMETRIC:
                case YQLParser.SYNC:
                case YQLParser.SYSTEM:
                case YQLParser.TABLE:
                case YQLParser.TABLES:
                case YQLParser.TABLESAMPLE:
                case YQLParser.TABLESTORE:
                case YQLParser.TAGGED:
                case YQLParser.TEMP:
                case YQLParser.TEMPORARY:
                case YQLParser.THEN:
                case YQLParser.TIES:
                case YQLParser.TO:
                case YQLParser.TOPIC:
                case YQLParser.TRANSACTION:
                case YQLParser.TRIGGER:
                case YQLParser.TUPLE:
                case YQLParser.TYPE:
                case YQLParser.UNBOUNDED:
                case YQLParser.UNCONDITIONAL:
                case YQLParser.UNION:
                case YQLParser.UNIQUE:
                case YQLParser.UNKNOWN:
                case YQLParser.UNMATCHED:
                case YQLParser.UPDATE:
                case YQLParser.UPSERT:
                case YQLParser.USE:
                case YQLParser.USER:
                case YQLParser.USING:
                case YQLParser.VACUUM:
                case YQLParser.VALUES:
                case YQLParser.VARIANT:
                case YQLParser.VIEW:
                case YQLParser.VIRTUAL:
                case YQLParser.WHEN:
                case YQLParser.WHERE:
                case YQLParser.WINDOW:
                case YQLParser.WITH:
                case YQLParser.WITHOUT:
                case YQLParser.WRAPPER:
                case YQLParser.XOR:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 1269;
                    this.id_or_type();
                    }
                    break;
                case YQLParser.STRING_VALUE:
                    {
                    this.state = 1270;
                    this.match(YQLParser.STRING_VALUE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1273;
                this.match(YQLParser.LPAREN);
                this.state = 1274;
                this.select_stmt();
                this.state = 1275;
                this.match(YQLParser.RPAREN);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1277;
                this.value_constructor();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1278;
                this.bitcast_expr();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1279;
                this.list_literal();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1280;
                this.dict_literal();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1281;
                this.struct_literal();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cast_expr(): Cast_exprContext {
        let localContext = new Cast_exprContext(this.context, this.state);
        this.enterRule(localContext, 72, YQLParser.RULE_cast_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1284;
            this.match(YQLParser.CAST);
            this.state = 1285;
            this.match(YQLParser.LPAREN);
            this.state = 1286;
            this.expr();
            this.state = 1287;
            this.match(YQLParser.AS);
            this.state = 1288;
            this.type_name_or_bind();
            this.state = 1289;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bitcast_expr(): Bitcast_exprContext {
        let localContext = new Bitcast_exprContext(this.context, this.state);
        this.enterRule(localContext, 74, YQLParser.RULE_bitcast_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1291;
            this.match(YQLParser.BITCAST);
            this.state = 1292;
            this.match(YQLParser.LPAREN);
            this.state = 1293;
            this.expr();
            this.state = 1294;
            this.match(YQLParser.AS);
            this.state = 1295;
            this.type_name_simple();
            this.state = 1296;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exists_expr(): Exists_exprContext {
        let localContext = new Exists_exprContext(this.context, this.state);
        this.enterRule(localContext, 76, YQLParser.RULE_exists_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1298;
            this.match(YQLParser.EXISTS);
            this.state = 1299;
            this.match(YQLParser.LPAREN);
            this.state = 1302;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LPAREN:
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
                {
                this.state = 1300;
                this.select_stmt();
                }
                break;
            case YQLParser.VALUES:
                {
                this.state = 1301;
                this.values_stmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1304;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public case_expr(): Case_exprContext {
        let localContext = new Case_exprContext(this.context, this.state);
        this.enterRule(localContext, 78, YQLParser.RULE_case_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1306;
            this.match(YQLParser.CASE);
            this.state = 1308;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 63, this.context) ) {
            case 1:
                {
                this.state = 1307;
                this.expr();
                }
                break;
            }
            this.state = 1311;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1310;
                this.when_expr();
                }
                }
                this.state = 1313;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 312);
            this.state = 1317;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 116) {
                {
                this.state = 1315;
                this.match(YQLParser.ELSE);
                this.state = 1316;
                this.expr();
                }
            }

            this.state = 1319;
            this.match(YQLParser.END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lambda(): LambdaContext {
        let localContext = new LambdaContext(this.context, this.state);
        this.enterRule(localContext, 80, YQLParser.RULE_lambda);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1321;
            this.smart_parenthesis();
            this.state = 1333;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 40) {
                {
                this.state = 1322;
                this.match(YQLParser.ARROW);
                this.state = 1331;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.LPAREN:
                    {
                    this.state = 1323;
                    this.match(YQLParser.LPAREN);
                    this.state = 1324;
                    this.expr();
                    this.state = 1325;
                    this.match(YQLParser.RPAREN);
                    }
                    break;
                case YQLParser.LBRACE_CURLY:
                    {
                    this.state = 1327;
                    this.match(YQLParser.LBRACE_CURLY);
                    this.state = 1328;
                    this.lambda_body();
                    this.state = 1329;
                    this.match(YQLParser.RBRACE_CURLY);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_expr(): In_exprContext {
        let localContext = new In_exprContext(this.context, this.state);
        this.enterRule(localContext, 82, YQLParser.RULE_in_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1335;
            this.in_unary_subexpr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_api_expr(): Json_api_exprContext {
        let localContext = new Json_api_exprContext(this.context, this.state);
        this.enterRule(localContext, 84, YQLParser.RULE_json_api_expr);
        try {
            this.state = 1340;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.JSON_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1337;
                this.json_value();
                }
                break;
            case YQLParser.JSON_EXISTS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1338;
                this.json_exists();
                }
                break;
            case YQLParser.JSON_QUERY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1339;
                this.json_query();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonpath_spec(): Jsonpath_specContext {
        let localContext = new Jsonpath_specContext(this.context, this.state);
        this.enterRule(localContext, 86, YQLParser.RULE_jsonpath_spec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1342;
            this.match(YQLParser.STRING_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_variable_name(): Json_variable_nameContext {
        let localContext = new Json_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 88, YQLParser.RULE_json_variable_name);
        try {
            this.state = 1346;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1344;
                this.id_expr();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1345;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_variable(): Json_variableContext {
        let localContext = new Json_variableContext(this.context, this.state);
        this.enterRule(localContext, 90, YQLParser.RULE_json_variable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1348;
            this.expr();
            this.state = 1349;
            this.match(YQLParser.AS);
            this.state = 1350;
            this.json_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_variables(): Json_variablesContext {
        let localContext = new Json_variablesContext(this.context, this.state);
        this.enterRule(localContext, 92, YQLParser.RULE_json_variables);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1352;
            this.json_variable();
            this.state = 1357;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1353;
                this.match(YQLParser.COMMA);
                this.state = 1354;
                this.json_variable();
                }
                }
                this.state = 1359;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_common_args(): Json_common_argsContext {
        let localContext = new Json_common_argsContext(this.context, this.state);
        this.enterRule(localContext, 94, YQLParser.RULE_json_common_args);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1360;
            this.expr();
            this.state = 1361;
            this.match(YQLParser.COMMA);
            this.state = 1362;
            this.jsonpath_spec();
            this.state = 1365;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 218) {
                {
                this.state = 1363;
                this.match(YQLParser.PASSING);
                this.state = 1364;
                this.json_variables();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_case_handler(): Json_case_handlerContext {
        let localContext = new Json_case_handlerContext(this.context, this.state);
        this.enterRule(localContext, 96, YQLParser.RULE_json_case_handler);
        try {
            this.state = 1371;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ERROR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1367;
                this.match(YQLParser.ERROR);
                }
                break;
            case YQLParser.NULL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1368;
                this.match(YQLParser.NULL);
                }
                break;
            case YQLParser.DEFAULT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1369;
                this.match(YQLParser.DEFAULT);
                this.state = 1370;
                this.expr();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_value(): Json_valueContext {
        let localContext = new Json_valueContext(this.context, this.state);
        this.enterRule(localContext, 98, YQLParser.RULE_json_value);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1373;
            this.match(YQLParser.JSON_VALUE);
            this.state = 1374;
            this.match(YQLParser.LPAREN);
            this.state = 1375;
            this.json_common_args();
            this.state = 1378;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 251) {
                {
                this.state = 1376;
                this.match(YQLParser.RETURNING);
                this.state = 1377;
                this.type_name_simple();
                }
            }

            this.state = 1386;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 100 || _la === 123 || _la === 200) {
                {
                {
                this.state = 1380;
                this.json_case_handler();
                this.state = 1381;
                this.match(YQLParser.ON);
                this.state = 1382;
                _la = this.tokenStream.LA(1);
                if(!(_la === 117 || _la === 123)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                }
                this.state = 1388;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1389;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_exists_handler(): Json_exists_handlerContext {
        let localContext = new Json_exists_handlerContext(this.context, this.state);
        this.enterRule(localContext, 100, YQLParser.RULE_json_exists_handler);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1391;
            _la = this.tokenStream.LA(1);
            if(!(_la === 123 || _la === 135 || _la === 293 || _la === 300)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1392;
            this.match(YQLParser.ON);
            this.state = 1393;
            this.match(YQLParser.ERROR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_exists(): Json_existsContext {
        let localContext = new Json_existsContext(this.context, this.state);
        this.enterRule(localContext, 102, YQLParser.RULE_json_exists);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1395;
            this.match(YQLParser.JSON_EXISTS);
            this.state = 1396;
            this.match(YQLParser.LPAREN);
            this.state = 1397;
            this.json_common_args();
            this.state = 1399;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123 || _la === 135 || _la === 293 || _la === 300) {
                {
                this.state = 1398;
                this.json_exists_handler();
                }
            }

            this.state = 1401;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_query_wrapper(): Json_query_wrapperContext {
        let localContext = new Json_query_wrapperContext(this.context, this.state);
        this.enterRule(localContext, 104, YQLParser.RULE_json_query_wrapper);
        let _la: number;
        try {
            this.state = 1414;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1403;
                this.match(YQLParser.WITHOUT);
                this.state = 1405;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53) {
                    {
                    this.state = 1404;
                    this.match(YQLParser.ARRAY);
                    }
                }

                }
                break;
            case YQLParser.WITH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1407;
                this.match(YQLParser.WITH);
                this.state = 1409;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83 || _la === 297) {
                    {
                    this.state = 1408;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 83 || _la === 297)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1412;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53) {
                    {
                    this.state = 1411;
                    this.match(YQLParser.ARRAY);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_query_handler(): Json_query_handlerContext {
        let localContext = new Json_query_handlerContext(this.context, this.state);
        this.enterRule(localContext, 106, YQLParser.RULE_json_query_handler);
        try {
            this.state = 1422;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 80, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1416;
                this.match(YQLParser.ERROR);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1417;
                this.match(YQLParser.NULL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1418;
                this.match(YQLParser.EMPTY);
                this.state = 1419;
                this.match(YQLParser.ARRAY);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1420;
                this.match(YQLParser.EMPTY);
                this.state = 1421;
                this.match(YQLParser.OBJECT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_query(): Json_queryContext {
        let localContext = new Json_queryContext(this.context, this.state);
        this.enterRule(localContext, 108, YQLParser.RULE_json_query);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1424;
            this.match(YQLParser.JSON_QUERY);
            this.state = 1425;
            this.match(YQLParser.LPAREN);
            this.state = 1426;
            this.json_common_args();
            this.state = 1430;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315 || _la === 316) {
                {
                this.state = 1427;
                this.json_query_wrapper();
                this.state = 1428;
                this.match(YQLParser.WRAPPER);
                }
            }

            this.state = 1436;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 82, this.context) ) {
            case 1:
                {
                this.state = 1432;
                this.json_query_handler();
                this.state = 1433;
                this.match(YQLParser.ON);
                this.state = 1434;
                this.match(YQLParser.EMPTY);
                }
                break;
            }
            this.state = 1442;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 117 || _la === 123 || _la === 200) {
                {
                this.state = 1438;
                this.json_query_handler();
                this.state = 1439;
                this.match(YQLParser.ON);
                this.state = 1440;
                this.match(YQLParser.ERROR);
                }
            }

            this.state = 1444;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public smart_parenthesis(): Smart_parenthesisContext {
        let localContext = new Smart_parenthesisContext(this.context, this.state);
        this.enterRule(localContext, 110, YQLParser.RULE_smart_parenthesis);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1446;
            this.match(YQLParser.LPAREN);
            this.state = 1448;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 14)) & ~0x1F) === 0 && ((1 << (_la - 14)) & 4030992413) !== 0) || ((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & 4294901759) !== 0) || ((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & 4294967231) !== 0) || ((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967279) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 16777215) !== 0)) {
                {
                this.state = 1447;
                this.named_expr_list();
                }
            }

            this.state = 1451;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1450;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1453;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr_list(): Expr_listContext {
        let localContext = new Expr_listContext(this.context, this.state);
        this.enterRule(localContext, 112, YQLParser.RULE_expr_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1455;
            this.expr();
            this.state = 1460;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 86, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1456;
                    this.match(YQLParser.COMMA);
                    this.state = 1457;
                    this.expr();
                    }
                    }
                }
                this.state = 1462;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 86, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pure_column_list(): Pure_column_listContext {
        let localContext = new Pure_column_listContext(this.context, this.state);
        this.enterRule(localContext, 114, YQLParser.RULE_pure_column_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1463;
            this.match(YQLParser.LPAREN);
            this.state = 1464;
            this.an_id();
            this.state = 1469;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1465;
                this.match(YQLParser.COMMA);
                this.state = 1466;
                this.an_id();
                }
                }
                this.state = 1471;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1472;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pure_column_or_named(): Pure_column_or_namedContext {
        let localContext = new Pure_column_or_namedContext(this.context, this.state);
        this.enterRule(localContext, 116, YQLParser.RULE_pure_column_or_named);
        try {
            this.state = 1476;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1474;
                this.bind_parameter();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1475;
                this.an_id();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pure_column_or_named_list(): Pure_column_or_named_listContext {
        let localContext = new Pure_column_or_named_listContext(this.context, this.state);
        this.enterRule(localContext, 118, YQLParser.RULE_pure_column_or_named_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1478;
            this.match(YQLParser.LPAREN);
            this.state = 1479;
            this.pure_column_or_named();
            this.state = 1484;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1480;
                this.match(YQLParser.COMMA);
                this.state = 1481;
                this.pure_column_or_named();
                }
                }
                this.state = 1486;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1487;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_name(): Column_nameContext {
        let localContext = new Column_nameContext(this.context, this.state);
        this.enterRule(localContext, 120, YQLParser.RULE_column_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1489;
            this.opt_id_prefix();
            this.state = 1490;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public without_column_name(): Without_column_nameContext {
        let localContext = new Without_column_nameContext(this.context, this.state);
        this.enterRule(localContext, 122, YQLParser.RULE_without_column_name);
        try {
            this.state = 1497;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 90, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1492;
                this.an_id();
                this.state = 1493;
                this.match(YQLParser.DOT);
                this.state = 1494;
                this.an_id();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1496;
                this.an_id_without();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_list(): Column_listContext {
        let localContext = new Column_listContext(this.context, this.state);
        this.enterRule(localContext, 124, YQLParser.RULE_column_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1499;
            this.column_name();
            this.state = 1504;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 91, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1500;
                    this.match(YQLParser.COMMA);
                    this.state = 1501;
                    this.column_name();
                    }
                    }
                }
                this.state = 1506;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 91, this.context);
            }
            this.state = 1508;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1507;
                this.match(YQLParser.COMMA);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public without_column_list(): Without_column_listContext {
        let localContext = new Without_column_listContext(this.context, this.state);
        this.enterRule(localContext, 126, YQLParser.RULE_without_column_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1510;
            this.without_column_name();
            this.state = 1515;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 93, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1511;
                    this.match(YQLParser.COMMA);
                    this.state = 1512;
                    this.without_column_name();
                    }
                    }
                }
                this.state = 1517;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 93, this.context);
            }
            this.state = 1519;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1518;
                this.match(YQLParser.COMMA);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_expr(): Named_exprContext {
        let localContext = new Named_exprContext(this.context, this.state);
        this.enterRule(localContext, 128, YQLParser.RULE_named_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1521;
            this.expr();
            this.state = 1524;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 1522;
                this.match(YQLParser.AS);
                this.state = 1523;
                this.an_id_or_type();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_expr_list(): Named_expr_listContext {
        let localContext = new Named_expr_listContext(this.context, this.state);
        this.enterRule(localContext, 130, YQLParser.RULE_named_expr_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1526;
            this.named_expr();
            this.state = 1531;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 96, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1527;
                    this.match(YQLParser.COMMA);
                    this.state = 1528;
                    this.named_expr();
                    }
                    }
                }
                this.state = 1533;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 96, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public invoke_expr(): Invoke_exprContext {
        let localContext = new Invoke_exprContext(this.context, this.state);
        this.enterRule(localContext, 132, YQLParser.RULE_invoke_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1534;
            this.match(YQLParser.LPAREN);
            this.state = 1541;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.STRUCT_OPEN:
            case YQLParser.PLUS:
            case YQLParser.MINUS:
            case YQLParser.TILDA:
            case YQLParser.LPAREN:
            case YQLParser.DOLLAR:
            case YQLParser.LBRACE_CURLY:
            case YQLParser.LBRACE_SQUARE:
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FALSE:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TRUE:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
            case YQLParser.REAL:
            case YQLParser.BLOB:
                {
                this.state = 1535;
                this.opt_set_quantifier();
                this.state = 1536;
                this.named_expr_list();
                this.state = 1538;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 1537;
                    this.match(YQLParser.COMMA);
                    }
                }

                }
                break;
            case YQLParser.ASTERISK:
                {
                this.state = 1540;
                this.match(YQLParser.ASTERISK);
                }
                break;
            case YQLParser.RPAREN:
                break;
            default:
                break;
            }
            this.state = 1543;
            this.match(YQLParser.RPAREN);
            this.state = 1544;
            this.invoke_expr_tail();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public invoke_expr_tail(): Invoke_expr_tailContext {
        let localContext = new Invoke_expr_tailContext(this.context, this.state);
        this.enterRule(localContext, 134, YQLParser.RULE_invoke_expr_tail);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1548;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 99, this.context) ) {
            case 1:
                {
                this.state = 1546;
                this.null_treatment();
                }
                break;
            case 2:
                {
                this.state = 1547;
                this.filter_clause();
                }
                break;
            }
            this.state = 1552;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 215) {
                {
                this.state = 1550;
                this.match(YQLParser.OVER);
                this.state = 1551;
                this.window_name_or_specification();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public using_call_expr(): Using_call_exprContext {
        let localContext = new Using_call_exprContext(this.context, this.state);
        this.enterRule(localContext, 136, YQLParser.RULE_using_call_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1562;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 101, this.context) ) {
            case 1:
                {
                this.state = 1554;
                this.an_id_or_type();
                this.state = 1555;
                this.match(YQLParser.NAMESPACE);
                this.state = 1556;
                this.an_id_or_type();
                }
                break;
            case 2:
                {
                this.state = 1558;
                this.an_id_expr();
                }
                break;
            case 3:
                {
                this.state = 1559;
                this.bind_parameter();
                }
                break;
            case 4:
                {
                this.state = 1560;
                this.match(YQLParser.EXTERNAL);
                this.state = 1561;
                this.match(YQLParser.FUNCTION);
                }
                break;
            }
            this.state = 1564;
            this.invoke_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_expr(): Key_exprContext {
        let localContext = new Key_exprContext(this.context, this.state);
        this.enterRule(localContext, 138, YQLParser.RULE_key_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1566;
            this.match(YQLParser.LBRACE_SQUARE);
            this.state = 1567;
            this.expr();
            this.state = 1568;
            this.match(YQLParser.RBRACE_SQUARE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public when_expr(): When_exprContext {
        let localContext = new When_exprContext(this.context, this.state);
        this.enterRule(localContext, 140, YQLParser.RULE_when_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1570;
            this.match(YQLParser.WHEN);
            this.state = 1571;
            this.expr();
            this.state = 1572;
            this.match(YQLParser.THEN);
            this.state = 1573;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literal_value(): Literal_valueContext {
        let localContext = new Literal_valueContext(this.context, this.state);
        this.enterRule(localContext, 142, YQLParser.RULE_literal_value);
        try {
            this.state = 1585;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1575;
                this.integer();
                }
                break;
            case YQLParser.REAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1576;
                this.real();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1577;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.BLOB:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1578;
                this.match(YQLParser.BLOB);
                }
                break;
            case YQLParser.NULL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1579;
                this.match(YQLParser.NULL);
                }
                break;
            case YQLParser.CURRENT_TIME:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1580;
                this.match(YQLParser.CURRENT_TIME);
                }
                break;
            case YQLParser.CURRENT_DATE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1581;
                this.match(YQLParser.CURRENT_DATE);
                }
                break;
            case YQLParser.CURRENT_TIMESTAMP:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1582;
                this.match(YQLParser.CURRENT_TIMESTAMP);
                }
                break;
            case YQLParser.FALSE:
            case YQLParser.TRUE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1583;
                this.bool_value();
                }
                break;
            case YQLParser.EMPTY_ACTION:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1584;
                this.match(YQLParser.EMPTY_ACTION);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bind_parameter(): Bind_parameterContext {
        let localContext = new Bind_parameterContext(this.context, this.state);
        this.enterRule(localContext, 144, YQLParser.RULE_bind_parameter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1587;
            this.match(YQLParser.DOLLAR);
            this.state = 1591;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                {
                this.state = 1588;
                this.an_id_or_type();
                }
                break;
            case YQLParser.TRUE:
                {
                this.state = 1589;
                this.match(YQLParser.TRUE);
                }
                break;
            case YQLParser.FALSE:
                {
                this.state = 1590;
                this.match(YQLParser.FALSE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_bind_parameter(): Opt_bind_parameterContext {
        let localContext = new Opt_bind_parameterContext(this.context, this.state);
        this.enterRule(localContext, 146, YQLParser.RULE_opt_bind_parameter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1593;
            this.bind_parameter();
            this.state = 1595;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 28) {
                {
                this.state = 1594;
                this.match(YQLParser.QUESTION);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bind_parameter_list(): Bind_parameter_listContext {
        let localContext = new Bind_parameter_listContext(this.context, this.state);
        this.enterRule(localContext, 148, YQLParser.RULE_bind_parameter_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1597;
            this.bind_parameter();
            this.state = 1602;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1598;
                this.match(YQLParser.COMMA);
                this.state = 1599;
                this.bind_parameter();
                }
                }
                this.state = 1604;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_bind_parameter(): Named_bind_parameterContext {
        let localContext = new Named_bind_parameterContext(this.context, this.state);
        this.enterRule(localContext, 150, YQLParser.RULE_named_bind_parameter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1605;
            this.bind_parameter();
            this.state = 1608;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 1606;
                this.match(YQLParser.AS);
                this.state = 1607;
                this.bind_parameter();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_bind_parameter_list(): Named_bind_parameter_listContext {
        let localContext = new Named_bind_parameter_listContext(this.context, this.state);
        this.enterRule(localContext, 152, YQLParser.RULE_named_bind_parameter_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1610;
            this.named_bind_parameter();
            this.state = 1615;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1611;
                this.match(YQLParser.COMMA);
                this.state = 1612;
                this.named_bind_parameter();
                }
                }
                this.state = 1617;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signed_number(): Signed_numberContext {
        let localContext = new Signed_numberContext(this.context, this.state);
        this.enterRule(localContext, 154, YQLParser.RULE_signed_number);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1619;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 16 || _la === 17) {
                {
                this.state = 1618;
                _la = this.tokenStream.LA(1);
                if(!(_la === 16 || _la === 17)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1623;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
                {
                this.state = 1621;
                this.integer();
                }
                break;
            case YQLParser.REAL:
                {
                this.state = 1622;
                this.real();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_simple(): Type_name_simpleContext {
        let localContext = new Type_name_simpleContext(this.context, this.state);
        this.enterRule(localContext, 156, YQLParser.RULE_type_name_simple);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1625;
            this.an_id_pure();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public integer_or_bind(): Integer_or_bindContext {
        let localContext = new Integer_or_bindContext(this.context, this.state);
        this.enterRule(localContext, 158, YQLParser.RULE_integer_or_bind);
        try {
            this.state = 1629;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1627;
                this.integer();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1628;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_tag(): Type_name_tagContext {
        let localContext = new Type_name_tagContext(this.context, this.state);
        this.enterRule(localContext, 160, YQLParser.RULE_type_name_tag);
        try {
            this.state = 1634;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1631;
                this.id();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1632;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1633;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public struct_arg(): Struct_argContext {
        let localContext = new Struct_argContext(this.context, this.state);
        this.enterRule(localContext, 162, YQLParser.RULE_struct_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1636;
            this.type_name_tag();
            this.state = 1637;
            this.match(YQLParser.COLON);
            this.state = 1638;
            this.type_name_or_bind();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public struct_arg_positional(): Struct_arg_positionalContext {
        let localContext = new Struct_arg_positionalContext(this.context, this.state);
        this.enterRule(localContext, 164, YQLParser.RULE_struct_arg_positional);
        let _la: number;
        try {
            this.state = 1652;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 114, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1640;
                this.type_name_tag();
                this.state = 1641;
                this.type_name_or_bind();
                this.state = 1646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 200) {
                    {
                    this.state = 1643;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 198) {
                        {
                        this.state = 1642;
                        this.match(YQLParser.NOT);
                        }
                    }

                    this.state = 1645;
                    this.match(YQLParser.NULL);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1648;
                this.type_name_or_bind();
                this.state = 1649;
                this.match(YQLParser.AS);
                this.state = 1650;
                this.type_name_tag();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variant_arg(): Variant_argContext {
        let localContext = new Variant_argContext(this.context, this.state);
        this.enterRule(localContext, 166, YQLParser.RULE_variant_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1657;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 115, this.context) ) {
            case 1:
                {
                this.state = 1654;
                this.type_name_tag();
                this.state = 1655;
                this.match(YQLParser.COLON);
                }
                break;
            }
            this.state = 1659;
            this.type_name_or_bind();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callable_arg(): Callable_argContext {
        let localContext = new Callable_argContext(this.context, this.state);
        this.enterRule(localContext, 168, YQLParser.RULE_callable_arg);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1661;
            this.variant_arg();
            this.state = 1665;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 1662;
                this.match(YQLParser.LBRACE_CURLY);
                this.state = 1663;
                this.match(YQLParser.AUTOMAP);
                this.state = 1664;
                this.match(YQLParser.RBRACE_CURLY);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callable_arg_list(): Callable_arg_listContext {
        let localContext = new Callable_arg_listContext(this.context, this.state);
        this.enterRule(localContext, 170, YQLParser.RULE_callable_arg_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1667;
            this.callable_arg();
            this.state = 1672;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 117, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1668;
                    this.match(YQLParser.COMMA);
                    this.state = 1669;
                    this.callable_arg();
                    }
                    }
                }
                this.state = 1674;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 117, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_decimal(): Type_name_decimalContext {
        let localContext = new Type_name_decimalContext(this.context, this.state);
        this.enterRule(localContext, 172, YQLParser.RULE_type_name_decimal);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1675;
            this.match(YQLParser.DECIMAL);
            this.state = 1676;
            this.match(YQLParser.LPAREN);
            this.state = 1677;
            this.integer_or_bind();
            this.state = 1678;
            this.match(YQLParser.COMMA);
            this.state = 1679;
            this.integer_or_bind();
            this.state = 1680;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_optional(): Type_name_optionalContext {
        let localContext = new Type_name_optionalContext(this.context, this.state);
        this.enterRule(localContext, 174, YQLParser.RULE_type_name_optional);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1682;
            this.match(YQLParser.OPTIONAL);
            this.state = 1683;
            this.match(YQLParser.LESS);
            this.state = 1684;
            this.type_name_or_bind();
            this.state = 1685;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_tuple(): Type_name_tupleContext {
        let localContext = new Type_name_tupleContext(this.context, this.state);
        this.enterRule(localContext, 176, YQLParser.RULE_type_name_tuple);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1687;
            this.match(YQLParser.TUPLE);
            this.state = 1704;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LESS:
                {
                this.state = 1688;
                this.match(YQLParser.LESS);
                this.state = 1700;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 32 || _la === 71 || _la === 98 || _la === 108 || _la === 121 || _la === 140 || _la === 184 || _la === 210 || ((((_la - 246)) & ~0x1F) === 0 && ((1 << (_la - 246)) & 203423745) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & 33555457) !== 0) || ((((_la - 319)) & ~0x1F) === 0 && ((1 << (_la - 319)) & 7) !== 0)) {
                    {
                    this.state = 1689;
                    this.type_name_or_bind();
                    this.state = 1694;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 118, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 1690;
                            this.match(YQLParser.COMMA);
                            this.state = 1691;
                            this.type_name_or_bind();
                            }
                            }
                        }
                        this.state = 1696;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 118, this.context);
                    }
                    this.state = 1698;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 25) {
                        {
                        this.state = 1697;
                        this.match(YQLParser.COMMA);
                        }
                    }

                    }
                }

                this.state = 1702;
                this.match(YQLParser.GREATER);
                }
                break;
            case YQLParser.NOT_EQUALS2:
                {
                this.state = 1703;
                this.match(YQLParser.NOT_EQUALS2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_struct(): Type_name_structContext {
        let localContext = new Type_name_structContext(this.context, this.state);
        this.enterRule(localContext, 178, YQLParser.RULE_type_name_struct);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1706;
            this.match(YQLParser.STRUCT);
            this.state = 1723;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LESS:
                {
                this.state = 1707;
                this.match(YQLParser.LESS);
                this.state = 1719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3221223425) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967167) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4261408767) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4293914495) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4278190079) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294705151) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4290510847) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4026398719) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4292870047) !== 0) || _la === 320 || _la === 321) {
                    {
                    this.state = 1708;
                    this.struct_arg();
                    this.state = 1713;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 122, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 1709;
                            this.match(YQLParser.COMMA);
                            this.state = 1710;
                            this.struct_arg();
                            }
                            }
                        }
                        this.state = 1715;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 122, this.context);
                    }
                    this.state = 1717;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 25) {
                        {
                        this.state = 1716;
                        this.match(YQLParser.COMMA);
                        }
                    }

                    }
                }

                this.state = 1721;
                this.match(YQLParser.GREATER);
                }
                break;
            case YQLParser.NOT_EQUALS2:
                {
                this.state = 1722;
                this.match(YQLParser.NOT_EQUALS2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_variant(): Type_name_variantContext {
        let localContext = new Type_name_variantContext(this.context, this.state);
        this.enterRule(localContext, 180, YQLParser.RULE_type_name_variant);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1725;
            this.match(YQLParser.VARIANT);
            this.state = 1726;
            this.match(YQLParser.LESS);
            this.state = 1727;
            this.variant_arg();
            this.state = 1732;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 126, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1728;
                    this.match(YQLParser.COMMA);
                    this.state = 1729;
                    this.variant_arg();
                    }
                    }
                }
                this.state = 1734;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 126, this.context);
            }
            this.state = 1736;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1735;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1738;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_list(): Type_name_listContext {
        let localContext = new Type_name_listContext(this.context, this.state);
        this.enterRule(localContext, 182, YQLParser.RULE_type_name_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1740;
            this.match(YQLParser.LIST);
            this.state = 1741;
            this.match(YQLParser.LESS);
            this.state = 1742;
            this.type_name_or_bind();
            this.state = 1743;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_stream(): Type_name_streamContext {
        let localContext = new Type_name_streamContext(this.context, this.state);
        this.enterRule(localContext, 184, YQLParser.RULE_type_name_stream);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1745;
            this.match(YQLParser.STREAM);
            this.state = 1746;
            this.match(YQLParser.LESS);
            this.state = 1747;
            this.type_name_or_bind();
            this.state = 1748;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_flow(): Type_name_flowContext {
        let localContext = new Type_name_flowContext(this.context, this.state);
        this.enterRule(localContext, 186, YQLParser.RULE_type_name_flow);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1750;
            this.match(YQLParser.FLOW);
            this.state = 1751;
            this.match(YQLParser.LESS);
            this.state = 1752;
            this.type_name_or_bind();
            this.state = 1753;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_dict(): Type_name_dictContext {
        let localContext = new Type_name_dictContext(this.context, this.state);
        this.enterRule(localContext, 188, YQLParser.RULE_type_name_dict);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1755;
            this.match(YQLParser.DICT);
            this.state = 1756;
            this.match(YQLParser.LESS);
            this.state = 1757;
            this.type_name_or_bind();
            this.state = 1758;
            this.match(YQLParser.COMMA);
            this.state = 1759;
            this.type_name_or_bind();
            this.state = 1760;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_set(): Type_name_setContext {
        let localContext = new Type_name_setContext(this.context, this.state);
        this.enterRule(localContext, 190, YQLParser.RULE_type_name_set);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1762;
            this.match(YQLParser.SET);
            this.state = 1763;
            this.match(YQLParser.LESS);
            this.state = 1764;
            this.type_name_or_bind();
            this.state = 1765;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_enum(): Type_name_enumContext {
        let localContext = new Type_name_enumContext(this.context, this.state);
        this.enterRule(localContext, 192, YQLParser.RULE_type_name_enum);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1767;
            this.match(YQLParser.ENUM);
            this.state = 1768;
            this.match(YQLParser.LESS);
            this.state = 1769;
            this.type_name_tag();
            this.state = 1774;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 128, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1770;
                    this.match(YQLParser.COMMA);
                    this.state = 1771;
                    this.type_name_tag();
                    }
                    }
                }
                this.state = 1776;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 128, this.context);
            }
            this.state = 1778;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1777;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1780;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_resource(): Type_name_resourceContext {
        let localContext = new Type_name_resourceContext(this.context, this.state);
        this.enterRule(localContext, 194, YQLParser.RULE_type_name_resource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1782;
            this.match(YQLParser.RESOURCE);
            this.state = 1783;
            this.match(YQLParser.LESS);
            this.state = 1784;
            this.type_name_tag();
            this.state = 1785;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_tagged(): Type_name_taggedContext {
        let localContext = new Type_name_taggedContext(this.context, this.state);
        this.enterRule(localContext, 196, YQLParser.RULE_type_name_tagged);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1787;
            this.match(YQLParser.TAGGED);
            this.state = 1788;
            this.match(YQLParser.LESS);
            this.state = 1789;
            this.type_name_or_bind();
            this.state = 1790;
            this.match(YQLParser.COMMA);
            this.state = 1791;
            this.type_name_tag();
            this.state = 1792;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_callable(): Type_name_callableContext {
        let localContext = new Type_name_callableContext(this.context, this.state);
        this.enterRule(localContext, 198, YQLParser.RULE_type_name_callable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1794;
            this.match(YQLParser.CALLABLE);
            this.state = 1795;
            this.match(YQLParser.LESS);
            this.state = 1796;
            this.match(YQLParser.LPAREN);
            this.state = 1798;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3221223425) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4293918591) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294705151) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || _la === 320 || _la === 321) {
                {
                this.state = 1797;
                this.callable_arg_list();
                }
            }

            this.state = 1801;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 1800;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 1807;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 1803;
                this.match(YQLParser.LBRACE_SQUARE);
                this.state = 1804;
                this.callable_arg_list();
                this.state = 1805;
                this.match(YQLParser.RBRACE_SQUARE);
                }
            }

            this.state = 1809;
            this.match(YQLParser.RPAREN);
            this.state = 1810;
            this.match(YQLParser.ARROW);
            this.state = 1811;
            this.type_name_or_bind();
            this.state = 1812;
            this.match(YQLParser.GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_composite(): Type_name_compositeContext {
        let localContext = new Type_name_compositeContext(this.context, this.state);
        this.enterRule(localContext, 200, YQLParser.RULE_type_name_composite);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1827;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.OPTIONAL:
                {
                this.state = 1814;
                this.type_name_optional();
                }
                break;
            case YQLParser.TUPLE:
                {
                this.state = 1815;
                this.type_name_tuple();
                }
                break;
            case YQLParser.STRUCT:
                {
                this.state = 1816;
                this.type_name_struct();
                }
                break;
            case YQLParser.VARIANT:
                {
                this.state = 1817;
                this.type_name_variant();
                }
                break;
            case YQLParser.LIST:
                {
                this.state = 1818;
                this.type_name_list();
                }
                break;
            case YQLParser.STREAM:
                {
                this.state = 1819;
                this.type_name_stream();
                }
                break;
            case YQLParser.FLOW:
                {
                this.state = 1820;
                this.type_name_flow();
                }
                break;
            case YQLParser.DICT:
                {
                this.state = 1821;
                this.type_name_dict();
                }
                break;
            case YQLParser.SET:
                {
                this.state = 1822;
                this.type_name_set();
                }
                break;
            case YQLParser.ENUM:
                {
                this.state = 1823;
                this.type_name_enum();
                }
                break;
            case YQLParser.RESOURCE:
                {
                this.state = 1824;
                this.type_name_resource();
                }
                break;
            case YQLParser.TAGGED:
                {
                this.state = 1825;
                this.type_name_tagged();
                }
                break;
            case YQLParser.CALLABLE:
                {
                this.state = 1826;
                this.type_name_callable();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1832;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 28) {
                {
                {
                this.state = 1829;
                this.match(YQLParser.QUESTION);
                }
                }
                this.state = 1834;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name(): Type_nameContext {
        let localContext = new Type_nameContext(this.context, this.state);
        this.enterRule(localContext, 202, YQLParser.RULE_type_name);
        let _la: number;
        try {
            this.state = 1846;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.CALLABLE:
            case YQLParser.DICT:
            case YQLParser.ENUM:
            case YQLParser.FLOW:
            case YQLParser.LIST:
            case YQLParser.OPTIONAL:
            case YQLParser.RESOURCE:
            case YQLParser.SET:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.TAGGED:
            case YQLParser.TUPLE:
            case YQLParser.VARIANT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1835;
                this.type_name_composite();
                }
                break;
            case YQLParser.DECIMAL:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1838;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.DECIMAL:
                    {
                    this.state = 1836;
                    this.type_name_decimal();
                    }
                    break;
                case YQLParser.STRING_VALUE:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 1837;
                    this.type_name_simple();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1843;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 28) {
                    {
                    {
                    this.state = 1840;
                    this.match(YQLParser.QUESTION);
                    }
                    }
                    this.state = 1845;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        let localContext = new Type_name_or_bindContext(this.context, this.state);
        this.enterRule(localContext, 204, YQLParser.RULE_type_name_or_bind);
        try {
            this.state = 1850;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.CALLABLE:
            case YQLParser.DECIMAL:
            case YQLParser.DICT:
            case YQLParser.ENUM:
            case YQLParser.FLOW:
            case YQLParser.LIST:
            case YQLParser.OPTIONAL:
            case YQLParser.RESOURCE:
            case YQLParser.SET:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.TAGGED:
            case YQLParser.TUPLE:
            case YQLParser.VARIANT:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1848;
                this.type_name();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1849;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public value_constructor_literal(): Value_constructor_literalContext {
        let localContext = new Value_constructor_literalContext(this.context, this.state);
        this.enterRule(localContext, 206, YQLParser.RULE_value_constructor_literal);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1852;
            this.match(YQLParser.STRING_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public value_constructor(): Value_constructorContext {
        let localContext = new Value_constructorContext(this.context, this.state);
        this.enterRule(localContext, 208, YQLParser.RULE_value_constructor);
        try {
            this.state = 1877;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.VARIANT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1854;
                this.match(YQLParser.VARIANT);
                this.state = 1855;
                this.match(YQLParser.LPAREN);
                this.state = 1856;
                this.expr();
                this.state = 1857;
                this.match(YQLParser.COMMA);
                this.state = 1858;
                this.expr();
                this.state = 1859;
                this.match(YQLParser.COMMA);
                this.state = 1860;
                this.expr();
                this.state = 1861;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.ENUM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1863;
                this.match(YQLParser.ENUM);
                this.state = 1864;
                this.match(YQLParser.LPAREN);
                this.state = 1865;
                this.expr();
                this.state = 1866;
                this.match(YQLParser.COMMA);
                this.state = 1867;
                this.expr();
                this.state = 1868;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.CALLABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1870;
                this.match(YQLParser.CALLABLE);
                this.state = 1871;
                this.match(YQLParser.LPAREN);
                this.state = 1872;
                this.expr();
                this.state = 1873;
                this.match(YQLParser.COMMA);
                this.state = 1874;
                this.expr();
                this.state = 1875;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declare_stmt(): Declare_stmtContext {
        let localContext = new Declare_stmtContext(this.context, this.state);
        this.enterRule(localContext, 210, YQLParser.RULE_declare_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1879;
            this.match(YQLParser.DECLARE);
            this.state = 1880;
            this.bind_parameter();
            this.state = 1881;
            this.match(YQLParser.AS);
            this.state = 1882;
            this.type_name();
            this.state = 1885;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1) {
                {
                this.state = 1883;
                this.match(YQLParser.EQUALS);
                this.state = 1884;
                this.literal_value();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public module_path(): Module_pathContext {
        let localContext = new Module_pathContext(this.context, this.state);
        this.enterRule(localContext, 212, YQLParser.RULE_module_path);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1888;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 24) {
                {
                this.state = 1887;
                this.match(YQLParser.DOT);
                }
            }

            this.state = 1890;
            this.an_id();
            this.state = 1895;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 24) {
                {
                {
                this.state = 1891;
                this.match(YQLParser.DOT);
                this.state = 1892;
                this.an_id();
                }
                }
                this.state = 1897;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public import_stmt(): Import_stmtContext {
        let localContext = new Import_stmtContext(this.context, this.state);
        this.enterRule(localContext, 214, YQLParser.RULE_import_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1898;
            this.match(YQLParser.IMPORT);
            this.state = 1899;
            this.module_path();
            this.state = 1900;
            this.match(YQLParser.SYMBOLS);
            this.state = 1901;
            this.named_bind_parameter_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public export_stmt(): Export_stmtContext {
        let localContext = new Export_stmtContext(this.context, this.state);
        this.enterRule(localContext, 216, YQLParser.RULE_export_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1903;
            this.match(YQLParser.EXPORT);
            this.state = 1904;
            this.bind_parameter_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public call_action(): Call_actionContext {
        let localContext = new Call_actionContext(this.context, this.state);
        this.enterRule(localContext, 218, YQLParser.RULE_call_action);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1908;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
                {
                this.state = 1906;
                this.bind_parameter();
                }
                break;
            case YQLParser.EMPTY_ACTION:
                {
                this.state = 1907;
                this.match(YQLParser.EMPTY_ACTION);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1910;
            this.match(YQLParser.LPAREN);
            this.state = 1912;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 14)) & ~0x1F) === 0 && ((1 << (_la - 14)) & 4030992413) !== 0) || ((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & 4294901759) !== 0) || ((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & 4294967231) !== 0) || ((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967279) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 16777215) !== 0)) {
                {
                this.state = 1911;
                this.expr_list();
                }
            }

            this.state = 1914;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inline_action(): Inline_actionContext {
        let localContext = new Inline_actionContext(this.context, this.state);
        this.enterRule(localContext, 220, YQLParser.RULE_inline_action);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1916;
            this.match(YQLParser.BEGIN);
            this.state = 1917;
            this.define_action_or_subquery_body();
            this.state = 1918;
            this.match(YQLParser.END);
            this.state = 1919;
            this.match(YQLParser.DO);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public do_stmt(): Do_stmtContext {
        let localContext = new Do_stmtContext(this.context, this.state);
        this.enterRule(localContext, 222, YQLParser.RULE_do_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1921;
            this.match(YQLParser.DO);
            this.state = 1924;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
            case YQLParser.EMPTY_ACTION:
                {
                this.state = 1922;
                this.call_action();
                }
                break;
            case YQLParser.BEGIN:
                {
                this.state = 1923;
                this.inline_action();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pragma_stmt(): Pragma_stmtContext {
        let localContext = new Pragma_stmtContext(this.context, this.state);
        this.enterRule(localContext, 224, YQLParser.RULE_pragma_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1926;
            this.match(YQLParser.PRAGMA);
            this.state = 1927;
            this.opt_id_prefix_or_type();
            this.state = 1928;
            this.an_id();
            this.state = 1942;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.EQUALS:
                {
                this.state = 1929;
                this.match(YQLParser.EQUALS);
                this.state = 1930;
                this.pragma_value();
                }
                break;
            case YQLParser.LPAREN:
                {
                this.state = 1931;
                this.match(YQLParser.LPAREN);
                this.state = 1932;
                this.pragma_value();
                this.state = 1937;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 1933;
                    this.match(YQLParser.COMMA);
                    this.state = 1934;
                    this.pragma_value();
                    }
                    }
                    this.state = 1939;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1940;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.EOF:
            case YQLParser.SEMICOLON:
            case YQLParser.END:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pragma_value(): Pragma_valueContext {
        let localContext = new Pragma_valueContext(this.context, this.state);
        this.enterRule(localContext, 226, YQLParser.RULE_pragma_value);
        try {
            this.state = 1949;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.PLUS:
            case YQLParser.MINUS:
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
            case YQLParser.REAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1944;
                this.signed_number();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1945;
                this.id();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1946;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.FALSE:
            case YQLParser.TRUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1947;
                this.bool_value();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1948;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sort_specification(): Sort_specificationContext {
        let localContext = new Sort_specificationContext(this.context, this.state);
        this.enterRule(localContext, 228, YQLParser.RULE_sort_specification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1951;
            this.expr();
            this.state = 1953;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55 || _la === 105) {
                {
                this.state = 1952;
                _la = this.tokenStream.LA(1);
                if(!(_la === 55 || _la === 105)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sort_specification_list(): Sort_specification_listContext {
        let localContext = new Sort_specification_listContext(this.context, this.state);
        this.enterRule(localContext, 230, YQLParser.RULE_sort_specification_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1955;
            this.sort_specification();
            this.state = 1960;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 1956;
                this.match(YQLParser.COMMA);
                this.state = 1957;
                this.sort_specification();
                }
                }
                this.state = 1962;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_stmt(): Select_stmtContext {
        let localContext = new Select_stmtContext(this.context, this.state);
        this.enterRule(localContext, 232, YQLParser.RULE_select_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1963;
            this.select_kind_parenthesis();
            this.state = 1969;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 126 || _la === 170 || _la === 298) {
                {
                {
                this.state = 1964;
                this.select_op();
                this.state = 1965;
                this.select_kind_parenthesis();
                }
                }
                this.state = 1971;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_unparenthesized_stmt(): Select_unparenthesized_stmtContext {
        let localContext = new Select_unparenthesized_stmtContext(this.context, this.state);
        this.enterRule(localContext, 234, YQLParser.RULE_select_unparenthesized_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1972;
            this.select_kind_partial();
            this.state = 1978;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 126 || _la === 170 || _la === 298) {
                {
                {
                this.state = 1973;
                this.select_op();
                this.state = 1974;
                this.select_kind_parenthesis();
                }
                }
                this.state = 1980;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_kind_parenthesis(): Select_kind_parenthesisContext {
        let localContext = new Select_kind_parenthesisContext(this.context, this.state);
        this.enterRule(localContext, 236, YQLParser.RULE_select_kind_parenthesis);
        try {
            this.state = 1986;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1981;
                this.select_kind_partial();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1982;
                this.match(YQLParser.LPAREN);
                this.state = 1983;
                this.select_kind_partial();
                this.state = 1984;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_op(): Select_opContext {
        let localContext = new Select_opContext(this.context, this.state);
        this.enterRule(localContext, 238, YQLParser.RULE_select_op);
        let _la: number;
        try {
            this.state = 1994;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.UNION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1988;
                this.match(YQLParser.UNION);
                this.state = 1990;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47) {
                    {
                    this.state = 1989;
                    this.match(YQLParser.ALL);
                    }
                }

                }
                break;
            case YQLParser.INTERSECT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1992;
                this.match(YQLParser.INTERSECT);
                }
                break;
            case YQLParser.EXCEPT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1993;
                this.match(YQLParser.EXCEPT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_kind_partial(): Select_kind_partialContext {
        let localContext = new Select_kind_partialContext(this.context, this.state);
        this.enterRule(localContext, 240, YQLParser.RULE_select_kind_partial);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1996;
            this.select_kind();
            this.state = 2003;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 183) {
                {
                this.state = 1997;
                this.match(YQLParser.LIMIT);
                this.state = 1998;
                this.expr();
                this.state = 2001;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25 || _la === 204) {
                    {
                    this.state = 1999;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 25 || _la === 204)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2000;
                    this.expr();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_kind(): Select_kindContext {
        let localContext = new Select_kindContext(this.context, this.state);
        this.enterRule(localContext, 242, YQLParser.RULE_select_kind);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2006;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 111) {
                {
                this.state = 2005;
                this.match(YQLParser.DISCARD);
                }
            }

            this.state = 2011;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.PROCESS:
                {
                this.state = 2008;
                this.process_core();
                }
                break;
            case YQLParser.REDUCE:
                {
                this.state = 2009;
                this.reduce_core();
                }
                break;
            case YQLParser.FROM:
            case YQLParser.SELECT:
                {
                this.state = 2010;
                this.select_core();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2016;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 171) {
                {
                this.state = 2013;
                this.match(YQLParser.INTO);
                this.state = 2014;
                this.match(YQLParser.RESULT);
                this.state = 2015;
                this.pure_column_or_named();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public process_core(): Process_coreContext {
        let localContext = new Process_coreContext(this.context, this.state);
        this.enterRule(localContext, 244, YQLParser.RULE_process_core);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2018;
            this.match(YQLParser.PROCESS);
            this.state = 2020;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 161, this.context) ) {
            case 1:
                {
                this.state = 2019;
                this.match(YQLParser.STREAM);
                }
                break;
            }
            this.state = 2022;
            this.named_single_source();
            this.state = 2027;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2023;
                this.match(YQLParser.COMMA);
                this.state = 2024;
                this.named_single_source();
                }
                }
                this.state = 2029;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2052;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 306) {
                {
                this.state = 2030;
                this.match(YQLParser.USING);
                this.state = 2031;
                this.using_call_expr();
                this.state = 2034;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 2032;
                    this.match(YQLParser.AS);
                    this.state = 2033;
                    this.an_id();
                    }
                }

                this.state = 2038;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 315) {
                    {
                    this.state = 2036;
                    this.match(YQLParser.WITH);
                    this.state = 2037;
                    this.external_call_settings();
                    }
                }

                this.state = 2042;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 2040;
                    this.match(YQLParser.WHERE);
                    this.state = 2041;
                    this.expr();
                    }
                }

                this.state = 2046;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 2044;
                    this.match(YQLParser.HAVING);
                    this.state = 2045;
                    this.expr();
                    }
                }

                this.state = 2050;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 56) {
                    {
                    this.state = 2048;
                    this.match(YQLParser.ASSUME);
                    this.state = 2049;
                    this.order_by_clause();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public external_call_param(): External_call_paramContext {
        let localContext = new External_call_paramContext(this.context, this.state);
        this.enterRule(localContext, 246, YQLParser.RULE_external_call_param);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2054;
            this.an_id();
            this.state = 2055;
            this.match(YQLParser.EQUALS);
            this.state = 2056;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public external_call_settings(): External_call_settingsContext {
        let localContext = new External_call_settingsContext(this.context, this.state);
        this.enterRule(localContext, 248, YQLParser.RULE_external_call_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2058;
            this.external_call_param();
            this.state = 2063;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2059;
                this.match(YQLParser.COMMA);
                this.state = 2060;
                this.external_call_param();
                }
                }
                this.state = 2065;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reduce_core(): Reduce_coreContext {
        let localContext = new Reduce_coreContext(this.context, this.state);
        this.enterRule(localContext, 250, YQLParser.RULE_reduce_core);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2066;
            this.match(YQLParser.REDUCE);
            this.state = 2067;
            this.named_single_source();
            this.state = 2072;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2068;
                this.match(YQLParser.COMMA);
                this.state = 2069;
                this.named_single_source();
                }
                }
                this.state = 2074;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2077;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 228) {
                {
                this.state = 2075;
                this.match(YQLParser.PRESORT);
                this.state = 2076;
                this.sort_specification_list();
                }
            }

            this.state = 2079;
            this.match(YQLParser.ON);
            this.state = 2080;
            this.column_list();
            this.state = 2081;
            this.match(YQLParser.USING);
            this.state = 2083;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 172, this.context) ) {
            case 1:
                {
                this.state = 2082;
                this.match(YQLParser.ALL);
                }
                break;
            }
            this.state = 2085;
            this.using_call_expr();
            this.state = 2088;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 2086;
                this.match(YQLParser.AS);
                this.state = 2087;
                this.an_id();
                }
            }

            this.state = 2092;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 313) {
                {
                this.state = 2090;
                this.match(YQLParser.WHERE);
                this.state = 2091;
                this.expr();
                }
            }

            this.state = 2096;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 154) {
                {
                this.state = 2094;
                this.match(YQLParser.HAVING);
                this.state = 2095;
                this.expr();
                }
            }

            this.state = 2100;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56) {
                {
                this.state = 2098;
                this.match(YQLParser.ASSUME);
                this.state = 2099;
                this.order_by_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_set_quantifier(): Opt_set_quantifierContext {
        let localContext = new Opt_set_quantifierContext(this.context, this.state);
        this.enterRule(localContext, 252, YQLParser.RULE_opt_set_quantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2103;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                {
                this.state = 2102;
                _la = this.tokenStream.LA(1);
                if(!(_la === 47 || _la === 112)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_core(): Select_coreContext {
        let localContext = new Select_coreContext(this.context, this.state);
        this.enterRule(localContext, 254, YQLParser.RULE_select_core);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2107;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 144) {
                {
                this.state = 2105;
                this.match(YQLParser.FROM);
                this.state = 2106;
                this.join_source();
                }
            }

            this.state = 2109;
            this.match(YQLParser.SELECT);
            this.state = 2111;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 179, this.context) ) {
            case 1:
                {
                this.state = 2110;
                this.match(YQLParser.STREAM);
                }
                break;
            }
            this.state = 2113;
            this.opt_set_quantifier();
            this.state = 2114;
            this.result_column();
            this.state = 2119;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 180, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2115;
                    this.match(YQLParser.COMMA);
                    this.state = 2116;
                    this.result_column();
                    }
                    }
                }
                this.state = 2121;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 180, this.context);
            }
            this.state = 2123;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 2122;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 2127;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 316) {
                {
                this.state = 2125;
                this.match(YQLParser.WITHOUT);
                this.state = 2126;
                this.without_column_list();
                }
            }

            this.state = 2131;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 144) {
                {
                this.state = 2129;
                this.match(YQLParser.FROM);
                this.state = 2130;
                this.join_source();
                }
            }

            this.state = 2135;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 313) {
                {
                this.state = 2133;
                this.match(YQLParser.WHERE);
                this.state = 2134;
                this.expr();
                }
            }

            this.state = 2138;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 150) {
                {
                this.state = 2137;
                this.group_by_clause();
                }
            }

            this.state = 2142;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 154) {
                {
                this.state = 2140;
                this.match(YQLParser.HAVING);
                this.state = 2141;
                this.expr();
                }
            }

            this.state = 2145;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 314) {
                {
                this.state = 2144;
                this.window_clause();
                }
            }

            this.state = 2148;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56 || _la === 212) {
                {
                this.state = 2147;
                this.ext_order_by_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_recognition_clause(): Row_pattern_recognition_clauseContext {
        let localContext = new Row_pattern_recognition_clauseContext(this.context, this.state);
        this.enterRule(localContext, 256, YQLParser.RULE_row_pattern_recognition_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2150;
            this.match(YQLParser.MATCH_RECOGNIZE);
            this.state = 2151;
            this.match(YQLParser.LPAREN);
            this.state = 2153;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 217) {
                {
                this.state = 2152;
                this.window_partition_clause();
                }
            }

            this.state = 2156;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 212) {
                {
                this.state = 2155;
                this.order_by_clause();
                }
            }

            this.state = 2159;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 190) {
                {
                this.state = 2158;
                this.row_pattern_measures();
                }
            }

            this.state = 2162;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47 || _la === 207) {
                {
                this.state = 2161;
                this.row_pattern_rows_per_match();
                }
            }

            this.state = 2164;
            this.row_pattern_common_syntax();
            this.state = 2165;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_rows_per_match(): Row_pattern_rows_per_matchContext {
        let localContext = new Row_pattern_rows_per_matchContext(this.context, this.state);
        this.enterRule(localContext, 258, YQLParser.RULE_row_pattern_rows_per_match);
        let _la: number;
        try {
            this.state = 2178;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ONE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2167;
                this.match(YQLParser.ONE);
                this.state = 2168;
                this.match(YQLParser.ROW);
                this.state = 2169;
                this.match(YQLParser.PER);
                this.state = 2170;
                this.match(YQLParser.MATCH);
                }
                break;
            case YQLParser.ALL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2171;
                this.match(YQLParser.ALL);
                this.state = 2172;
                this.match(YQLParser.ROWS);
                this.state = 2173;
                this.match(YQLParser.PER);
                this.state = 2174;
                this.match(YQLParser.MATCH);
                this.state = 2176;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 205 || _la === 269 || _la === 315) {
                    {
                    this.state = 2175;
                    this.row_pattern_empty_match_handling();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_empty_match_handling(): Row_pattern_empty_match_handlingContext {
        let localContext = new Row_pattern_empty_match_handlingContext(this.context, this.state);
        this.enterRule(localContext, 260, YQLParser.RULE_row_pattern_empty_match_handling);
        try {
            this.state = 2189;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SHOW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2180;
                this.match(YQLParser.SHOW);
                this.state = 2181;
                this.match(YQLParser.EMPTY);
                this.state = 2182;
                this.match(YQLParser.MATCHES);
                }
                break;
            case YQLParser.OMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2183;
                this.match(YQLParser.OMIT);
                this.state = 2184;
                this.match(YQLParser.EMPTY);
                this.state = 2185;
                this.match(YQLParser.MATCHES);
                }
                break;
            case YQLParser.WITH:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2186;
                this.match(YQLParser.WITH);
                this.state = 2187;
                this.match(YQLParser.UNMATCHED);
                this.state = 2188;
                this.match(YQLParser.ROWS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_measures(): Row_pattern_measuresContext {
        let localContext = new Row_pattern_measuresContext(this.context, this.state);
        this.enterRule(localContext, 262, YQLParser.RULE_row_pattern_measures);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2191;
            this.match(YQLParser.MEASURES);
            this.state = 2192;
            this.row_pattern_measure_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_measure_list(): Row_pattern_measure_listContext {
        let localContext = new Row_pattern_measure_listContext(this.context, this.state);
        this.enterRule(localContext, 264, YQLParser.RULE_row_pattern_measure_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2194;
            this.row_pattern_measure_definition();
            this.state = 2199;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2195;
                this.match(YQLParser.COMMA);
                this.state = 2196;
                this.row_pattern_measure_definition();
                }
                }
                this.state = 2201;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_measure_definition(): Row_pattern_measure_definitionContext {
        let localContext = new Row_pattern_measure_definitionContext(this.context, this.state);
        this.enterRule(localContext, 266, YQLParser.RULE_row_pattern_measure_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2202;
            this.expr();
            this.state = 2203;
            this.match(YQLParser.AS);
            this.state = 2204;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_common_syntax(): Row_pattern_common_syntaxContext {
        let localContext = new Row_pattern_common_syntaxContext(this.context, this.state);
        this.enterRule(localContext, 268, YQLParser.RULE_row_pattern_common_syntax);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2209;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 46) {
                {
                this.state = 2206;
                this.match(YQLParser.AFTER);
                this.state = 2207;
                this.match(YQLParser.MATCH);
                this.state = 2208;
                this.row_pattern_skip_to();
                }
            }

            this.state = 2212;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 165 || _la === 264) {
                {
                this.state = 2211;
                this.row_pattern_initial_or_seek();
                }
            }

            this.state = 2214;
            this.match(YQLParser.PATTERN);
            this.state = 2215;
            this.match(YQLParser.LPAREN);
            this.state = 2216;
            this.row_pattern();
            this.state = 2217;
            this.match(YQLParser.RPAREN);
            this.state = 2219;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 275) {
                {
                this.state = 2218;
                this.row_pattern_subset_clause();
                }
            }

            this.state = 2221;
            this.match(YQLParser.DEFINE);
            this.state = 2222;
            this.row_pattern_definition_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_skip_to(): Row_pattern_skip_toContext {
        let localContext = new Row_pattern_skip_toContext(this.context, this.state);
        this.enterRule(localContext, 270, YQLParser.RULE_row_pattern_skip_to);
        try {
            this.state = 2243;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 200, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2224;
                this.match(YQLParser.TSKIP);
                this.state = 2225;
                this.match(YQLParser.TO);
                this.state = 2226;
                this.match(YQLParser.NEXT);
                this.state = 2227;
                this.match(YQLParser.ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2228;
                this.match(YQLParser.TSKIP);
                this.state = 2229;
                this.match(YQLParser.PAST);
                this.state = 2230;
                this.match(YQLParser.LAST);
                this.state = 2231;
                this.match(YQLParser.ROW);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2232;
                this.match(YQLParser.TSKIP);
                this.state = 2233;
                this.match(YQLParser.TO);
                this.state = 2234;
                this.match(YQLParser.FIRST);
                this.state = 2235;
                this.row_pattern_skip_to_variable_name();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2236;
                this.match(YQLParser.TSKIP);
                this.state = 2237;
                this.match(YQLParser.TO);
                this.state = 2238;
                this.match(YQLParser.LAST);
                this.state = 2239;
                this.row_pattern_skip_to_variable_name();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2240;
                this.match(YQLParser.TSKIP);
                this.state = 2241;
                this.match(YQLParser.TO);
                this.state = 2242;
                this.row_pattern_skip_to_variable_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_skip_to_variable_name(): Row_pattern_skip_to_variable_nameContext {
        let localContext = new Row_pattern_skip_to_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 272, YQLParser.RULE_row_pattern_skip_to_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2245;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_initial_or_seek(): Row_pattern_initial_or_seekContext {
        let localContext = new Row_pattern_initial_or_seekContext(this.context, this.state);
        this.enterRule(localContext, 274, YQLParser.RULE_row_pattern_initial_or_seek);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2247;
            _la = this.tokenStream.LA(1);
            if(!(_la === 165 || _la === 264)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern(): Row_patternContext {
        let localContext = new Row_patternContext(this.context, this.state);
        this.enterRule(localContext, 276, YQLParser.RULE_row_pattern);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2249;
            this.row_pattern_term();
            this.state = 2254;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 12) {
                {
                {
                this.state = 2250;
                this.match(YQLParser.PIPE);
                this.state = 2251;
                this.row_pattern_term();
                }
                }
                this.state = 2256;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_term(): Row_pattern_termContext {
        let localContext = new Row_pattern_termContext(this.context, this.state);
        this.enterRule(localContext, 278, YQLParser.RULE_row_pattern_term);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2258;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 2257;
                this.row_pattern_factor();
                }
                }
                this.state = 2260;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & 5185) !== 0) || _la === 223 || _la === 320 || _la === 321);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_factor(): Row_pattern_factorContext {
        let localContext = new Row_pattern_factorContext(this.context, this.state);
        this.enterRule(localContext, 280, YQLParser.RULE_row_pattern_factor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2262;
            this.row_pattern_primary();
            this.state = 2264;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 203, this.context) ) {
            case 1:
                {
                this.state = 2263;
                this.row_pattern_quantifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_quantifier(): Row_pattern_quantifierContext {
        let localContext = new Row_pattern_quantifierContext(this.context, this.state);
        this.enterRule(localContext, 282, YQLParser.RULE_row_pattern_quantifier);
        let _la: number;
        try {
            this.state = 2294;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 210, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2266;
                this.match(YQLParser.ASTERISK);
                this.state = 2268;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2267;
                    this.match(YQLParser.QUESTION);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2270;
                this.match(YQLParser.PLUS);
                this.state = 2272;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2271;
                    this.match(YQLParser.QUESTION);
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2274;
                this.match(YQLParser.QUESTION);
                this.state = 2276;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2275;
                    this.match(YQLParser.QUESTION);
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2278;
                this.match(YQLParser.LBRACE_CURLY);
                this.state = 2280;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322 || _la === 323) {
                    {
                    this.state = 2279;
                    this.integer();
                    }
                }

                this.state = 2282;
                this.match(YQLParser.COMMA);
                this.state = 2284;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322 || _la === 323) {
                    {
                    this.state = 2283;
                    this.integer();
                    }
                }

                this.state = 2286;
                this.match(YQLParser.RBRACE_CURLY);
                this.state = 2288;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2287;
                    this.match(YQLParser.QUESTION);
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2290;
                this.match(YQLParser.LBRACE_CURLY);
                this.state = 2291;
                this.integer();
                this.state = 2292;
                this.match(YQLParser.RBRACE_CURLY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_primary(): Row_pattern_primaryContext {
        let localContext = new Row_pattern_primaryContext(this.context, this.state);
        this.enterRule(localContext, 284, YQLParser.RULE_row_pattern_primary);
        let _la: number;
        try {
            this.state = 2311;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2296;
                this.row_pattern_primary_variable_name();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2297;
                this.match(YQLParser.DOLLAR);
                }
                break;
            case YQLParser.CARET:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2298;
                this.match(YQLParser.CARET);
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2299;
                this.match(YQLParser.LPAREN);
                this.state = 2301;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & 5185) !== 0) || _la === 223 || _la === 320 || _la === 321) {
                    {
                    this.state = 2300;
                    this.row_pattern();
                    }
                }

                this.state = 2303;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.LBRACE_CURLY:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2304;
                this.match(YQLParser.LBRACE_CURLY);
                this.state = 2305;
                this.match(YQLParser.MINUS);
                this.state = 2306;
                this.row_pattern();
                this.state = 2307;
                this.match(YQLParser.MINUS);
                this.state = 2308;
                this.match(YQLParser.RBRACE_CURLY);
                }
                break;
            case YQLParser.PERMUTE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2310;
                this.row_pattern_permute();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_primary_variable_name(): Row_pattern_primary_variable_nameContext {
        let localContext = new Row_pattern_primary_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 286, YQLParser.RULE_row_pattern_primary_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2313;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_permute(): Row_pattern_permuteContext {
        let localContext = new Row_pattern_permuteContext(this.context, this.state);
        this.enterRule(localContext, 288, YQLParser.RULE_row_pattern_permute);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2315;
            this.match(YQLParser.PERMUTE);
            this.state = 2316;
            this.match(YQLParser.LPAREN);
            this.state = 2317;
            this.row_pattern();
            this.state = 2322;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2318;
                this.match(YQLParser.COMMA);
                this.state = 2319;
                this.row_pattern();
                }
                }
                this.state = 2324;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2325;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_clause(): Row_pattern_subset_clauseContext {
        let localContext = new Row_pattern_subset_clauseContext(this.context, this.state);
        this.enterRule(localContext, 290, YQLParser.RULE_row_pattern_subset_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2327;
            this.match(YQLParser.SUBSET);
            this.state = 2328;
            this.row_pattern_subset_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_list(): Row_pattern_subset_listContext {
        let localContext = new Row_pattern_subset_listContext(this.context, this.state);
        this.enterRule(localContext, 292, YQLParser.RULE_row_pattern_subset_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2330;
            this.row_pattern_subset_item();
            this.state = 2335;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2331;
                this.match(YQLParser.COMMA);
                this.state = 2332;
                this.row_pattern_subset_item();
                }
                }
                this.state = 2337;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_item(): Row_pattern_subset_itemContext {
        let localContext = new Row_pattern_subset_itemContext(this.context, this.state);
        this.enterRule(localContext, 294, YQLParser.RULE_row_pattern_subset_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2338;
            this.row_pattern_subset_item_variable_name();
            this.state = 2339;
            this.match(YQLParser.EQUALS);
            this.state = 2340;
            this.match(YQLParser.LPAREN);
            this.state = 2341;
            this.row_pattern_subset_rhs();
            this.state = 2342;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_item_variable_name(): Row_pattern_subset_item_variable_nameContext {
        let localContext = new Row_pattern_subset_item_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 296, YQLParser.RULE_row_pattern_subset_item_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2344;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_rhs(): Row_pattern_subset_rhsContext {
        let localContext = new Row_pattern_subset_rhsContext(this.context, this.state);
        this.enterRule(localContext, 298, YQLParser.RULE_row_pattern_subset_rhs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2346;
            this.row_pattern_subset_rhs_variable_name();
            this.state = 2351;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2347;
                this.match(YQLParser.COMMA);
                this.state = 2348;
                this.row_pattern_subset_rhs_variable_name();
                }
                }
                this.state = 2353;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_subset_rhs_variable_name(): Row_pattern_subset_rhs_variable_nameContext {
        let localContext = new Row_pattern_subset_rhs_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 300, YQLParser.RULE_row_pattern_subset_rhs_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2354;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_definition_list(): Row_pattern_definition_listContext {
        let localContext = new Row_pattern_definition_listContext(this.context, this.state);
        this.enterRule(localContext, 302, YQLParser.RULE_row_pattern_definition_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2356;
            this.row_pattern_definition();
            this.state = 2361;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2357;
                this.match(YQLParser.COMMA);
                this.state = 2358;
                this.row_pattern_definition();
                }
                }
                this.state = 2363;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_definition(): Row_pattern_definitionContext {
        let localContext = new Row_pattern_definitionContext(this.context, this.state);
        this.enterRule(localContext, 304, YQLParser.RULE_row_pattern_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2364;
            this.row_pattern_definition_variable_name();
            this.state = 2365;
            this.match(YQLParser.AS);
            this.state = 2366;
            this.row_pattern_definition_search_condition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_definition_variable_name(): Row_pattern_definition_variable_nameContext {
        let localContext = new Row_pattern_definition_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 306, YQLParser.RULE_row_pattern_definition_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2368;
            this.row_pattern_variable_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_definition_search_condition(): Row_pattern_definition_search_conditionContext {
        let localContext = new Row_pattern_definition_search_conditionContext(this.context, this.state);
        this.enterRule(localContext, 308, YQLParser.RULE_row_pattern_definition_search_condition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2370;
            this.search_condition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public search_condition(): Search_conditionContext {
        let localContext = new Search_conditionContext(this.context, this.state);
        this.enterRule(localContext, 310, YQLParser.RULE_search_condition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2372;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        let localContext = new Row_pattern_variable_nameContext(this.context, this.state);
        this.enterRule(localContext, 312, YQLParser.RULE_row_pattern_variable_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2374;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public order_by_clause(): Order_by_clauseContext {
        let localContext = new Order_by_clauseContext(this.context, this.state);
        this.enterRule(localContext, 314, YQLParser.RULE_order_by_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2376;
            this.match(YQLParser.ORDER);
            this.state = 2377;
            this.match(YQLParser.BY);
            this.state = 2378;
            this.sort_specification_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ext_order_by_clause(): Ext_order_by_clauseContext {
        let localContext = new Ext_order_by_clauseContext(this.context, this.state);
        this.enterRule(localContext, 316, YQLParser.RULE_ext_order_by_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2381;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56) {
                {
                this.state = 2380;
                this.match(YQLParser.ASSUME);
                }
            }

            this.state = 2383;
            this.order_by_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public group_by_clause(): Group_by_clauseContext {
        let localContext = new Group_by_clauseContext(this.context, this.state);
        this.enterRule(localContext, 318, YQLParser.RULE_group_by_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2385;
            this.match(YQLParser.GROUP);
            this.state = 2387;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 2386;
                this.match(YQLParser.COMPACT);
                }
            }

            this.state = 2389;
            this.match(YQLParser.BY);
            this.state = 2390;
            this.opt_set_quantifier();
            this.state = 2391;
            this.grouping_element_list();
            this.state = 2394;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 2392;
                this.match(YQLParser.WITH);
                this.state = 2393;
                this.an_id();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grouping_element_list(): Grouping_element_listContext {
        let localContext = new Grouping_element_listContext(this.context, this.state);
        this.enterRule(localContext, 320, YQLParser.RULE_grouping_element_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2396;
            this.grouping_element();
            this.state = 2401;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2397;
                this.match(YQLParser.COMMA);
                this.state = 2398;
                this.grouping_element();
                }
                }
                this.state = 2403;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grouping_element(): Grouping_elementContext {
        let localContext = new Grouping_elementContext(this.context, this.state);
        this.enterRule(localContext, 322, YQLParser.RULE_grouping_element);
        try {
            this.state = 2409;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 221, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2404;
                this.ordinary_grouping_set();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2405;
                this.rollup_list();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2406;
                this.cube_list();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2407;
                this.grouping_sets_specification();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2408;
                this.hopping_window_specification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ordinary_grouping_set(): Ordinary_grouping_setContext {
        let localContext = new Ordinary_grouping_setContext(this.context, this.state);
        this.enterRule(localContext, 324, YQLParser.RULE_ordinary_grouping_set);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2411;
            this.named_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ordinary_grouping_set_list(): Ordinary_grouping_set_listContext {
        let localContext = new Ordinary_grouping_set_listContext(this.context, this.state);
        this.enterRule(localContext, 326, YQLParser.RULE_ordinary_grouping_set_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2413;
            this.ordinary_grouping_set();
            this.state = 2418;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2414;
                this.match(YQLParser.COMMA);
                this.state = 2415;
                this.ordinary_grouping_set();
                }
                }
                this.state = 2420;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollup_list(): Rollup_listContext {
        let localContext = new Rollup_listContext(this.context, this.state);
        this.enterRule(localContext, 328, YQLParser.RULE_rollup_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2421;
            this.match(YQLParser.ROLLUP);
            this.state = 2422;
            this.match(YQLParser.LPAREN);
            this.state = 2423;
            this.ordinary_grouping_set_list();
            this.state = 2424;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cube_list(): Cube_listContext {
        let localContext = new Cube_listContext(this.context, this.state);
        this.enterRule(localContext, 330, YQLParser.RULE_cube_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2426;
            this.match(YQLParser.CUBE);
            this.state = 2427;
            this.match(YQLParser.LPAREN);
            this.state = 2428;
            this.ordinary_grouping_set_list();
            this.state = 2429;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grouping_sets_specification(): Grouping_sets_specificationContext {
        let localContext = new Grouping_sets_specificationContext(this.context, this.state);
        this.enterRule(localContext, 332, YQLParser.RULE_grouping_sets_specification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2431;
            this.match(YQLParser.GROUPING);
            this.state = 2432;
            this.match(YQLParser.SETS);
            this.state = 2433;
            this.match(YQLParser.LPAREN);
            this.state = 2434;
            this.grouping_element_list();
            this.state = 2435;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hopping_window_specification(): Hopping_window_specificationContext {
        let localContext = new Hopping_window_specificationContext(this.context, this.state);
        this.enterRule(localContext, 334, YQLParser.RULE_hopping_window_specification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2437;
            this.match(YQLParser.HOP);
            this.state = 2438;
            this.match(YQLParser.LPAREN);
            this.state = 2439;
            this.expr();
            this.state = 2440;
            this.match(YQLParser.COMMA);
            this.state = 2441;
            this.expr();
            this.state = 2442;
            this.match(YQLParser.COMMA);
            this.state = 2443;
            this.expr();
            this.state = 2444;
            this.match(YQLParser.COMMA);
            this.state = 2445;
            this.expr();
            this.state = 2446;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public result_column(): Result_columnContext {
        let localContext = new Result_columnContext(this.context, this.state);
        this.enterRule(localContext, 336, YQLParser.RULE_result_column);
        try {
            this.state = 2457;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 224, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2448;
                this.opt_id_prefix();
                this.state = 2449;
                this.match(YQLParser.ASTERISK);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2451;
                this.expr();
                this.state = 2455;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 223, this.context) ) {
                case 1:
                    {
                    this.state = 2452;
                    this.match(YQLParser.AS);
                    this.state = 2453;
                    this.an_id_or_type();
                    }
                    break;
                case 2:
                    {
                    this.state = 2454;
                    this.an_id_as_compat();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_source(): Join_sourceContext {
        let localContext = new Join_sourceContext(this.context, this.state);
        this.enterRule(localContext, 338, YQLParser.RULE_join_source);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2460;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 225, this.context) ) {
            case 1:
                {
                this.state = 2459;
                this.match(YQLParser.ANY);
                }
                break;
            }
            this.state = 2462;
            this.flatten_source();
            this.state = 2473;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25 || _la === 90 || _la === 128 || _la === 145 || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 268443777) !== 0) || _la === 214 || _la === 254) {
                {
                {
                this.state = 2463;
                this.join_op();
                this.state = 2465;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 226, this.context) ) {
                case 1:
                    {
                    this.state = 2464;
                    this.match(YQLParser.ANY);
                    }
                    break;
                }
                this.state = 2467;
                this.flatten_source();
                this.state = 2469;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206 || _la === 306) {
                    {
                    this.state = 2468;
                    this.join_constraint();
                    }
                }

                }
                }
                this.state = 2475;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_column(): Named_columnContext {
        let localContext = new Named_columnContext(this.context, this.state);
        this.enterRule(localContext, 340, YQLParser.RULE_named_column);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2476;
            this.column_name();
            this.state = 2479;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 2477;
                this.match(YQLParser.AS);
                this.state = 2478;
                this.an_id();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flatten_by_arg(): Flatten_by_argContext {
        let localContext = new Flatten_by_argContext(this.context, this.state);
        this.enterRule(localContext, 342, YQLParser.RULE_flatten_by_arg);
        let _la: number;
        try {
            this.state = 2489;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2481;
                this.named_column();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2482;
                this.match(YQLParser.LPAREN);
                this.state = 2483;
                this.named_expr_list();
                this.state = 2485;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 2484;
                    this.match(YQLParser.COMMA);
                    }
                }

                this.state = 2487;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flatten_source(): Flatten_sourceContext {
        let localContext = new Flatten_sourceContext(this.context, this.state);
        this.enterRule(localContext, 344, YQLParser.RULE_flatten_source);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2491;
            this.named_single_source();
            this.state = 2501;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 139) {
                {
                this.state = 2492;
                this.match(YQLParser.FLATTEN);
                this.state = 2499;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.BY:
                case YQLParser.DICT:
                case YQLParser.LIST:
                case YQLParser.OPTIONAL:
                    {
                    this.state = 2494;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 108 || _la === 184 || _la === 210) {
                        {
                        this.state = 2493;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 108 || _la === 184 || _la === 210)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 2496;
                    this.match(YQLParser.BY);
                    this.state = 2497;
                    this.flatten_by_arg();
                    }
                    break;
                case YQLParser.COLUMNS:
                    {
                    this.state = 2498;
                    this.match(YQLParser.COLUMNS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_single_source(): Named_single_sourceContext {
        let localContext = new Named_single_sourceContext(this.context, this.state);
        this.enterRule(localContext, 346, YQLParser.RULE_named_single_source);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2503;
            this.single_source();
            this.state = 2505;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 235, this.context) ) {
            case 1:
                {
                this.state = 2504;
                this.row_pattern_recognition_clause();
                }
                break;
            }
            this.state = 2515;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 238, this.context) ) {
            case 1:
                {
                this.state = 2510;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.AS:
                    {
                    this.state = 2507;
                    this.match(YQLParser.AS);
                    this.state = 2508;
                    this.an_id();
                    }
                    break;
                case YQLParser.ABORT:
                case YQLParser.ACTION:
                case YQLParser.ADD:
                case YQLParser.AFTER:
                case YQLParser.ALTER:
                case YQLParser.ANALYZE:
                case YQLParser.AND:
                case YQLParser.ANSI:
                case YQLParser.ARRAY:
                case YQLParser.ASC:
                case YQLParser.ASYNC:
                case YQLParser.ATTACH:
                case YQLParser.ATTRIBUTES:
                case YQLParser.AUTOINCREMENT:
                case YQLParser.BACKUP:
                case YQLParser.COLLECTION:
                case YQLParser.BEFORE:
                case YQLParser.BEGIN:
                case YQLParser.BERNOULLI:
                case YQLParser.BY:
                case YQLParser.CASCADE:
                case YQLParser.CHANGEFEED:
                case YQLParser.CHECK:
                case YQLParser.CLASSIFIER:
                case YQLParser.COMMIT:
                case YQLParser.CONDITIONAL:
                case YQLParser.CONFLICT:
                case YQLParser.CONNECT:
                case YQLParser.CONSTRAINT:
                case YQLParser.CONSUMER:
                case YQLParser.COVER:
                case YQLParser.CREATE:
                case YQLParser.CURRENT:
                case YQLParser.DATA:
                case YQLParser.DATABASE:
                case YQLParser.DECIMAL:
                case YQLParser.DECLARE:
                case YQLParser.DEFAULT:
                case YQLParser.DEFERRABLE:
                case YQLParser.DEFERRED:
                case YQLParser.DELETE:
                case YQLParser.DESC:
                case YQLParser.DESCRIBE:
                case YQLParser.DETACH:
                case YQLParser.DIRECTORY:
                case YQLParser.DISABLE:
                case YQLParser.DISCARD:
                case YQLParser.DROP:
                case YQLParser.EACH:
                case YQLParser.ELSE:
                case YQLParser.EMPTY:
                case YQLParser.ENCRYPTED:
                case YQLParser.END:
                case YQLParser.ERROR:
                case YQLParser.ESCAPE:
                case YQLParser.EVALUATE:
                case YQLParser.EXCLUDE:
                case YQLParser.EXCLUSIVE:
                case YQLParser.EXPLAIN:
                case YQLParser.EXPORT:
                case YQLParser.EXTERNAL:
                case YQLParser.FAIL:
                case YQLParser.FAMILY:
                case YQLParser.FILTER:
                case YQLParser.FIRST:
                case YQLParser.FLATTEN:
                case YQLParser.FOLLOWING:
                case YQLParser.FOR:
                case YQLParser.FOREIGN:
                case YQLParser.FUNCTION:
                case YQLParser.GLOB:
                case YQLParser.GRANT:
                case YQLParser.GROUP:
                case YQLParser.GROUPING:
                case YQLParser.HASH:
                case YQLParser.IF:
                case YQLParser.IGNORE:
                case YQLParser.ILIKE:
                case YQLParser.IMMEDIATE:
                case YQLParser.IMPORT:
                case YQLParser.IN:
                case YQLParser.INDEX:
                case YQLParser.INDEXED:
                case YQLParser.INHERITS:
                case YQLParser.INITIAL:
                case YQLParser.INITIALLY:
                case YQLParser.INSERT:
                case YQLParser.INSTEAD:
                case YQLParser.INTO:
                case YQLParser.IS:
                case YQLParser.LAST:
                case YQLParser.LEGACY:
                case YQLParser.LIKE:
                case YQLParser.MANAGE:
                case YQLParser.MATCH:
                case YQLParser.MATCHES:
                case YQLParser.MATCH_RECOGNIZE:
                case YQLParser.MEASURES:
                case YQLParser.MICROSECONDS:
                case YQLParser.MILLISECONDS:
                case YQLParser.MODIFY:
                case YQLParser.NANOSECONDS:
                case YQLParser.NEXT:
                case YQLParser.NO:
                case YQLParser.NULLS:
                case YQLParser.OBJECT:
                case YQLParser.OF:
                case YQLParser.OFFSET:
                case YQLParser.OMIT:
                case YQLParser.ONE:
                case YQLParser.ONLY:
                case YQLParser.OPTION:
                case YQLParser.OR:
                case YQLParser.ORDER:
                case YQLParser.OTHERS:
                case YQLParser.PARALLEL:
                case YQLParser.PARTITION:
                case YQLParser.PASSING:
                case YQLParser.PASSWORD:
                case YQLParser.PAST:
                case YQLParser.PATTERN:
                case YQLParser.PER:
                case YQLParser.PERMUTE:
                case YQLParser.PLAN:
                case YQLParser.POOL:
                case YQLParser.PRAGMA:
                case YQLParser.PRECEDING:
                case YQLParser.PRIMARY:
                case YQLParser.PRIVILEGES:
                case YQLParser.QUEUE:
                case YQLParser.RAISE:
                case YQLParser.REFERENCES:
                case YQLParser.REGEXP:
                case YQLParser.REINDEX:
                case YQLParser.RELEASE:
                case YQLParser.REMOVE:
                case YQLParser.RENAME:
                case YQLParser.REPLACE:
                case YQLParser.REPLICATION:
                case YQLParser.RESET:
                case YQLParser.RESPECT:
                case YQLParser.RESTRICT:
                case YQLParser.REVERT:
                case YQLParser.REVOKE:
                case YQLParser.RLIKE:
                case YQLParser.ROLLBACK:
                case YQLParser.ROW:
                case YQLParser.SAVEPOINT:
                case YQLParser.SECONDS:
                case YQLParser.SEEK:
                case YQLParser.SETS:
                case YQLParser.SHOW:
                case YQLParser.TSKIP:
                case YQLParser.SOURCE:
                case YQLParser.SUBQUERY:
                case YQLParser.SUBSET:
                case YQLParser.SYMBOLS:
                case YQLParser.SYNC:
                case YQLParser.SYSTEM:
                case YQLParser.TABLE:
                case YQLParser.TABLES:
                case YQLParser.TABLESAMPLE:
                case YQLParser.TABLESTORE:
                case YQLParser.TEMP:
                case YQLParser.TEMPORARY:
                case YQLParser.THEN:
                case YQLParser.TIES:
                case YQLParser.TO:
                case YQLParser.TOPIC:
                case YQLParser.TRANSACTION:
                case YQLParser.TRIGGER:
                case YQLParser.TYPE:
                case YQLParser.UNCONDITIONAL:
                case YQLParser.UNIQUE:
                case YQLParser.UNKNOWN:
                case YQLParser.UNMATCHED:
                case YQLParser.UPDATE:
                case YQLParser.UPSERT:
                case YQLParser.USE:
                case YQLParser.USER:
                case YQLParser.VACUUM:
                case YQLParser.VALUES:
                case YQLParser.VIRTUAL:
                case YQLParser.WRAPPER:
                case YQLParser.XOR:
                case YQLParser.STRING_VALUE:
                case YQLParser.ID_PLAIN:
                case YQLParser.ID_QUOTED:
                    {
                    this.state = 2509;
                    this.an_id_as_compat();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2513;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 26) {
                    {
                    this.state = 2512;
                    this.pure_column_list();
                    }
                }

                }
                break;
            }
            this.state = 2519;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SAMPLE:
                {
                this.state = 2517;
                this.sample_clause();
                }
                break;
            case YQLParser.TABLESAMPLE:
                {
                this.state = 2518;
                this.tablesample_clause();
                }
                break;
            case YQLParser.EOF:
            case YQLParser.SEMICOLON:
            case YQLParser.COMMA:
            case YQLParser.RPAREN:
            case YQLParser.ASSUME:
            case YQLParser.CROSS:
            case YQLParser.END:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUSION:
            case YQLParser.FLATTEN:
            case YQLParser.FULL:
            case YQLParser.GROUP:
            case YQLParser.HAVING:
            case YQLParser.INNER:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.JOIN:
            case YQLParser.LEFT:
            case YQLParser.LIMIT:
            case YQLParser.NATURAL:
            case YQLParser.ON:
            case YQLParser.ORDER:
            case YQLParser.OUTER:
            case YQLParser.PRESORT:
            case YQLParser.RETURNING:
            case YQLParser.RIGHT:
            case YQLParser.SELECT:
            case YQLParser.UNION:
            case YQLParser.USING:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public single_source(): Single_sourceContext {
        let localContext = new Single_sourceContext(this.context, this.state);
        this.enterRule(localContext, 348, YQLParser.RULE_single_source);
        try {
            this.state = 2530;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 240, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2521;
                this.table_ref();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2522;
                this.match(YQLParser.LPAREN);
                this.state = 2523;
                this.select_stmt();
                this.state = 2524;
                this.match(YQLParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2526;
                this.match(YQLParser.LPAREN);
                this.state = 2527;
                this.values_stmt();
                this.state = 2528;
                this.match(YQLParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sample_clause(): Sample_clauseContext {
        let localContext = new Sample_clauseContext(this.context, this.state);
        this.enterRule(localContext, 350, YQLParser.RULE_sample_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2532;
            this.match(YQLParser.SAMPLE);
            this.state = 2533;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablesample_clause(): Tablesample_clauseContext {
        let localContext = new Tablesample_clauseContext(this.context, this.state);
        this.enterRule(localContext, 352, YQLParser.RULE_tablesample_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2535;
            this.match(YQLParser.TABLESAMPLE);
            this.state = 2536;
            this.sampling_mode();
            this.state = 2537;
            this.match(YQLParser.LPAREN);
            this.state = 2538;
            this.expr();
            this.state = 2539;
            this.match(YQLParser.RPAREN);
            this.state = 2541;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 242) {
                {
                this.state = 2540;
                this.repeatable_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampling_mode(): Sampling_modeContext {
        let localContext = new Sampling_modeContext(this.context, this.state);
        this.enterRule(localContext, 354, YQLParser.RULE_sampling_mode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2543;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 279)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public repeatable_clause(): Repeatable_clauseContext {
        let localContext = new Repeatable_clauseContext(this.context, this.state);
        this.enterRule(localContext, 356, YQLParser.RULE_repeatable_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2545;
            this.match(YQLParser.REPEATABLE);
            this.state = 2546;
            this.match(YQLParser.LPAREN);
            this.state = 2547;
            this.expr();
            this.state = 2548;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_op(): Join_opContext {
        let localContext = new Join_opContext(this.context, this.state);
        this.enterRule(localContext, 358, YQLParser.RULE_join_op);
        let _la: number;
        try {
            this.state = 2574;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.COMMA:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2550;
                this.match(YQLParser.COMMA);
                }
                break;
            case YQLParser.CROSS:
            case YQLParser.EXCLUSION:
            case YQLParser.FULL:
            case YQLParser.INNER:
            case YQLParser.JOIN:
            case YQLParser.LEFT:
            case YQLParser.NATURAL:
            case YQLParser.OUTER:
            case YQLParser.RIGHT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2552;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 2551;
                    this.match(YQLParser.NATURAL);
                    }
                }

                this.state = 2571;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case YQLParser.EXCLUSION:
                case YQLParser.FULL:
                case YQLParser.JOIN:
                case YQLParser.LEFT:
                case YQLParser.OUTER:
                case YQLParser.RIGHT:
                    {
                    this.state = 2564;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case YQLParser.LEFT:
                        {
                        this.state = 2554;
                        this.match(YQLParser.LEFT);
                        this.state = 2556;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 208 || _la === 266) {
                            {
                            this.state = 2555;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 208 || _la === 266)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                        }

                        }
                        break;
                    case YQLParser.RIGHT:
                        {
                        this.state = 2558;
                        this.match(YQLParser.RIGHT);
                        this.state = 2560;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 208 || _la === 266) {
                            {
                            this.state = 2559;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 208 || _la === 266)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                        }

                        }
                        break;
                    case YQLParser.EXCLUSION:
                        {
                        this.state = 2562;
                        this.match(YQLParser.EXCLUSION);
                        }
                        break;
                    case YQLParser.FULL:
                        {
                        this.state = 2563;
                        this.match(YQLParser.FULL);
                        }
                        break;
                    case YQLParser.JOIN:
                    case YQLParser.OUTER:
                        break;
                    default:
                        break;
                    }
                    this.state = 2567;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 214) {
                        {
                        this.state = 2566;
                        this.match(YQLParser.OUTER);
                        }
                    }

                    }
                    break;
                case YQLParser.INNER:
                    {
                    this.state = 2569;
                    this.match(YQLParser.INNER);
                    }
                    break;
                case YQLParser.CROSS:
                    {
                    this.state = 2570;
                    this.match(YQLParser.CROSS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2573;
                this.match(YQLParser.JOIN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_constraint(): Join_constraintContext {
        let localContext = new Join_constraintContext(this.context, this.state);
        this.enterRule(localContext, 360, YQLParser.RULE_join_constraint);
        try {
            this.state = 2580;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2576;
                this.match(YQLParser.ON);
                this.state = 2577;
                this.expr();
                }
                break;
            case YQLParser.USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2578;
                this.match(YQLParser.USING);
                this.state = 2579;
                this.pure_column_or_named_list();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returning_columns_list(): Returning_columns_listContext {
        let localContext = new Returning_columns_listContext(this.context, this.state);
        this.enterRule(localContext, 362, YQLParser.RULE_returning_columns_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2582;
            this.match(YQLParser.RETURNING);
            this.state = 2592;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ASTERISK:
                {
                this.state = 2583;
                this.match(YQLParser.ASTERISK);
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                {
                this.state = 2584;
                this.an_id();
                this.state = 2589;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 2585;
                    this.match(YQLParser.COMMA);
                    this.state = 2586;
                    this.an_id();
                    }
                    }
                    this.state = 2591;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_table_stmt(): Into_table_stmtContext {
        let localContext = new Into_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 364, YQLParser.RULE_into_table_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2606;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 252, this.context) ) {
            case 1:
                {
                this.state = 2594;
                this.match(YQLParser.INSERT);
                }
                break;
            case 2:
                {
                this.state = 2595;
                this.match(YQLParser.INSERT);
                this.state = 2596;
                this.match(YQLParser.OR);
                this.state = 2597;
                this.match(YQLParser.ABORT);
                }
                break;
            case 3:
                {
                this.state = 2598;
                this.match(YQLParser.INSERT);
                this.state = 2599;
                this.match(YQLParser.OR);
                this.state = 2600;
                this.match(YQLParser.REVERT);
                }
                break;
            case 4:
                {
                this.state = 2601;
                this.match(YQLParser.INSERT);
                this.state = 2602;
                this.match(YQLParser.OR);
                this.state = 2603;
                this.match(YQLParser.IGNORE);
                }
                break;
            case 5:
                {
                this.state = 2604;
                this.match(YQLParser.UPSERT);
                }
                break;
            case 6:
                {
                this.state = 2605;
                this.match(YQLParser.REPLACE);
                }
                break;
            }
            this.state = 2608;
            this.match(YQLParser.INTO);
            this.state = 2609;
            this.into_simple_table_ref();
            this.state = 2610;
            this.into_values_source();
            this.state = 2612;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 251) {
                {
                this.state = 2611;
                this.returning_columns_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_values_source(): Into_values_sourceContext {
        let localContext = new Into_values_sourceContext(this.context, this.state);
        this.enterRule(localContext, 366, YQLParser.RULE_into_values_source);
        try {
            this.state = 2620;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LPAREN:
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
            case YQLParser.VALUES:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2615;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
                case 1:
                    {
                    this.state = 2614;
                    this.pure_column_list();
                    }
                    break;
                }
                this.state = 2617;
                this.values_source();
                }
                break;
            case YQLParser.DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2618;
                this.match(YQLParser.DEFAULT);
                this.state = 2619;
                this.match(YQLParser.VALUES);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_stmt(): Values_stmtContext {
        let localContext = new Values_stmtContext(this.context, this.state);
        this.enterRule(localContext, 368, YQLParser.RULE_values_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2622;
            this.match(YQLParser.VALUES);
            this.state = 2623;
            this.values_source_row_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_source(): Values_sourceContext {
        let localContext = new Values_sourceContext(this.context, this.state);
        this.enterRule(localContext, 370, YQLParser.RULE_values_source);
        try {
            this.state = 2627;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.VALUES:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2625;
                this.values_stmt();
                }
                break;
            case YQLParser.LPAREN:
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2626;
                this.select_stmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_source_row_list(): Values_source_row_listContext {
        let localContext = new Values_source_row_listContext(this.context, this.state);
        this.enterRule(localContext, 372, YQLParser.RULE_values_source_row_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2629;
            this.values_source_row();
            this.state = 2634;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2630;
                this.match(YQLParser.COMMA);
                this.state = 2631;
                this.values_source_row();
                }
                }
                this.state = 2636;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_source_row(): Values_source_rowContext {
        let localContext = new Values_source_rowContext(this.context, this.state);
        this.enterRule(localContext, 374, YQLParser.RULE_values_source_row);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2637;
            this.match(YQLParser.LPAREN);
            this.state = 2638;
            this.expr_list();
            this.state = 2639;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_values_source(): Simple_values_sourceContext {
        let localContext = new Simple_values_sourceContext(this.context, this.state);
        this.enterRule(localContext, 376, YQLParser.RULE_simple_values_source);
        try {
            this.state = 2643;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2641;
                this.expr_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2642;
                this.select_stmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_external_data_source_stmt(): Create_external_data_source_stmtContext {
        let localContext = new Create_external_data_source_stmtContext(this.context, this.state);
        this.enterRule(localContext, 378, YQLParser.RULE_create_external_data_source_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2645;
            this.match(YQLParser.CREATE);
            this.state = 2648;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 211) {
                {
                this.state = 2646;
                this.match(YQLParser.OR);
                this.state = 2647;
                this.match(YQLParser.REPLACE);
                }
            }

            this.state = 2650;
            this.match(YQLParser.EXTERNAL);
            this.state = 2651;
            this.match(YQLParser.DATA);
            this.state = 2652;
            this.match(YQLParser.SOURCE);
            this.state = 2656;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 260, this.context) ) {
            case 1:
                {
                this.state = 2653;
                this.match(YQLParser.IF);
                this.state = 2654;
                this.match(YQLParser.NOT);
                this.state = 2655;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2658;
            this.object_ref();
            this.state = 2659;
            this.with_table_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_external_data_source_stmt(): Alter_external_data_source_stmtContext {
        let localContext = new Alter_external_data_source_stmtContext(this.context, this.state);
        this.enterRule(localContext, 380, YQLParser.RULE_alter_external_data_source_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2661;
            this.match(YQLParser.ALTER);
            this.state = 2662;
            this.match(YQLParser.EXTERNAL);
            this.state = 2663;
            this.match(YQLParser.DATA);
            this.state = 2664;
            this.match(YQLParser.SOURCE);
            this.state = 2665;
            this.object_ref();
            this.state = 2666;
            this.alter_external_data_source_action();
            this.state = 2671;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2667;
                this.match(YQLParser.COMMA);
                this.state = 2668;
                this.alter_external_data_source_action();
                }
                }
                this.state = 2673;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_external_data_source_action(): Alter_external_data_source_actionContext {
        let localContext = new Alter_external_data_source_actionContext(this.context, this.state);
        this.enterRule(localContext, 382, YQLParser.RULE_alter_external_data_source_action);
        try {
            this.state = 2677;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 262, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2674;
                this.alter_table_set_table_setting_uncompat();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2675;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2676;
                this.alter_table_reset_table_setting();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_external_data_source_stmt(): Drop_external_data_source_stmtContext {
        let localContext = new Drop_external_data_source_stmtContext(this.context, this.state);
        this.enterRule(localContext, 384, YQLParser.RULE_drop_external_data_source_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2679;
            this.match(YQLParser.DROP);
            this.state = 2680;
            this.match(YQLParser.EXTERNAL);
            this.state = 2681;
            this.match(YQLParser.DATA);
            this.state = 2682;
            this.match(YQLParser.SOURCE);
            this.state = 2685;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 263, this.context) ) {
            case 1:
                {
                this.state = 2683;
                this.match(YQLParser.IF);
                this.state = 2684;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2687;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_view_stmt(): Create_view_stmtContext {
        let localContext = new Create_view_stmtContext(this.context, this.state);
        this.enterRule(localContext, 386, YQLParser.RULE_create_view_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2689;
            this.match(YQLParser.CREATE);
            this.state = 2690;
            this.match(YQLParser.VIEW);
            this.state = 2691;
            this.object_ref();
            this.state = 2692;
            this.with_table_settings();
            this.state = 2693;
            this.match(YQLParser.AS);
            this.state = 2694;
            this.select_stmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_view_stmt(): Drop_view_stmtContext {
        let localContext = new Drop_view_stmtContext(this.context, this.state);
        this.enterRule(localContext, 388, YQLParser.RULE_drop_view_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2696;
            this.match(YQLParser.DROP);
            this.state = 2697;
            this.match(YQLParser.VIEW);
            this.state = 2698;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public upsert_object_stmt(): Upsert_object_stmtContext {
        let localContext = new Upsert_object_stmtContext(this.context, this.state);
        this.enterRule(localContext, 390, YQLParser.RULE_upsert_object_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2700;
            this.match(YQLParser.UPSERT);
            this.state = 2701;
            this.match(YQLParser.OBJECT);
            this.state = 2702;
            this.object_ref();
            this.state = 2703;
            this.match(YQLParser.LPAREN);
            this.state = 2704;
            this.match(YQLParser.TYPE);
            this.state = 2705;
            this.object_type_ref();
            this.state = 2706;
            this.match(YQLParser.RPAREN);
            this.state = 2708;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 2707;
                this.create_object_features();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_object_stmt(): Create_object_stmtContext {
        let localContext = new Create_object_stmtContext(this.context, this.state);
        this.enterRule(localContext, 392, YQLParser.RULE_create_object_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2710;
            this.match(YQLParser.CREATE);
            this.state = 2711;
            this.match(YQLParser.OBJECT);
            this.state = 2715;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 265, this.context) ) {
            case 1:
                {
                this.state = 2712;
                this.match(YQLParser.IF);
                this.state = 2713;
                this.match(YQLParser.NOT);
                this.state = 2714;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2717;
            this.object_ref();
            this.state = 2718;
            this.match(YQLParser.LPAREN);
            this.state = 2719;
            this.match(YQLParser.TYPE);
            this.state = 2720;
            this.object_type_ref();
            this.state = 2721;
            this.match(YQLParser.RPAREN);
            this.state = 2723;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 2722;
                this.create_object_features();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_object_features(): Create_object_featuresContext {
        let localContext = new Create_object_featuresContext(this.context, this.state);
        this.enterRule(localContext, 394, YQLParser.RULE_create_object_features);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2725;
            this.match(YQLParser.WITH);
            this.state = 2726;
            this.object_features();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_object_stmt(): Alter_object_stmtContext {
        let localContext = new Alter_object_stmtContext(this.context, this.state);
        this.enterRule(localContext, 396, YQLParser.RULE_alter_object_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2728;
            this.match(YQLParser.ALTER);
            this.state = 2729;
            this.match(YQLParser.OBJECT);
            this.state = 2730;
            this.object_ref();
            this.state = 2731;
            this.match(YQLParser.LPAREN);
            this.state = 2732;
            this.match(YQLParser.TYPE);
            this.state = 2733;
            this.object_type_ref();
            this.state = 2734;
            this.match(YQLParser.RPAREN);
            this.state = 2735;
            this.alter_object_features();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_object_features(): Alter_object_featuresContext {
        let localContext = new Alter_object_featuresContext(this.context, this.state);
        this.enterRule(localContext, 398, YQLParser.RULE_alter_object_features);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2737;
            this.match(YQLParser.SET);
            this.state = 2738;
            this.object_features();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_object_stmt(): Drop_object_stmtContext {
        let localContext = new Drop_object_stmtContext(this.context, this.state);
        this.enterRule(localContext, 400, YQLParser.RULE_drop_object_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2740;
            this.match(YQLParser.DROP);
            this.state = 2741;
            this.match(YQLParser.OBJECT);
            this.state = 2744;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 267, this.context) ) {
            case 1:
                {
                this.state = 2742;
                this.match(YQLParser.IF);
                this.state = 2743;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2746;
            this.object_ref();
            this.state = 2747;
            this.match(YQLParser.LPAREN);
            this.state = 2748;
            this.match(YQLParser.TYPE);
            this.state = 2749;
            this.object_type_ref();
            this.state = 2750;
            this.match(YQLParser.RPAREN);
            this.state = 2752;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 2751;
                this.drop_object_features();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_object_features(): Drop_object_featuresContext {
        let localContext = new Drop_object_featuresContext(this.context, this.state);
        this.enterRule(localContext, 402, YQLParser.RULE_drop_object_features);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2754;
            this.match(YQLParser.WITH);
            this.state = 2755;
            this.object_features();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_feature_value(): Object_feature_valueContext {
        let localContext = new Object_feature_valueContext(this.context, this.state);
        this.enterRule(localContext, 404, YQLParser.RULE_object_feature_value);
        try {
            this.state = 2760;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2757;
                this.id_or_type();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2758;
                this.bind_parameter();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2759;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_feature_kv(): Object_feature_kvContext {
        let localContext = new Object_feature_kvContext(this.context, this.state);
        this.enterRule(localContext, 406, YQLParser.RULE_object_feature_kv);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2762;
            this.an_id_or_type();
            this.state = 2763;
            this.match(YQLParser.EQUALS);
            this.state = 2764;
            this.object_feature_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_feature_flag(): Object_feature_flagContext {
        let localContext = new Object_feature_flagContext(this.context, this.state);
        this.enterRule(localContext, 408, YQLParser.RULE_object_feature_flag);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2766;
            this.an_id_or_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_feature(): Object_featureContext {
        let localContext = new Object_featureContext(this.context, this.state);
        this.enterRule(localContext, 410, YQLParser.RULE_object_feature);
        try {
            this.state = 2770;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 270, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2768;
                this.object_feature_kv();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2769;
                this.object_feature_flag();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_features(): Object_featuresContext {
        let localContext = new Object_featuresContext(this.context, this.state);
        this.enterRule(localContext, 412, YQLParser.RULE_object_features);
        let _la: number;
        try {
            this.state = 2784;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2772;
                this.object_feature();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2773;
                this.match(YQLParser.LPAREN);
                this.state = 2774;
                this.object_feature();
                this.state = 2779;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 2775;
                    this.match(YQLParser.COMMA);
                    this.state = 2776;
                    this.object_feature();
                    }
                    }
                    this.state = 2781;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2782;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_type_ref(): Object_type_refContext {
        let localContext = new Object_type_refContext(this.context, this.state);
        this.enterRule(localContext, 414, YQLParser.RULE_object_type_ref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2786;
            this.an_id_or_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_table_stmt(): Create_table_stmtContext {
        let localContext = new Create_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 416, YQLParser.RULE_create_table_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2788;
            this.match(YQLParser.CREATE);
            this.state = 2791;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 211) {
                {
                this.state = 2789;
                this.match(YQLParser.OR);
                this.state = 2790;
                this.match(YQLParser.REPLACE);
                }
            }

            this.state = 2801;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.TABLE:
                {
                this.state = 2793;
                this.match(YQLParser.TABLE);
                }
                break;
            case YQLParser.TABLESTORE:
                {
                this.state = 2794;
                this.match(YQLParser.TABLESTORE);
                }
                break;
            case YQLParser.EXTERNAL:
                {
                this.state = 2795;
                this.match(YQLParser.EXTERNAL);
                this.state = 2796;
                this.match(YQLParser.TABLE);
                }
                break;
            case YQLParser.TEMP:
                {
                this.state = 2797;
                this.match(YQLParser.TEMP);
                this.state = 2798;
                this.match(YQLParser.TABLE);
                }
                break;
            case YQLParser.TEMPORARY:
                {
                this.state = 2799;
                this.match(YQLParser.TEMPORARY);
                this.state = 2800;
                this.match(YQLParser.TABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2806;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 275, this.context) ) {
            case 1:
                {
                this.state = 2803;
                this.match(YQLParser.IF);
                this.state = 2804;
                this.match(YQLParser.NOT);
                this.state = 2805;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 2808;
            this.simple_table_ref();
            this.state = 2809;
            this.match(YQLParser.LPAREN);
            this.state = 2810;
            this.create_table_entry();
            this.state = 2815;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 276, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2811;
                    this.match(YQLParser.COMMA);
                    this.state = 2812;
                    this.create_table_entry();
                    }
                    }
                }
                this.state = 2817;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 276, this.context);
            }
            this.state = 2819;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 2818;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 2821;
            this.match(YQLParser.RPAREN);
            this.state = 2823;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 164) {
                {
                this.state = 2822;
                this.table_inherits();
                }
            }

            this.state = 2826;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 217) {
                {
                this.state = 2825;
                this.table_partition_by();
                }
            }

            this.state = 2829;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 2828;
                this.with_table_settings();
                }
            }

            this.state = 2832;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 283) {
                {
                this.state = 2831;
                this.table_tablestore();
                }
            }

            this.state = 2835;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 2834;
                this.table_as_source();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_table_entry(): Create_table_entryContext {
        let localContext = new Create_table_entryContext(this.context, this.state);
        this.enterRule(localContext, 418, YQLParser.RULE_create_table_entry);
        try {
            this.state = 2843;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 283, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2837;
                this.column_schema();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2838;
                this.table_constraint();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2839;
                this.table_index();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2840;
                this.family_entry();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2841;
                this.changefeed();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2842;
                this.an_id_schema();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_backup_collection_stmt(): Create_backup_collection_stmtContext {
        let localContext = new Create_backup_collection_stmtContext(this.context, this.state);
        this.enterRule(localContext, 420, YQLParser.RULE_create_backup_collection_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2845;
            this.match(YQLParser.CREATE);
            this.state = 2846;
            this.backup_collection();
            this.state = 2847;
            this.match(YQLParser.WITH);
            this.state = 2848;
            this.match(YQLParser.LPAREN);
            this.state = 2849;
            this.backup_collection_settings();
            this.state = 2850;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_backup_collection_stmt(): Alter_backup_collection_stmtContext {
        let localContext = new Alter_backup_collection_stmtContext(this.context, this.state);
        this.enterRule(localContext, 422, YQLParser.RULE_alter_backup_collection_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2852;
            this.match(YQLParser.ALTER);
            this.state = 2853;
            this.backup_collection();
            this.state = 2854;
            this.alter_backup_collection_actions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_backup_collection_stmt(): Drop_backup_collection_stmtContext {
        let localContext = new Drop_backup_collection_stmtContext(this.context, this.state);
        this.enterRule(localContext, 424, YQLParser.RULE_drop_backup_collection_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2856;
            this.match(YQLParser.DROP);
            this.state = 2857;
            this.backup_collection();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_backup_collection_actions(): Alter_backup_collection_actionsContext {
        let localContext = new Alter_backup_collection_actionsContext(this.context, this.state);
        this.enterRule(localContext, 426, YQLParser.RULE_alter_backup_collection_actions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2859;
            this.alter_backup_collection_action();
            this.state = 2864;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2860;
                this.match(YQLParser.COMMA);
                this.state = 2861;
                this.alter_backup_collection_action();
                }
                }
                this.state = 2866;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_backup_collection_action(): Alter_backup_collection_actionContext {
        let localContext = new Alter_backup_collection_actionContext(this.context, this.state);
        this.enterRule(localContext, 428, YQLParser.RULE_alter_backup_collection_action);
        try {
            this.state = 2869;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2867;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case YQLParser.RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2868;
                this.alter_table_reset_table_setting();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public backup_collection(): Backup_collectionContext {
        let localContext = new Backup_collectionContext(this.context, this.state);
        this.enterRule(localContext, 430, YQLParser.RULE_backup_collection);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2871;
            this.match(YQLParser.BACKUP);
            this.state = 2872;
            this.match(YQLParser.COLLECTION);
            this.state = 2873;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public backup_collection_settings(): Backup_collection_settingsContext {
        let localContext = new Backup_collection_settingsContext(this.context, this.state);
        this.enterRule(localContext, 432, YQLParser.RULE_backup_collection_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2875;
            this.backup_collection_settings_entry();
            this.state = 2880;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2876;
                this.match(YQLParser.COMMA);
                this.state = 2877;
                this.backup_collection_settings_entry();
                }
                }
                this.state = 2882;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public backup_collection_settings_entry(): Backup_collection_settings_entryContext {
        let localContext = new Backup_collection_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 434, YQLParser.RULE_backup_collection_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2883;
            this.an_id();
            this.state = 2884;
            this.match(YQLParser.EQUALS);
            this.state = 2885;
            this.table_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_inherits(): Table_inheritsContext {
        let localContext = new Table_inheritsContext(this.context, this.state);
        this.enterRule(localContext, 436, YQLParser.RULE_table_inherits);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2887;
            this.match(YQLParser.INHERITS);
            this.state = 2888;
            this.match(YQLParser.LPAREN);
            this.state = 2889;
            this.simple_table_ref_core();
            this.state = 2894;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2890;
                this.match(YQLParser.COMMA);
                this.state = 2891;
                this.simple_table_ref_core();
                }
                }
                this.state = 2896;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2897;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_partition_by(): Table_partition_byContext {
        let localContext = new Table_partition_byContext(this.context, this.state);
        this.enterRule(localContext, 438, YQLParser.RULE_table_partition_by);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2899;
            this.match(YQLParser.PARTITION);
            this.state = 2900;
            this.match(YQLParser.BY);
            this.state = 2901;
            this.match(YQLParser.HASH);
            this.state = 2902;
            this.pure_column_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_table_settings(): With_table_settingsContext {
        let localContext = new With_table_settingsContext(this.context, this.state);
        this.enterRule(localContext, 440, YQLParser.RULE_with_table_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2904;
            this.match(YQLParser.WITH);
            this.state = 2905;
            this.match(YQLParser.LPAREN);
            this.state = 2906;
            this.table_settings_entry();
            this.state = 2911;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2907;
                this.match(YQLParser.COMMA);
                this.state = 2908;
                this.table_settings_entry();
                }
                }
                this.state = 2913;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2914;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_tablestore(): Table_tablestoreContext {
        let localContext = new Table_tablestoreContext(this.context, this.state);
        this.enterRule(localContext, 442, YQLParser.RULE_table_tablestore);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2916;
            this.match(YQLParser.TABLESTORE);
            this.state = 2917;
            this.simple_table_ref_core();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_settings_entry(): Table_settings_entryContext {
        let localContext = new Table_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 444, YQLParser.RULE_table_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2919;
            this.an_id();
            this.state = 2920;
            this.match(YQLParser.EQUALS);
            this.state = 2921;
            this.table_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_as_source(): Table_as_sourceContext {
        let localContext = new Table_as_sourceContext(this.context, this.state);
        this.enterRule(localContext, 446, YQLParser.RULE_table_as_source);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2923;
            this.match(YQLParser.AS);
            this.state = 2924;
            this.values_source();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_stmt(): Alter_table_stmtContext {
        let localContext = new Alter_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 448, YQLParser.RULE_alter_table_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2926;
            this.match(YQLParser.ALTER);
            this.state = 2927;
            this.match(YQLParser.TABLE);
            this.state = 2928;
            this.simple_table_ref();
            this.state = 2929;
            this.alter_table_action();
            this.state = 2934;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2930;
                this.match(YQLParser.COMMA);
                this.state = 2931;
                this.alter_table_action();
                }
                }
                this.state = 2936;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_action(): Alter_table_actionContext {
        let localContext = new Alter_table_actionContext(this.context, this.state);
        this.enterRule(localContext, 450, YQLParser.RULE_alter_table_action);
        try {
            this.state = 2954;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 290, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2937;
                this.alter_table_add_column();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2938;
                this.alter_table_drop_column();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2939;
                this.alter_table_alter_column();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2940;
                this.alter_table_add_column_family();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2941;
                this.alter_table_alter_column_family();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2942;
                this.alter_table_set_table_setting_uncompat();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2943;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2944;
                this.alter_table_reset_table_setting();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2945;
                this.alter_table_add_index();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2946;
                this.alter_table_drop_index();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2947;
                this.alter_table_rename_to();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2948;
                this.alter_table_add_changefeed();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2949;
                this.alter_table_alter_changefeed();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2950;
                this.alter_table_drop_changefeed();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2951;
                this.alter_table_rename_index_to();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2952;
                this.alter_table_alter_index();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2953;
                this.alter_table_alter_column_drop_not_null();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_external_table_stmt(): Alter_external_table_stmtContext {
        let localContext = new Alter_external_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 452, YQLParser.RULE_alter_external_table_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2956;
            this.match(YQLParser.ALTER);
            this.state = 2957;
            this.match(YQLParser.EXTERNAL);
            this.state = 2958;
            this.match(YQLParser.TABLE);
            this.state = 2959;
            this.simple_table_ref();
            this.state = 2960;
            this.alter_external_table_action();
            this.state = 2965;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2961;
                this.match(YQLParser.COMMA);
                this.state = 2962;
                this.alter_external_table_action();
                }
                }
                this.state = 2967;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_external_table_action(): Alter_external_table_actionContext {
        let localContext = new Alter_external_table_actionContext(this.context, this.state);
        this.enterRule(localContext, 454, YQLParser.RULE_alter_external_table_action);
        try {
            this.state = 2973;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 292, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2968;
                this.alter_table_add_column();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2969;
                this.alter_table_drop_column();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2970;
                this.alter_table_set_table_setting_uncompat();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2971;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2972;
                this.alter_table_reset_table_setting();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_store_stmt(): Alter_table_store_stmtContext {
        let localContext = new Alter_table_store_stmtContext(this.context, this.state);
        this.enterRule(localContext, 456, YQLParser.RULE_alter_table_store_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2975;
            this.match(YQLParser.ALTER);
            this.state = 2976;
            this.match(YQLParser.TABLESTORE);
            this.state = 2977;
            this.object_ref();
            this.state = 2978;
            this.alter_table_store_action();
            this.state = 2983;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 2979;
                this.match(YQLParser.COMMA);
                this.state = 2980;
                this.alter_table_store_action();
                }
                }
                this.state = 2985;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_store_action(): Alter_table_store_actionContext {
        let localContext = new Alter_table_store_actionContext(this.context, this.state);
        this.enterRule(localContext, 458, YQLParser.RULE_alter_table_store_action);
        try {
            this.state = 2988;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ADD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2986;
                this.alter_table_add_column();
                }
                break;
            case YQLParser.DROP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2987;
                this.alter_table_drop_column();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_add_column(): Alter_table_add_columnContext {
        let localContext = new Alter_table_add_columnContext(this.context, this.state);
        this.enterRule(localContext, 460, YQLParser.RULE_alter_table_add_column);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2990;
            this.match(YQLParser.ADD);
            this.state = 2992;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 79) {
                {
                this.state = 2991;
                this.match(YQLParser.COLUMN);
                }
            }

            this.state = 2994;
            this.column_schema();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_drop_column(): Alter_table_drop_columnContext {
        let localContext = new Alter_table_drop_columnContext(this.context, this.state);
        this.enterRule(localContext, 462, YQLParser.RULE_alter_table_drop_column);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2996;
            this.match(YQLParser.DROP);
            this.state = 2998;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 296, this.context) ) {
            case 1:
                {
                this.state = 2997;
                this.match(YQLParser.COLUMN);
                }
                break;
            }
            this.state = 3000;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_column(): Alter_table_alter_columnContext {
        let localContext = new Alter_table_alter_columnContext(this.context, this.state);
        this.enterRule(localContext, 464, YQLParser.RULE_alter_table_alter_column);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3002;
            this.match(YQLParser.ALTER);
            this.state = 3003;
            this.match(YQLParser.COLUMN);
            this.state = 3004;
            this.an_id();
            this.state = 3005;
            this.match(YQLParser.SET);
            this.state = 3006;
            this.family_relation();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_column_drop_not_null(): Alter_table_alter_column_drop_not_nullContext {
        let localContext = new Alter_table_alter_column_drop_not_nullContext(this.context, this.state);
        this.enterRule(localContext, 466, YQLParser.RULE_alter_table_alter_column_drop_not_null);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3008;
            this.match(YQLParser.ALTER);
            this.state = 3009;
            this.match(YQLParser.COLUMN);
            this.state = 3010;
            this.an_id();
            this.state = 3011;
            this.match(YQLParser.DROP);
            this.state = 3012;
            this.match(YQLParser.NOT);
            this.state = 3013;
            this.match(YQLParser.NULL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_add_column_family(): Alter_table_add_column_familyContext {
        let localContext = new Alter_table_add_column_familyContext(this.context, this.state);
        this.enterRule(localContext, 468, YQLParser.RULE_alter_table_add_column_family);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3015;
            this.match(YQLParser.ADD);
            this.state = 3016;
            this.family_entry();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_column_family(): Alter_table_alter_column_familyContext {
        let localContext = new Alter_table_alter_column_familyContext(this.context, this.state);
        this.enterRule(localContext, 470, YQLParser.RULE_alter_table_alter_column_family);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3018;
            this.match(YQLParser.ALTER);
            this.state = 3019;
            this.match(YQLParser.FAMILY);
            this.state = 3020;
            this.an_id();
            this.state = 3021;
            this.match(YQLParser.SET);
            this.state = 3022;
            this.an_id();
            this.state = 3023;
            this.family_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext {
        let localContext = new Alter_table_set_table_setting_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 472, YQLParser.RULE_alter_table_set_table_setting_uncompat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3025;
            this.match(YQLParser.SET);
            this.state = 3026;
            this.an_id();
            this.state = 3027;
            this.table_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext {
        let localContext = new Alter_table_set_table_setting_compatContext(this.context, this.state);
        this.enterRule(localContext, 474, YQLParser.RULE_alter_table_set_table_setting_compat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3029;
            this.match(YQLParser.SET);
            this.state = 3030;
            this.match(YQLParser.LPAREN);
            this.state = 3031;
            this.alter_table_setting_entry();
            this.state = 3036;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3032;
                this.match(YQLParser.COMMA);
                this.state = 3033;
                this.alter_table_setting_entry();
                }
                }
                this.state = 3038;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3039;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext {
        let localContext = new Alter_table_reset_table_settingContext(this.context, this.state);
        this.enterRule(localContext, 476, YQLParser.RULE_alter_table_reset_table_setting);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3041;
            this.match(YQLParser.RESET);
            this.state = 3042;
            this.match(YQLParser.LPAREN);
            this.state = 3043;
            this.an_id();
            this.state = 3048;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3044;
                this.match(YQLParser.COMMA);
                this.state = 3045;
                this.an_id();
                }
                }
                this.state = 3050;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3051;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_add_index(): Alter_table_add_indexContext {
        let localContext = new Alter_table_add_indexContext(this.context, this.state);
        this.enterRule(localContext, 478, YQLParser.RULE_alter_table_add_index);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3053;
            this.match(YQLParser.ADD);
            this.state = 3054;
            this.table_index();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_drop_index(): Alter_table_drop_indexContext {
        let localContext = new Alter_table_drop_indexContext(this.context, this.state);
        this.enterRule(localContext, 480, YQLParser.RULE_alter_table_drop_index);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3056;
            this.match(YQLParser.DROP);
            this.state = 3057;
            this.match(YQLParser.INDEX);
            this.state = 3058;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_rename_to(): Alter_table_rename_toContext {
        let localContext = new Alter_table_rename_toContext(this.context, this.state);
        this.enterRule(localContext, 482, YQLParser.RULE_alter_table_rename_to);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3060;
            this.match(YQLParser.RENAME);
            this.state = 3061;
            this.match(YQLParser.TO);
            this.state = 3062;
            this.an_id_table();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_rename_index_to(): Alter_table_rename_index_toContext {
        let localContext = new Alter_table_rename_index_toContext(this.context, this.state);
        this.enterRule(localContext, 484, YQLParser.RULE_alter_table_rename_index_to);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3064;
            this.match(YQLParser.RENAME);
            this.state = 3065;
            this.match(YQLParser.INDEX);
            this.state = 3066;
            this.an_id();
            this.state = 3067;
            this.match(YQLParser.TO);
            this.state = 3068;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_add_changefeed(): Alter_table_add_changefeedContext {
        let localContext = new Alter_table_add_changefeedContext(this.context, this.state);
        this.enterRule(localContext, 486, YQLParser.RULE_alter_table_add_changefeed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3070;
            this.match(YQLParser.ADD);
            this.state = 3071;
            this.changefeed();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_changefeed(): Alter_table_alter_changefeedContext {
        let localContext = new Alter_table_alter_changefeedContext(this.context, this.state);
        this.enterRule(localContext, 488, YQLParser.RULE_alter_table_alter_changefeed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3073;
            this.match(YQLParser.ALTER);
            this.state = 3074;
            this.match(YQLParser.CHANGEFEED);
            this.state = 3075;
            this.an_id();
            this.state = 3076;
            this.changefeed_alter_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_drop_changefeed(): Alter_table_drop_changefeedContext {
        let localContext = new Alter_table_drop_changefeedContext(this.context, this.state);
        this.enterRule(localContext, 490, YQLParser.RULE_alter_table_drop_changefeed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3078;
            this.match(YQLParser.DROP);
            this.state = 3079;
            this.match(YQLParser.CHANGEFEED);
            this.state = 3080;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_index(): Alter_table_alter_indexContext {
        let localContext = new Alter_table_alter_indexContext(this.context, this.state);
        this.enterRule(localContext, 492, YQLParser.RULE_alter_table_alter_index);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3082;
            this.match(YQLParser.ALTER);
            this.state = 3083;
            this.match(YQLParser.INDEX);
            this.state = 3084;
            this.an_id();
            this.state = 3085;
            this.alter_table_alter_index_action();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_schema(): Column_schemaContext {
        let localContext = new Column_schemaContext(this.context, this.state);
        this.enterRule(localContext, 494, YQLParser.RULE_column_schema);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3087;
            this.an_id_schema();
            this.state = 3088;
            this.type_name_or_bind();
            this.state = 3090;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 136) {
                {
                this.state = 3089;
                this.family_relation();
                }
            }

            this.state = 3092;
            this.opt_column_constraints();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_relation(): Family_relationContext {
        let localContext = new Family_relationContext(this.context, this.state);
        this.enterRule(localContext, 496, YQLParser.RULE_family_relation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3094;
            this.match(YQLParser.FAMILY);
            this.state = 3095;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_column_constraints(): Opt_column_constraintsContext {
        let localContext = new Opt_column_constraintsContext(this.context, this.state);
        this.enterRule(localContext, 498, YQLParser.RULE_opt_column_constraints);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3101;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 198 || _la === 200) {
                {
                this.state = 3098;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 3097;
                    this.match(YQLParser.NOT);
                    }
                }

                this.state = 3100;
                this.match(YQLParser.NULL);
                }
            }

            this.state = 3105;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 3103;
                this.match(YQLParser.DEFAULT);
                this.state = 3104;
                this.expr();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_order_by_specification(): Column_order_by_specificationContext {
        let localContext = new Column_order_by_specificationContext(this.context, this.state);
        this.enterRule(localContext, 500, YQLParser.RULE_column_order_by_specification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3107;
            this.an_id();
            this.state = 3109;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55 || _la === 105) {
                {
                this.state = 3108;
                _la = this.tokenStream.LA(1);
                if(!(_la === 55 || _la === 105)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_constraint(): Table_constraintContext {
        let localContext = new Table_constraintContext(this.context, this.state);
        this.enterRule(localContext, 502, YQLParser.RULE_table_constraint);
        let _la: number;
        try {
            this.state = 3150;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.PRIMARY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3111;
                this.match(YQLParser.PRIMARY);
                this.state = 3112;
                this.match(YQLParser.KEY);
                this.state = 3113;
                this.match(YQLParser.LPAREN);
                this.state = 3114;
                this.an_id();
                this.state = 3119;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3115;
                    this.match(YQLParser.COMMA);
                    this.state = 3116;
                    this.an_id();
                    }
                    }
                    this.state = 3121;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3122;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.PARTITION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3124;
                this.match(YQLParser.PARTITION);
                this.state = 3125;
                this.match(YQLParser.BY);
                this.state = 3126;
                this.match(YQLParser.LPAREN);
                this.state = 3127;
                this.an_id();
                this.state = 3132;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3128;
                    this.match(YQLParser.COMMA);
                    this.state = 3129;
                    this.an_id();
                    }
                    }
                    this.state = 3134;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3135;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.ORDER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3137;
                this.match(YQLParser.ORDER);
                this.state = 3138;
                this.match(YQLParser.BY);
                this.state = 3139;
                this.match(YQLParser.LPAREN);
                this.state = 3140;
                this.column_order_by_specification();
                this.state = 3145;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3141;
                    this.match(YQLParser.COMMA);
                    this.state = 3142;
                    this.column_order_by_specification();
                    }
                    }
                    this.state = 3147;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3148;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_index(): Table_indexContext {
        let localContext = new Table_indexContext(this.context, this.state);
        this.enterRule(localContext, 504, YQLParser.RULE_table_index);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3152;
            this.match(YQLParser.INDEX);
            this.state = 3153;
            this.an_id();
            this.state = 3154;
            this.table_index_type();
            this.state = 3155;
            this.match(YQLParser.ON);
            this.state = 3156;
            this.match(YQLParser.LPAREN);
            this.state = 3157;
            this.an_id_schema();
            this.state = 3162;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3158;
                this.match(YQLParser.COMMA);
                this.state = 3159;
                this.an_id_schema();
                }
                }
                this.state = 3164;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3165;
            this.match(YQLParser.RPAREN);
            this.state = 3178;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 88) {
                {
                this.state = 3166;
                this.match(YQLParser.COVER);
                this.state = 3167;
                this.match(YQLParser.LPAREN);
                this.state = 3168;
                this.an_id_schema();
                this.state = 3173;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3169;
                    this.match(YQLParser.COMMA);
                    this.state = 3170;
                    this.an_id_schema();
                    }
                    }
                    this.state = 3175;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3176;
                this.match(YQLParser.RPAREN);
                }
            }

            this.state = 3181;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 3180;
                this.with_index_settings();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_index_type(): Table_index_typeContext {
        let localContext = new Table_index_typeContext(this.context, this.state);
        this.enterRule(localContext, 506, YQLParser.RULE_table_index_type);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3185;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.GLOBAL:
                {
                this.state = 3183;
                this.global_index();
                }
                break;
            case YQLParser.LOCAL:
                {
                this.state = 3184;
                this.local_index();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3189;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 306) {
                {
                this.state = 3187;
                this.match(YQLParser.USING);
                this.state = 3188;
                this.index_subtype();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public global_index(): Global_indexContext {
        let localContext = new Global_indexContext(this.context, this.state);
        this.enterRule(localContext, 508, YQLParser.RULE_global_index);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3191;
            this.match(YQLParser.GLOBAL);
            this.state = 3193;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 299) {
                {
                this.state = 3192;
                this.match(YQLParser.UNIQUE);
                }
            }

            this.state = 3196;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 58 || _la === 278) {
                {
                this.state = 3195;
                _la = this.tokenStream.LA(1);
                if(!(_la === 58 || _la === 278)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public local_index(): Local_indexContext {
        let localContext = new Local_indexContext(this.context, this.state);
        this.enterRule(localContext, 510, YQLParser.RULE_local_index);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3198;
            this.match(YQLParser.LOCAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_subtype(): Index_subtypeContext {
        let localContext = new Index_subtypeContext(this.context, this.state);
        this.enterRule(localContext, 512, YQLParser.RULE_index_subtype);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3200;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_index_settings(): With_index_settingsContext {
        let localContext = new With_index_settingsContext(this.context, this.state);
        this.enterRule(localContext, 514, YQLParser.RULE_with_index_settings);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3202;
            this.match(YQLParser.WITH);
            this.state = 3203;
            this.match(YQLParser.LPAREN);
            this.state = 3204;
            this.index_setting_entry();
            this.state = 3209;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 316, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3205;
                    this.match(YQLParser.COMMA);
                    this.state = 3206;
                    this.index_setting_entry();
                    }
                    }
                }
                this.state = 3211;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 316, this.context);
            }
            this.state = 3213;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 3212;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 3215;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_setting_entry(): Index_setting_entryContext {
        let localContext = new Index_setting_entryContext(this.context, this.state);
        this.enterRule(localContext, 516, YQLParser.RULE_index_setting_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3217;
            this.an_id();
            this.state = 3218;
            this.match(YQLParser.EQUALS);
            this.state = 3219;
            this.index_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_setting_value(): Index_setting_valueContext {
        let localContext = new Index_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 518, YQLParser.RULE_index_setting_value);
        try {
            this.state = 3225;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3221;
                this.id_or_type();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3222;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case YQLParser.DIGITS:
            case YQLParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3223;
                this.integer();
                }
                break;
            case YQLParser.FALSE:
            case YQLParser.TRUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3224;
                this.bool_value();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed(): ChangefeedContext {
        let localContext = new ChangefeedContext(this.context, this.state);
        this.enterRule(localContext, 520, YQLParser.RULE_changefeed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3227;
            this.match(YQLParser.CHANGEFEED);
            this.state = 3228;
            this.an_id();
            this.state = 3229;
            this.match(YQLParser.WITH);
            this.state = 3230;
            this.match(YQLParser.LPAREN);
            this.state = 3231;
            this.changefeed_settings();
            this.state = 3232;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed_settings(): Changefeed_settingsContext {
        let localContext = new Changefeed_settingsContext(this.context, this.state);
        this.enterRule(localContext, 522, YQLParser.RULE_changefeed_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3234;
            this.changefeed_settings_entry();
            this.state = 3239;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3235;
                this.match(YQLParser.COMMA);
                this.state = 3236;
                this.changefeed_settings_entry();
                }
                }
                this.state = 3241;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed_settings_entry(): Changefeed_settings_entryContext {
        let localContext = new Changefeed_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 524, YQLParser.RULE_changefeed_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3242;
            this.an_id();
            this.state = 3243;
            this.match(YQLParser.EQUALS);
            this.state = 3244;
            this.changefeed_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed_setting_value(): Changefeed_setting_valueContext {
        let localContext = new Changefeed_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 526, YQLParser.RULE_changefeed_setting_value);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3246;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public changefeed_alter_settings(): Changefeed_alter_settingsContext {
        let localContext = new Changefeed_alter_settingsContext(this.context, this.state);
        this.enterRule(localContext, 528, YQLParser.RULE_changefeed_alter_settings);
        try {
            this.state = 3254;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DISABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3248;
                this.match(YQLParser.DISABLE);
                }
                break;
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3249;
                this.match(YQLParser.SET);
                this.state = 3250;
                this.match(YQLParser.LPAREN);
                this.state = 3251;
                this.changefeed_settings();
                this.state = 3252;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_setting_entry(): Alter_table_setting_entryContext {
        let localContext = new Alter_table_setting_entryContext(this.context, this.state);
        this.enterRule(localContext, 530, YQLParser.RULE_alter_table_setting_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3256;
            this.an_id();
            this.state = 3257;
            this.match(YQLParser.EQUALS);
            this.state = 3258;
            this.table_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_setting_value(): Table_setting_valueContext {
        let localContext = new Table_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 532, YQLParser.RULE_table_setting_value);
        let _la: number;
        try {
            this.state = 3272;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 322, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3260;
                this.id();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3261;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3262;
                this.integer();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3263;
                this.split_boundaries();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3264;
                this.expr();
                this.state = 3265;
                this.match(YQLParser.ON);
                this.state = 3266;
                this.an_id();
                this.state = 3269;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 3267;
                    this.match(YQLParser.AS);
                    this.state = 3268;
                    _la = this.tokenStream.LA(1);
                    if(!(((((_la - 191)) & ~0x1F) === 0 && ((1 << (_la - 191)) & 11) !== 0) || _la === 263)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3271;
                this.bool_value();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_entry(): Family_entryContext {
        let localContext = new Family_entryContext(this.context, this.state);
        this.enterRule(localContext, 534, YQLParser.RULE_family_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3274;
            this.match(YQLParser.FAMILY);
            this.state = 3275;
            this.an_id();
            this.state = 3276;
            this.family_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_settings(): Family_settingsContext {
        let localContext = new Family_settingsContext(this.context, this.state);
        this.enterRule(localContext, 536, YQLParser.RULE_family_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3278;
            this.match(YQLParser.LPAREN);
            this.state = 3287;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 43)) & ~0x1F) === 0 && ((1 << (_la - 43)) & 4026007551) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 4294967295) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4026515453) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294966781) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294959103) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 4294967167) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & 4294965119) !== 0) || ((((_la - 268)) & ~0x1F) === 0 && ((1 << (_la - 268)) & 4194238431) !== 0) || ((((_la - 300)) & ~0x1F) === 0 && ((1 << (_la - 300)) & 4193791) !== 0)) {
                {
                this.state = 3279;
                this.family_settings_entry();
                this.state = 3284;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3280;
                    this.match(YQLParser.COMMA);
                    this.state = 3281;
                    this.family_settings_entry();
                    }
                    }
                    this.state = 3286;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3289;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_settings_entry(): Family_settings_entryContext {
        let localContext = new Family_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 538, YQLParser.RULE_family_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3291;
            this.an_id();
            this.state = 3292;
            this.match(YQLParser.EQUALS);
            this.state = 3293;
            this.family_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public family_setting_value(): Family_setting_valueContext {
        let localContext = new Family_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 540, YQLParser.RULE_family_setting_value);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3295;
            this.match(YQLParser.STRING_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public split_boundaries(): Split_boundariesContext {
        let localContext = new Split_boundariesContext(this.context, this.state);
        this.enterRule(localContext, 542, YQLParser.RULE_split_boundaries);
        let _la: number;
        try {
            this.state = 3309;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 326, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3297;
                this.match(YQLParser.LPAREN);
                this.state = 3298;
                this.literal_value_list();
                this.state = 3303;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3299;
                    this.match(YQLParser.COMMA);
                    this.state = 3300;
                    this.literal_value_list();
                    }
                    }
                    this.state = 3305;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3306;
                this.match(YQLParser.RPAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3308;
                this.literal_value_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literal_value_list(): Literal_value_listContext {
        let localContext = new Literal_value_listContext(this.context, this.state);
        this.enterRule(localContext, 544, YQLParser.RULE_literal_value_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3311;
            this.match(YQLParser.LPAREN);
            this.state = 3312;
            this.literal_value();
            this.state = 3317;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3313;
                this.match(YQLParser.COMMA);
                this.state = 3314;
                this.literal_value();
                }
                }
                this.state = 3319;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3320;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_alter_index_action(): Alter_table_alter_index_actionContext {
        let localContext = new Alter_table_alter_index_actionContext(this.context, this.state);
        this.enterRule(localContext, 546, YQLParser.RULE_alter_table_alter_index_action);
        try {
            this.state = 3325;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 328, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3322;
                this.alter_table_set_table_setting_uncompat();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3323;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3324;
                this.alter_table_reset_table_setting();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_table_stmt(): Drop_table_stmtContext {
        let localContext = new Drop_table_stmtContext(this.context, this.state);
        this.enterRule(localContext, 548, YQLParser.RULE_drop_table_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3327;
            this.match(YQLParser.DROP);
            this.state = 3332;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.TABLE:
                {
                this.state = 3328;
                this.match(YQLParser.TABLE);
                }
                break;
            case YQLParser.TABLESTORE:
                {
                this.state = 3329;
                this.match(YQLParser.TABLESTORE);
                }
                break;
            case YQLParser.EXTERNAL:
                {
                this.state = 3330;
                this.match(YQLParser.EXTERNAL);
                this.state = 3331;
                this.match(YQLParser.TABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3336;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 330, this.context) ) {
            case 1:
                {
                this.state = 3334;
                this.match(YQLParser.IF);
                this.state = 3335;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 3338;
            this.simple_table_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_user_stmt(): Create_user_stmtContext {
        let localContext = new Create_user_stmtContext(this.context, this.state);
        this.enterRule(localContext, 550, YQLParser.RULE_create_user_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3340;
            this.match(YQLParser.CREATE);
            this.state = 3341;
            this.match(YQLParser.USER);
            this.state = 3342;
            this.role_name();
            this.state = 3344;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119 || _la === 219) {
                {
                this.state = 3343;
                this.create_user_option();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_user_stmt(): Alter_user_stmtContext {
        let localContext = new Alter_user_stmtContext(this.context, this.state);
        this.enterRule(localContext, 552, YQLParser.RULE_alter_user_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3346;
            this.match(YQLParser.ALTER);
            this.state = 3347;
            this.match(YQLParser.USER);
            this.state = 3348;
            this.role_name();
            this.state = 3356;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ENCRYPTED:
            case YQLParser.PASSWORD:
            case YQLParser.WITH:
                {
                this.state = 3350;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 315) {
                    {
                    this.state = 3349;
                    this.match(YQLParser.WITH);
                    }
                }

                this.state = 3352;
                this.create_user_option();
                }
                break;
            case YQLParser.RENAME:
                {
                this.state = 3353;
                this.match(YQLParser.RENAME);
                this.state = 3354;
                this.match(YQLParser.TO);
                this.state = 3355;
                this.role_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_group_stmt(): Create_group_stmtContext {
        let localContext = new Create_group_stmtContext(this.context, this.state);
        this.enterRule(localContext, 554, YQLParser.RULE_create_group_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3358;
            this.match(YQLParser.CREATE);
            this.state = 3359;
            this.match(YQLParser.GROUP);
            this.state = 3360;
            this.role_name();
            this.state = 3374;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 3361;
                this.match(YQLParser.WITH);
                this.state = 3362;
                this.match(YQLParser.USER);
                this.state = 3363;
                this.role_name();
                this.state = 3368;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 334, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3364;
                        this.match(YQLParser.COMMA);
                        this.state = 3365;
                        this.role_name();
                        }
                        }
                    }
                    this.state = 3370;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 334, this.context);
                }
                this.state = 3372;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3371;
                    this.match(YQLParser.COMMA);
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_group_stmt(): Alter_group_stmtContext {
        let localContext = new Alter_group_stmtContext(this.context, this.state);
        this.enterRule(localContext, 556, YQLParser.RULE_alter_group_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3376;
            this.match(YQLParser.ALTER);
            this.state = 3377;
            this.match(YQLParser.GROUP);
            this.state = 3378;
            this.role_name();
            this.state = 3395;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ADD:
            case YQLParser.DROP:
                {
                this.state = 3379;
                _la = this.tokenStream.LA(1);
                if(!(_la === 45 || _la === 114)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3380;
                this.match(YQLParser.USER);
                this.state = 3381;
                this.role_name();
                this.state = 3386;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 337, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3382;
                        this.match(YQLParser.COMMA);
                        this.state = 3383;
                        this.role_name();
                        }
                        }
                    }
                    this.state = 3388;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 337, this.context);
                }
                this.state = 3390;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3389;
                    this.match(YQLParser.COMMA);
                    }
                }

                }
                break;
            case YQLParser.RENAME:
                {
                this.state = 3392;
                this.match(YQLParser.RENAME);
                this.state = 3393;
                this.match(YQLParser.TO);
                this.state = 3394;
                this.role_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_role_stmt(): Drop_role_stmtContext {
        let localContext = new Drop_role_stmtContext(this.context, this.state);
        this.enterRule(localContext, 558, YQLParser.RULE_drop_role_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3397;
            this.match(YQLParser.DROP);
            this.state = 3398;
            _la = this.tokenStream.LA(1);
            if(!(_la === 150 || _la === 305)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3401;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 340, this.context) ) {
            case 1:
                {
                this.state = 3399;
                this.match(YQLParser.IF);
                this.state = 3400;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 3403;
            this.role_name();
            this.state = 3408;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 341, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3404;
                    this.match(YQLParser.COMMA);
                    this.state = 3405;
                    this.role_name();
                    }
                    }
                }
                this.state = 3410;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 341, this.context);
            }
            this.state = 3412;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 3411;
                this.match(YQLParser.COMMA);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public role_name(): Role_nameContext {
        let localContext = new Role_nameContext(this.context, this.state);
        this.enterRule(localContext, 560, YQLParser.RULE_role_name);
        try {
            this.state = 3416;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3414;
                this.an_id_or_type();
                }
                break;
            case YQLParser.DOLLAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3415;
                this.bind_parameter();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_user_option(): Create_user_optionContext {
        let localContext = new Create_user_optionContext(this.context, this.state);
        this.enterRule(localContext, 562, YQLParser.RULE_create_user_option);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3419;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 3418;
                this.match(YQLParser.ENCRYPTED);
                }
            }

            this.state = 3421;
            this.match(YQLParser.PASSWORD);
            this.state = 3422;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grant_permissions_stmt(): Grant_permissions_stmtContext {
        let localContext = new Grant_permissions_stmtContext(this.context, this.state);
        this.enterRule(localContext, 564, YQLParser.RULE_grant_permissions_stmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3424;
            this.match(YQLParser.GRANT);
            this.state = 3425;
            this.permission_name_target();
            this.state = 3426;
            this.match(YQLParser.ON);
            this.state = 3427;
            this.an_id_schema();
            this.state = 3432;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3428;
                this.match(YQLParser.COMMA);
                this.state = 3429;
                this.an_id_schema();
                }
                }
                this.state = 3434;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3435;
            this.match(YQLParser.TO);
            this.state = 3436;
            this.role_name();
            this.state = 3441;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 346, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3437;
                    this.match(YQLParser.COMMA);
                    this.state = 3438;
                    this.role_name();
                    }
                    }
                }
                this.state = 3443;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 346, this.context);
            }
            this.state = 3445;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 3444;
                this.match(YQLParser.COMMA);
                }
            }

            this.state = 3450;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 3447;
                this.match(YQLParser.WITH);
                this.state = 3448;
                this.match(YQLParser.GRANT);
                this.state = 3449;
                this.match(YQLParser.OPTION);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revoke_permissions_stmt(): Revoke_permissions_stmtContext {
        let localContext = new Revoke_permissions_stmtContext(this.context, this.state);
        this.enterRule(localContext, 566, YQLParser.RULE_revoke_permissions_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3452;
            this.match(YQLParser.REVOKE);
            this.state = 3456;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 349, this.context) ) {
            case 1:
                {
                this.state = 3453;
                this.match(YQLParser.GRANT);
                this.state = 3454;
                this.match(YQLParser.OPTION);
                this.state = 3455;
                this.match(YQLParser.FOR);
                }
                break;
            }
            this.state = 3458;
            this.permission_name_target();
            this.state = 3459;
            this.match(YQLParser.ON);
            this.state = 3460;
            this.an_id_schema();
            this.state = 3465;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3461;
                this.match(YQLParser.COMMA);
                this.state = 3462;
                this.an_id_schema();
                }
                }
                this.state = 3467;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3468;
            this.match(YQLParser.FROM);
            this.state = 3469;
            this.role_name();
            this.state = 3474;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3470;
                this.match(YQLParser.COMMA);
                this.state = 3471;
                this.role_name();
                }
                }
                this.state = 3476;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public permission_id(): Permission_idContext {
        let localContext = new Permission_idContext(this.context, this.state);
        this.enterRule(localContext, 568, YQLParser.RULE_permission_id);
        let _la: number;
        try {
            this.state = 3501;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.CONNECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3477;
                this.match(YQLParser.CONNECT);
                }
                break;
            case YQLParser.LIST:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3478;
                this.match(YQLParser.LIST);
                }
                break;
            case YQLParser.INSERT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3479;
                this.match(YQLParser.INSERT);
                }
                break;
            case YQLParser.MANAGE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3480;
                this.match(YQLParser.MANAGE);
                }
                break;
            case YQLParser.DROP:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3481;
                this.match(YQLParser.DROP);
                }
                break;
            case YQLParser.GRANT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3482;
                this.match(YQLParser.GRANT);
                }
                break;
            case YQLParser.MODIFY:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3483;
                this.match(YQLParser.MODIFY);
                this.state = 3484;
                _la = this.tokenStream.LA(1);
                if(!(_la === 60 || _la === 281)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case YQLParser.ERASE:
            case YQLParser.UPDATE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3485;
                _la = this.tokenStream.LA(1);
                if(!(_la === 122 || _la === 302)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3486;
                this.match(YQLParser.ROW);
                }
                break;
            case YQLParser.ALTER:
            case YQLParser.DESCRIBE:
            case YQLParser.REMOVE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3487;
                _la = this.tokenStream.LA(1);
                if(!(_la === 48 || _la === 106 || _la === 240)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3488;
                this.match(YQLParser.SCHEMA);
                }
                break;
            case YQLParser.SELECT:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3489;
                this.match(YQLParser.SELECT);
                this.state = 3491;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 60 || _la === 258 || _la === 281) {
                    {
                    this.state = 3490;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 60 || _la === 258 || _la === 281)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case YQLParser.FULL:
            case YQLParser.USE:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3493;
                _la = this.tokenStream.LA(1);
                if(!(_la === 145 || _la === 304)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3495;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 181) {
                    {
                    this.state = 3494;
                    this.match(YQLParser.LEGACY);
                    }
                }

                }
                break;
            case YQLParser.CREATE:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3497;
                this.match(YQLParser.CREATE);
                this.state = 3499;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109 || _la === 232 || _la === 280) {
                    {
                    this.state = 3498;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 109 || _la === 232 || _la === 280)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public permission_name(): Permission_nameContext {
        let localContext = new Permission_nameContext(this.context, this.state);
        this.enterRule(localContext, 570, YQLParser.RULE_permission_name);
        try {
            this.state = 3505;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ALTER:
            case YQLParser.CONNECT:
            case YQLParser.CREATE:
            case YQLParser.DESCRIBE:
            case YQLParser.DROP:
            case YQLParser.ERASE:
            case YQLParser.FULL:
            case YQLParser.GRANT:
            case YQLParser.INSERT:
            case YQLParser.LIST:
            case YQLParser.MANAGE:
            case YQLParser.MODIFY:
            case YQLParser.REMOVE:
            case YQLParser.SELECT:
            case YQLParser.UPDATE:
            case YQLParser.USE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3503;
                this.permission_id();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3504;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public permission_name_target(): Permission_name_targetContext {
        let localContext = new Permission_name_targetContext(this.context, this.state);
        this.enterRule(localContext, 572, YQLParser.RULE_permission_name_target);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3522;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ALTER:
            case YQLParser.CONNECT:
            case YQLParser.CREATE:
            case YQLParser.DESCRIBE:
            case YQLParser.DROP:
            case YQLParser.ERASE:
            case YQLParser.FULL:
            case YQLParser.GRANT:
            case YQLParser.INSERT:
            case YQLParser.LIST:
            case YQLParser.MANAGE:
            case YQLParser.MODIFY:
            case YQLParser.REMOVE:
            case YQLParser.SELECT:
            case YQLParser.UPDATE:
            case YQLParser.USE:
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3507;
                this.permission_name();
                this.state = 3512;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 357, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3508;
                        this.match(YQLParser.COMMA);
                        this.state = 3509;
                        this.permission_name();
                        }
                        }
                    }
                    this.state = 3514;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 357, this.context);
                }
                this.state = 3516;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3515;
                    this.match(YQLParser.COMMA);
                    }
                }

                }
                break;
            case YQLParser.ALL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3518;
                this.match(YQLParser.ALL);
                this.state = 3520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 230) {
                    {
                    this.state = 3519;
                    this.match(YQLParser.PRIVILEGES);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_resource_pool_stmt(): Create_resource_pool_stmtContext {
        let localContext = new Create_resource_pool_stmtContext(this.context, this.state);
        this.enterRule(localContext, 574, YQLParser.RULE_create_resource_pool_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3524;
            this.match(YQLParser.CREATE);
            this.state = 3525;
            this.match(YQLParser.RESOURCE);
            this.state = 3526;
            this.match(YQLParser.POOL);
            this.state = 3527;
            this.object_ref();
            this.state = 3528;
            this.with_table_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_resource_pool_stmt(): Alter_resource_pool_stmtContext {
        let localContext = new Alter_resource_pool_stmtContext(this.context, this.state);
        this.enterRule(localContext, 576, YQLParser.RULE_alter_resource_pool_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3530;
            this.match(YQLParser.ALTER);
            this.state = 3531;
            this.match(YQLParser.RESOURCE);
            this.state = 3532;
            this.match(YQLParser.POOL);
            this.state = 3533;
            this.object_ref();
            this.state = 3534;
            this.alter_resource_pool_action();
            this.state = 3539;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3535;
                this.match(YQLParser.COMMA);
                this.state = 3536;
                this.alter_resource_pool_action();
                }
                }
                this.state = 3541;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_resource_pool_action(): Alter_resource_pool_actionContext {
        let localContext = new Alter_resource_pool_actionContext(this.context, this.state);
        this.enterRule(localContext, 578, YQLParser.RULE_alter_resource_pool_action);
        try {
            this.state = 3544;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3542;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case YQLParser.RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3543;
                this.alter_table_reset_table_setting();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_resource_pool_stmt(): Drop_resource_pool_stmtContext {
        let localContext = new Drop_resource_pool_stmtContext(this.context, this.state);
        this.enterRule(localContext, 580, YQLParser.RULE_drop_resource_pool_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3546;
            this.match(YQLParser.DROP);
            this.state = 3547;
            this.match(YQLParser.RESOURCE);
            this.state = 3548;
            this.match(YQLParser.POOL);
            this.state = 3549;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_resource_pool_classifier_stmt(): Create_resource_pool_classifier_stmtContext {
        let localContext = new Create_resource_pool_classifier_stmtContext(this.context, this.state);
        this.enterRule(localContext, 582, YQLParser.RULE_create_resource_pool_classifier_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3551;
            this.match(YQLParser.CREATE);
            this.state = 3552;
            this.match(YQLParser.RESOURCE);
            this.state = 3553;
            this.match(YQLParser.POOL);
            this.state = 3554;
            this.match(YQLParser.CLASSIFIER);
            this.state = 3555;
            this.object_ref();
            this.state = 3556;
            this.with_table_settings();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_resource_pool_classifier_stmt(): Alter_resource_pool_classifier_stmtContext {
        let localContext = new Alter_resource_pool_classifier_stmtContext(this.context, this.state);
        this.enterRule(localContext, 584, YQLParser.RULE_alter_resource_pool_classifier_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3558;
            this.match(YQLParser.ALTER);
            this.state = 3559;
            this.match(YQLParser.RESOURCE);
            this.state = 3560;
            this.match(YQLParser.POOL);
            this.state = 3561;
            this.match(YQLParser.CLASSIFIER);
            this.state = 3562;
            this.object_ref();
            this.state = 3563;
            this.alter_resource_pool_classifier_action();
            this.state = 3568;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3564;
                this.match(YQLParser.COMMA);
                this.state = 3565;
                this.alter_resource_pool_classifier_action();
                }
                }
                this.state = 3570;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_resource_pool_classifier_action(): Alter_resource_pool_classifier_actionContext {
        let localContext = new Alter_resource_pool_classifier_actionContext(this.context, this.state);
        this.enterRule(localContext, 586, YQLParser.RULE_alter_resource_pool_classifier_action);
        try {
            this.state = 3573;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3571;
                this.alter_table_set_table_setting_compat();
                }
                break;
            case YQLParser.RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3572;
                this.alter_table_reset_table_setting();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_resource_pool_classifier_stmt(): Drop_resource_pool_classifier_stmtContext {
        let localContext = new Drop_resource_pool_classifier_stmtContext(this.context, this.state);
        this.enterRule(localContext, 588, YQLParser.RULE_drop_resource_pool_classifier_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3575;
            this.match(YQLParser.DROP);
            this.state = 3576;
            this.match(YQLParser.RESOURCE);
            this.state = 3577;
            this.match(YQLParser.POOL);
            this.state = 3578;
            this.match(YQLParser.CLASSIFIER);
            this.state = 3579;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_replication_stmt(): Create_replication_stmtContext {
        let localContext = new Create_replication_stmtContext(this.context, this.state);
        this.enterRule(localContext, 590, YQLParser.RULE_create_replication_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3581;
            this.match(YQLParser.CREATE);
            this.state = 3582;
            this.match(YQLParser.ASYNC);
            this.state = 3583;
            this.match(YQLParser.REPLICATION);
            this.state = 3584;
            this.object_ref();
            this.state = 3585;
            this.match(YQLParser.FOR);
            this.state = 3586;
            this.replication_target();
            this.state = 3591;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3587;
                this.match(YQLParser.COMMA);
                this.state = 3588;
                this.replication_target();
                }
                }
                this.state = 3593;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3594;
            this.match(YQLParser.WITH);
            this.state = 3595;
            this.match(YQLParser.LPAREN);
            this.state = 3596;
            this.replication_settings();
            this.state = 3597;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replication_target(): Replication_targetContext {
        let localContext = new Replication_targetContext(this.context, this.state);
        this.enterRule(localContext, 592, YQLParser.RULE_replication_target);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3599;
            this.object_ref();
            this.state = 3600;
            this.match(YQLParser.AS);
            this.state = 3601;
            this.object_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replication_settings(): Replication_settingsContext {
        let localContext = new Replication_settingsContext(this.context, this.state);
        this.enterRule(localContext, 594, YQLParser.RULE_replication_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3603;
            this.replication_settings_entry();
            this.state = 3608;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3604;
                this.match(YQLParser.COMMA);
                this.state = 3605;
                this.replication_settings_entry();
                }
                }
                this.state = 3610;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replication_settings_entry(): Replication_settings_entryContext {
        let localContext = new Replication_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 596, YQLParser.RULE_replication_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3611;
            this.an_id();
            this.state = 3612;
            this.match(YQLParser.EQUALS);
            this.state = 3613;
            this.match(YQLParser.STRING_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_replication_stmt(): Alter_replication_stmtContext {
        let localContext = new Alter_replication_stmtContext(this.context, this.state);
        this.enterRule(localContext, 598, YQLParser.RULE_alter_replication_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3615;
            this.match(YQLParser.ALTER);
            this.state = 3616;
            this.match(YQLParser.ASYNC);
            this.state = 3617;
            this.match(YQLParser.REPLICATION);
            this.state = 3618;
            this.object_ref();
            this.state = 3619;
            this.alter_replication_action();
            this.state = 3624;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3620;
                this.match(YQLParser.COMMA);
                this.state = 3621;
                this.alter_replication_action();
                }
                }
                this.state = 3626;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_replication_action(): Alter_replication_actionContext {
        let localContext = new Alter_replication_actionContext(this.context, this.state);
        this.enterRule(localContext, 600, YQLParser.RULE_alter_replication_action);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3627;
            this.alter_replication_set_setting();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_replication_set_setting(): Alter_replication_set_settingContext {
        let localContext = new Alter_replication_set_settingContext(this.context, this.state);
        this.enterRule(localContext, 602, YQLParser.RULE_alter_replication_set_setting);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3629;
            this.match(YQLParser.SET);
            this.state = 3630;
            this.match(YQLParser.LPAREN);
            this.state = 3631;
            this.replication_settings();
            this.state = 3632;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_replication_stmt(): Drop_replication_stmtContext {
        let localContext = new Drop_replication_stmtContext(this.context, this.state);
        this.enterRule(localContext, 604, YQLParser.RULE_drop_replication_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3634;
            this.match(YQLParser.DROP);
            this.state = 3635;
            this.match(YQLParser.ASYNC);
            this.state = 3636;
            this.match(YQLParser.REPLICATION);
            this.state = 3637;
            this.object_ref();
            this.state = 3639;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 3638;
                this.match(YQLParser.CASCADE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public action_or_subquery_args(): Action_or_subquery_argsContext {
        let localContext = new Action_or_subquery_argsContext(this.context, this.state);
        this.enterRule(localContext, 606, YQLParser.RULE_action_or_subquery_args);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3641;
            this.opt_bind_parameter();
            this.state = 3646;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3642;
                this.match(YQLParser.COMMA);
                this.state = 3643;
                this.opt_bind_parameter();
                }
                }
                this.state = 3648;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public define_action_or_subquery_stmt(): Define_action_or_subquery_stmtContext {
        let localContext = new Define_action_or_subquery_stmtContext(this.context, this.state);
        this.enterRule(localContext, 608, YQLParser.RULE_define_action_or_subquery_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3649;
            this.match(YQLParser.DEFINE);
            this.state = 3650;
            _la = this.tokenStream.LA(1);
            if(!(_la === 44 || _la === 274)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3651;
            this.bind_parameter();
            this.state = 3652;
            this.match(YQLParser.LPAREN);
            this.state = 3654;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 32) {
                {
                this.state = 3653;
                this.action_or_subquery_args();
                }
            }

            this.state = 3656;
            this.match(YQLParser.RPAREN);
            this.state = 3657;
            this.match(YQLParser.AS);
            this.state = 3658;
            this.define_action_or_subquery_body();
            this.state = 3659;
            this.match(YQLParser.END);
            this.state = 3660;
            this.match(YQLParser.DEFINE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public define_action_or_subquery_body(): Define_action_or_subquery_bodyContext {
        let localContext = new Define_action_or_subquery_bodyContext(this.context, this.state);
        this.enterRule(localContext, 610, YQLParser.RULE_define_action_or_subquery_body);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3665;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23) {
                {
                {
                this.state = 3662;
                this.match(YQLParser.SEMICOLON);
                }
                }
                this.state = 3667;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3686;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & 12582977) !== 0) || ((((_la - 81)) & ~0x1F) === 0 && ((1 << (_la - 81)) & 1086587137) !== 0) || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 2684882947) !== 0) || ((((_la - 149)) & ~0x1F) === 0 && ((1 << (_la - 149)) & 526465) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 134775809) !== 0) || ((((_la - 253)) & ~0x1F) === 0 && ((1 << (_la - 253)) & 4105) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 71) !== 0)) {
                {
                this.state = 3668;
                this.sql_stmt_core();
                this.state = 3677;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 373, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3670;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        do {
                            {
                            {
                            this.state = 3669;
                            this.match(YQLParser.SEMICOLON);
                            }
                            }
                            this.state = 3672;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        } while (_la === 23);
                        this.state = 3674;
                        this.sql_stmt_core();
                        }
                        }
                    }
                    this.state = 3679;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 373, this.context);
                }
                this.state = 3683;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 23) {
                    {
                    {
                    this.state = 3680;
                    this.match(YQLParser.SEMICOLON);
                    }
                    }
                    this.state = 3685;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public if_stmt(): If_stmtContext {
        let localContext = new If_stmtContext(this.context, this.state);
        this.enterRule(localContext, 612, YQLParser.RULE_if_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3689;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 125) {
                {
                this.state = 3688;
                this.match(YQLParser.EVALUATE);
                }
            }

            this.state = 3691;
            this.match(YQLParser.IF);
            this.state = 3692;
            this.expr();
            this.state = 3693;
            this.do_stmt();
            this.state = 3696;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 116) {
                {
                this.state = 3694;
                this.match(YQLParser.ELSE);
                this.state = 3695;
                this.do_stmt();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_stmt(): For_stmtContext {
        let localContext = new For_stmtContext(this.context, this.state);
        this.enterRule(localContext, 614, YQLParser.RULE_for_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3699;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 125) {
                {
                this.state = 3698;
                this.match(YQLParser.EVALUATE);
                }
            }

            this.state = 3702;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 216) {
                {
                this.state = 3701;
                this.match(YQLParser.PARALLEL);
                }
            }

            this.state = 3704;
            this.match(YQLParser.FOR);
            this.state = 3705;
            this.bind_parameter();
            this.state = 3706;
            this.match(YQLParser.IN);
            this.state = 3707;
            this.expr();
            this.state = 3708;
            this.do_stmt();
            this.state = 3711;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 116) {
                {
                this.state = 3709;
                this.match(YQLParser.ELSE);
                this.state = 3710;
                this.do_stmt();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_ref(): Table_refContext {
        let localContext = new Table_refContext(this.context, this.state);
        this.enterRule(localContext, 616, YQLParser.RULE_table_ref);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3716;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 381, this.context) ) {
            case 1:
                {
                this.state = 3713;
                this.cluster_expr();
                this.state = 3714;
                this.match(YQLParser.DOT);
                }
                break;
            }
            this.state = 3719;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30) {
                {
                this.state = 3718;
                this.match(YQLParser.AT);
                }
            }

            this.state = 3751;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 389, this.context) ) {
            case 1:
                {
                this.state = 3721;
                this.table_key();
                }
                break;
            case 2:
                {
                this.state = 3722;
                this.an_id_expr();
                this.state = 3723;
                this.match(YQLParser.LPAREN);
                this.state = 3735;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 14)) & ~0x1F) === 0 && ((1 << (_la - 14)) & 4031057949) !== 0) || ((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & 4294901759) !== 0) || ((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & 4294967231) !== 0) || ((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967279) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 16777215) !== 0)) {
                    {
                    this.state = 3724;
                    this.table_arg();
                    this.state = 3729;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 383, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 3725;
                            this.match(YQLParser.COMMA);
                            this.state = 3726;
                            this.table_arg();
                            }
                            }
                        }
                        this.state = 3731;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 383, this.context);
                    }
                    this.state = 3733;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 25) {
                        {
                        this.state = 3732;
                        this.match(YQLParser.COMMA);
                        }
                    }

                    }
                }

                this.state = 3737;
                this.match(YQLParser.RPAREN);
                }
                break;
            case 3:
                {
                this.state = 3739;
                this.bind_parameter();
                this.state = 3745;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 26) {
                    {
                    this.state = 3740;
                    this.match(YQLParser.LPAREN);
                    this.state = 3742;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 14)) & ~0x1F) === 0 && ((1 << (_la - 14)) & 4030992413) !== 0) || ((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & 4294901759) !== 0) || ((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & 4294967231) !== 0) || ((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967279) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 16777215) !== 0)) {
                        {
                        this.state = 3741;
                        this.expr_list();
                        }
                    }

                    this.state = 3744;
                    this.match(YQLParser.RPAREN);
                    }
                }

                this.state = 3749;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 310) {
                    {
                    this.state = 3747;
                    this.match(YQLParser.VIEW);
                    this.state = 3748;
                    this.view_name();
                    }
                }

                }
                break;
            }
            this.state = 3754;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 3753;
                this.table_hints();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_key(): Table_keyContext {
        let localContext = new Table_keyContext(this.context, this.state);
        this.enterRule(localContext, 618, YQLParser.RULE_table_key);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3756;
            this.id_table_or_type();
            this.state = 3759;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 310) {
                {
                this.state = 3757;
                this.match(YQLParser.VIEW);
                this.state = 3758;
                this.view_name();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_arg(): Table_argContext {
        let localContext = new Table_argContext(this.context, this.state);
        this.enterRule(localContext, 620, YQLParser.RULE_table_arg);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3762;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30) {
                {
                this.state = 3761;
                this.match(YQLParser.AT);
                }
            }

            this.state = 3764;
            this.named_expr();
            this.state = 3767;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 310) {
                {
                this.state = 3765;
                this.match(YQLParser.VIEW);
                this.state = 3766;
                this.view_name();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_hints(): Table_hintsContext {
        let localContext = new Table_hintsContext(this.context, this.state);
        this.enterRule(localContext, 622, YQLParser.RULE_table_hints);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3769;
            this.match(YQLParser.WITH);
            this.state = 3782;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                {
                this.state = 3770;
                this.table_hint();
                }
                break;
            case YQLParser.LPAREN:
                {
                this.state = 3771;
                this.match(YQLParser.LPAREN);
                this.state = 3772;
                this.table_hint();
                this.state = 3777;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 25) {
                    {
                    {
                    this.state = 3773;
                    this.match(YQLParser.COMMA);
                    this.state = 3774;
                    this.table_hint();
                    }
                    }
                    this.state = 3779;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3780;
                this.match(YQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_hint(): Table_hintContext {
        let localContext = new Table_hintContext(this.context, this.state);
        this.enterRule(localContext, 624, YQLParser.RULE_table_hint);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3829;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 405, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3784;
                this.an_id_hint();
                this.state = 3803;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1) {
                    {
                    this.state = 3785;
                    this.match(YQLParser.EQUALS);
                    this.state = 3801;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case YQLParser.DOLLAR:
                    case YQLParser.ABORT:
                    case YQLParser.ACTION:
                    case YQLParser.ADD:
                    case YQLParser.AFTER:
                    case YQLParser.ALL:
                    case YQLParser.ALTER:
                    case YQLParser.ANALYZE:
                    case YQLParser.AND:
                    case YQLParser.ANSI:
                    case YQLParser.ANY:
                    case YQLParser.ARRAY:
                    case YQLParser.AS:
                    case YQLParser.ASC:
                    case YQLParser.ASSUME:
                    case YQLParser.ASYMMETRIC:
                    case YQLParser.ASYNC:
                    case YQLParser.ATTACH:
                    case YQLParser.ATTRIBUTES:
                    case YQLParser.AUTOINCREMENT:
                    case YQLParser.BACKUP:
                    case YQLParser.COLLECTION:
                    case YQLParser.BEFORE:
                    case YQLParser.BEGIN:
                    case YQLParser.BERNOULLI:
                    case YQLParser.BETWEEN:
                    case YQLParser.BITCAST:
                    case YQLParser.BY:
                    case YQLParser.CASCADE:
                    case YQLParser.CASE:
                    case YQLParser.CAST:
                    case YQLParser.CHANGEFEED:
                    case YQLParser.CHECK:
                    case YQLParser.CLASSIFIER:
                    case YQLParser.COLLATE:
                    case YQLParser.COLUMN:
                    case YQLParser.COLUMNS:
                    case YQLParser.COMMIT:
                    case YQLParser.COMPACT:
                    case YQLParser.CONDITIONAL:
                    case YQLParser.CONFLICT:
                    case YQLParser.CONNECT:
                    case YQLParser.CONSTRAINT:
                    case YQLParser.CONSUMER:
                    case YQLParser.COVER:
                    case YQLParser.CREATE:
                    case YQLParser.CROSS:
                    case YQLParser.CUBE:
                    case YQLParser.CURRENT:
                    case YQLParser.CURRENT_DATE:
                    case YQLParser.CURRENT_TIME:
                    case YQLParser.CURRENT_TIMESTAMP:
                    case YQLParser.DATA:
                    case YQLParser.DATABASE:
                    case YQLParser.DECIMAL:
                    case YQLParser.DECLARE:
                    case YQLParser.DEFAULT:
                    case YQLParser.DEFERRABLE:
                    case YQLParser.DEFERRED:
                    case YQLParser.DEFINE:
                    case YQLParser.DELETE:
                    case YQLParser.DESC:
                    case YQLParser.DESCRIBE:
                    case YQLParser.DETACH:
                    case YQLParser.DIRECTORY:
                    case YQLParser.DISABLE:
                    case YQLParser.DISCARD:
                    case YQLParser.DISTINCT:
                    case YQLParser.DO:
                    case YQLParser.DROP:
                    case YQLParser.EACH:
                    case YQLParser.ELSE:
                    case YQLParser.EMPTY:
                    case YQLParser.EMPTY_ACTION:
                    case YQLParser.ENCRYPTED:
                    case YQLParser.END:
                    case YQLParser.ERASE:
                    case YQLParser.ERROR:
                    case YQLParser.ESCAPE:
                    case YQLParser.EVALUATE:
                    case YQLParser.EXCEPT:
                    case YQLParser.EXCLUDE:
                    case YQLParser.EXCLUSION:
                    case YQLParser.EXCLUSIVE:
                    case YQLParser.EXISTS:
                    case YQLParser.EXPLAIN:
                    case YQLParser.EXPORT:
                    case YQLParser.EXTERNAL:
                    case YQLParser.FAIL:
                    case YQLParser.FAMILY:
                    case YQLParser.FILTER:
                    case YQLParser.FIRST:
                    case YQLParser.FLATTEN:
                    case YQLParser.FOLLOWING:
                    case YQLParser.FOR:
                    case YQLParser.FOREIGN:
                    case YQLParser.FROM:
                    case YQLParser.FULL:
                    case YQLParser.FUNCTION:
                    case YQLParser.GLOB:
                    case YQLParser.GRANT:
                    case YQLParser.GROUP:
                    case YQLParser.GROUPING:
                    case YQLParser.GROUPS:
                    case YQLParser.HASH:
                    case YQLParser.HAVING:
                    case YQLParser.HOP:
                    case YQLParser.IF:
                    case YQLParser.IGNORE:
                    case YQLParser.ILIKE:
                    case YQLParser.IMMEDIATE:
                    case YQLParser.IMPORT:
                    case YQLParser.IN:
                    case YQLParser.INDEX:
                    case YQLParser.INDEXED:
                    case YQLParser.INHERITS:
                    case YQLParser.INITIAL:
                    case YQLParser.INITIALLY:
                    case YQLParser.INNER:
                    case YQLParser.INSERT:
                    case YQLParser.INSTEAD:
                    case YQLParser.INTERSECT:
                    case YQLParser.INTO:
                    case YQLParser.IS:
                    case YQLParser.ISNULL:
                    case YQLParser.JOIN:
                    case YQLParser.JSON_EXISTS:
                    case YQLParser.JSON_QUERY:
                    case YQLParser.JSON_VALUE:
                    case YQLParser.KEY:
                    case YQLParser.LAST:
                    case YQLParser.LEFT:
                    case YQLParser.LEGACY:
                    case YQLParser.LIKE:
                    case YQLParser.LIMIT:
                    case YQLParser.LOCAL:
                    case YQLParser.MANAGE:
                    case YQLParser.MATCH:
                    case YQLParser.MATCHES:
                    case YQLParser.MATCH_RECOGNIZE:
                    case YQLParser.MEASURES:
                    case YQLParser.MICROSECONDS:
                    case YQLParser.MILLISECONDS:
                    case YQLParser.MODIFY:
                    case YQLParser.NANOSECONDS:
                    case YQLParser.NATURAL:
                    case YQLParser.NEXT:
                    case YQLParser.NO:
                    case YQLParser.NOT:
                    case YQLParser.NOTNULL:
                    case YQLParser.NULL:
                    case YQLParser.NULLS:
                    case YQLParser.OBJECT:
                    case YQLParser.OF:
                    case YQLParser.OFFSET:
                    case YQLParser.OMIT:
                    case YQLParser.ON:
                    case YQLParser.ONE:
                    case YQLParser.ONLY:
                    case YQLParser.OPTION:
                    case YQLParser.OR:
                    case YQLParser.ORDER:
                    case YQLParser.OTHERS:
                    case YQLParser.OUTER:
                    case YQLParser.OVER:
                    case YQLParser.PARALLEL:
                    case YQLParser.PARTITION:
                    case YQLParser.PASSING:
                    case YQLParser.PASSWORD:
                    case YQLParser.PAST:
                    case YQLParser.PATTERN:
                    case YQLParser.PER:
                    case YQLParser.PERMUTE:
                    case YQLParser.PLAN:
                    case YQLParser.POOL:
                    case YQLParser.PRAGMA:
                    case YQLParser.PRECEDING:
                    case YQLParser.PRESORT:
                    case YQLParser.PRIMARY:
                    case YQLParser.PRIVILEGES:
                    case YQLParser.PROCESS:
                    case YQLParser.QUEUE:
                    case YQLParser.RAISE:
                    case YQLParser.RANGE:
                    case YQLParser.REDUCE:
                    case YQLParser.REFERENCES:
                    case YQLParser.REGEXP:
                    case YQLParser.REINDEX:
                    case YQLParser.RELEASE:
                    case YQLParser.REMOVE:
                    case YQLParser.RENAME:
                    case YQLParser.REPLACE:
                    case YQLParser.REPLICATION:
                    case YQLParser.RESET:
                    case YQLParser.RESPECT:
                    case YQLParser.RESTRICT:
                    case YQLParser.RESULT:
                    case YQLParser.RETURN:
                    case YQLParser.RETURNING:
                    case YQLParser.REVERT:
                    case YQLParser.REVOKE:
                    case YQLParser.RIGHT:
                    case YQLParser.RLIKE:
                    case YQLParser.ROLLBACK:
                    case YQLParser.ROLLUP:
                    case YQLParser.ROW:
                    case YQLParser.ROWS:
                    case YQLParser.SAMPLE:
                    case YQLParser.SAVEPOINT:
                    case YQLParser.SCHEMA:
                    case YQLParser.SECONDS:
                    case YQLParser.SEEK:
                    case YQLParser.SELECT:
                    case YQLParser.SEMI:
                    case YQLParser.SETS:
                    case YQLParser.SHOW:
                    case YQLParser.TSKIP:
                    case YQLParser.SOURCE:
                    case YQLParser.STREAM:
                    case YQLParser.SUBQUERY:
                    case YQLParser.SUBSET:
                    case YQLParser.SYMBOLS:
                    case YQLParser.SYMMETRIC:
                    case YQLParser.SYNC:
                    case YQLParser.SYSTEM:
                    case YQLParser.TABLE:
                    case YQLParser.TABLES:
                    case YQLParser.TABLESAMPLE:
                    case YQLParser.TABLESTORE:
                    case YQLParser.TEMP:
                    case YQLParser.TEMPORARY:
                    case YQLParser.THEN:
                    case YQLParser.TIES:
                    case YQLParser.TO:
                    case YQLParser.TOPIC:
                    case YQLParser.TRANSACTION:
                    case YQLParser.TRIGGER:
                    case YQLParser.TYPE:
                    case YQLParser.UNBOUNDED:
                    case YQLParser.UNCONDITIONAL:
                    case YQLParser.UNION:
                    case YQLParser.UNIQUE:
                    case YQLParser.UNKNOWN:
                    case YQLParser.UNMATCHED:
                    case YQLParser.UPDATE:
                    case YQLParser.UPSERT:
                    case YQLParser.USE:
                    case YQLParser.USER:
                    case YQLParser.USING:
                    case YQLParser.VACUUM:
                    case YQLParser.VALUES:
                    case YQLParser.VIEW:
                    case YQLParser.VIRTUAL:
                    case YQLParser.WHEN:
                    case YQLParser.WHERE:
                    case YQLParser.WINDOW:
                    case YQLParser.WITH:
                    case YQLParser.WITHOUT:
                    case YQLParser.WRAPPER:
                    case YQLParser.XOR:
                    case YQLParser.STRING_VALUE:
                    case YQLParser.ID_PLAIN:
                    case YQLParser.ID_QUOTED:
                        {
                        this.state = 3786;
                        this.type_name_tag();
                        }
                        break;
                    case YQLParser.LPAREN:
                        {
                        this.state = 3787;
                        this.match(YQLParser.LPAREN);
                        this.state = 3788;
                        this.type_name_tag();
                        this.state = 3793;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 396, this.context);
                        while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                            if (alternative === 1) {
                                {
                                {
                                this.state = 3789;
                                this.match(YQLParser.COMMA);
                                this.state = 3790;
                                this.type_name_tag();
                                }
                                }
                            }
                            this.state = 3795;
                            this.errorHandler.sync(this);
                            alternative = this.interpreter.adaptivePredict(this.tokenStream, 396, this.context);
                        }
                        this.state = 3797;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 25) {
                            {
                            this.state = 3796;
                            this.match(YQLParser.COMMA);
                            }
                        }

                        this.state = 3799;
                        this.match(YQLParser.RPAREN);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3805;
                _la = this.tokenStream.LA(1);
                if(!(_la === 80 || _la === 262)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3807;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1) {
                    {
                    this.state = 3806;
                    this.match(YQLParser.EQUALS);
                    }
                }

                this.state = 3809;
                this.type_name_or_bind();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3810;
                this.match(YQLParser.SCHEMA);
                this.state = 3812;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1) {
                    {
                    this.state = 3811;
                    this.match(YQLParser.EQUALS);
                    }
                }

                this.state = 3814;
                this.match(YQLParser.LPAREN);
                this.state = 3823;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3221223425) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4293918591) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294705151) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || _la === 320 || _la === 321) {
                    {
                    this.state = 3815;
                    this.struct_arg_positional();
                    this.state = 3820;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 402, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 3816;
                            this.match(YQLParser.COMMA);
                            this.state = 3817;
                            this.struct_arg_positional();
                            }
                            }
                        }
                        this.state = 3822;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 402, this.context);
                    }
                    }
                }

                this.state = 3826;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3825;
                    this.match(YQLParser.COMMA);
                    }
                }

                this.state = 3828;
                this.match(YQLParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_ref(): Object_refContext {
        let localContext = new Object_refContext(this.context, this.state);
        this.enterRule(localContext, 626, YQLParser.RULE_object_ref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3834;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 406, this.context) ) {
            case 1:
                {
                this.state = 3831;
                this.cluster_expr();
                this.state = 3832;
                this.match(YQLParser.DOT);
                }
                break;
            }
            this.state = 3836;
            this.id_or_at();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_table_ref_core(): Simple_table_ref_coreContext {
        let localContext = new Simple_table_ref_coreContext(this.context, this.state);
        this.enterRule(localContext, 628, YQLParser.RULE_simple_table_ref_core);
        let _la: number;
        try {
            this.state = 3843;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 408, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3838;
                this.object_ref();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3840;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 3839;
                    this.match(YQLParser.AT);
                    }
                }

                this.state = 3842;
                this.bind_parameter();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_table_ref(): Simple_table_refContext {
        let localContext = new Simple_table_refContext(this.context, this.state);
        this.enterRule(localContext, 630, YQLParser.RULE_simple_table_ref);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3845;
            this.simple_table_ref_core();
            this.state = 3847;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 3846;
                this.table_hints();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_simple_table_ref(): Into_simple_table_refContext {
        let localContext = new Into_simple_table_refContext(this.context, this.state);
        this.enterRule(localContext, 632, YQLParser.RULE_into_simple_table_ref);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3849;
            this.simple_table_ref();
            this.state = 3853;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 122) {
                {
                this.state = 3850;
                this.match(YQLParser.ERASE);
                this.state = 3851;
                this.match(YQLParser.BY);
                this.state = 3852;
                this.pure_column_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public delete_stmt(): Delete_stmtContext {
        let localContext = new Delete_stmtContext(this.context, this.state);
        this.enterRule(localContext, 634, YQLParser.RULE_delete_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3855;
            this.match(YQLParser.DELETE);
            this.state = 3856;
            this.match(YQLParser.FROM);
            this.state = 3857;
            this.simple_table_ref();
            this.state = 3862;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.WHERE:
                {
                this.state = 3858;
                this.match(YQLParser.WHERE);
                this.state = 3859;
                this.expr();
                }
                break;
            case YQLParser.ON:
                {
                this.state = 3860;
                this.match(YQLParser.ON);
                this.state = 3861;
                this.into_values_source();
                }
                break;
            case YQLParser.EOF:
            case YQLParser.SEMICOLON:
            case YQLParser.END:
            case YQLParser.RETURNING:
                break;
            default:
                break;
            }
            this.state = 3865;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 251) {
                {
                this.state = 3864;
                this.returning_columns_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public update_stmt(): Update_stmtContext {
        let localContext = new Update_stmtContext(this.context, this.state);
        this.enterRule(localContext, 636, YQLParser.RULE_update_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3867;
            this.match(YQLParser.UPDATE);
            this.state = 3868;
            this.simple_table_ref();
            this.state = 3877;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SET:
                {
                this.state = 3869;
                this.match(YQLParser.SET);
                this.state = 3870;
                this.set_clause_choice();
                this.state = 3873;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 3871;
                    this.match(YQLParser.WHERE);
                    this.state = 3872;
                    this.expr();
                    }
                }

                }
                break;
            case YQLParser.ON:
                {
                this.state = 3875;
                this.match(YQLParser.ON);
                this.state = 3876;
                this.into_values_source();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3880;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 251) {
                {
                this.state = 3879;
                this.returning_columns_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause_choice(): Set_clause_choiceContext {
        let localContext = new Set_clause_choiceContext(this.context, this.state);
        this.enterRule(localContext, 638, YQLParser.RULE_set_clause_choice);
        try {
            this.state = 3884;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3882;
                this.set_clause_list();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3883;
                this.multiple_column_assignment();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause_list(): Set_clause_listContext {
        let localContext = new Set_clause_listContext(this.context, this.state);
        this.enterRule(localContext, 640, YQLParser.RULE_set_clause_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3886;
            this.set_clause();
            this.state = 3891;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3887;
                this.match(YQLParser.COMMA);
                this.state = 3888;
                this.set_clause();
                }
                }
                this.state = 3893;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause(): Set_clauseContext {
        let localContext = new Set_clauseContext(this.context, this.state);
        this.enterRule(localContext, 642, YQLParser.RULE_set_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3894;
            this.set_target();
            this.state = 3895;
            this.match(YQLParser.EQUALS);
            this.state = 3896;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_target(): Set_targetContext {
        let localContext = new Set_targetContext(this.context, this.state);
        this.enterRule(localContext, 644, YQLParser.RULE_set_target);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3898;
            this.column_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiple_column_assignment(): Multiple_column_assignmentContext {
        let localContext = new Multiple_column_assignmentContext(this.context, this.state);
        this.enterRule(localContext, 646, YQLParser.RULE_multiple_column_assignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3900;
            this.set_target_list();
            this.state = 3901;
            this.match(YQLParser.EQUALS);
            this.state = 3902;
            this.match(YQLParser.LPAREN);
            this.state = 3903;
            this.simple_values_source();
            this.state = 3904;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_target_list(): Set_target_listContext {
        let localContext = new Set_target_listContext(this.context, this.state);
        this.enterRule(localContext, 648, YQLParser.RULE_set_target_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3906;
            this.match(YQLParser.LPAREN);
            this.state = 3907;
            this.set_target();
            this.state = 3912;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3908;
                this.match(YQLParser.COMMA);
                this.state = 3909;
                this.set_target();
                }
                }
                this.state = 3914;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3915;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_topic_stmt(): Create_topic_stmtContext {
        let localContext = new Create_topic_stmtContext(this.context, this.state);
        this.enterRule(localContext, 650, YQLParser.RULE_create_topic_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3917;
            this.match(YQLParser.CREATE);
            this.state = 3918;
            this.match(YQLParser.TOPIC);
            this.state = 3922;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 419, this.context) ) {
            case 1:
                {
                this.state = 3919;
                this.match(YQLParser.IF);
                this.state = 3920;
                this.match(YQLParser.NOT);
                this.state = 3921;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 3924;
            this.topic_ref();
            this.state = 3926;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 3925;
                this.create_topic_entries();
                }
            }

            this.state = 3929;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 3928;
                this.with_topic_settings();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_topic_entries(): Create_topic_entriesContext {
        let localContext = new Create_topic_entriesContext(this.context, this.state);
        this.enterRule(localContext, 652, YQLParser.RULE_create_topic_entries);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3931;
            this.match(YQLParser.LPAREN);
            this.state = 3932;
            this.create_topic_entry();
            this.state = 3937;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3933;
                this.match(YQLParser.COMMA);
                this.state = 3934;
                this.create_topic_entry();
                }
                }
                this.state = 3939;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3940;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_topic_entry(): Create_topic_entryContext {
        let localContext = new Create_topic_entryContext(this.context, this.state);
        this.enterRule(localContext, 654, YQLParser.RULE_create_topic_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3942;
            this.topic_create_consumer_entry();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_topic_settings(): With_topic_settingsContext {
        let localContext = new With_topic_settingsContext(this.context, this.state);
        this.enterRule(localContext, 656, YQLParser.RULE_with_topic_settings);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3944;
            this.match(YQLParser.WITH);
            this.state = 3945;
            this.match(YQLParser.LPAREN);
            this.state = 3946;
            this.topic_settings();
            this.state = 3947;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_stmt(): Alter_topic_stmtContext {
        let localContext = new Alter_topic_stmtContext(this.context, this.state);
        this.enterRule(localContext, 658, YQLParser.RULE_alter_topic_stmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3949;
            this.match(YQLParser.ALTER);
            this.state = 3950;
            this.match(YQLParser.TOPIC);
            this.state = 3953;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 423, this.context) ) {
            case 1:
                {
                this.state = 3951;
                this.match(YQLParser.IF);
                this.state = 3952;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 3955;
            this.topic_ref();
            this.state = 3956;
            this.alter_topic_action();
            this.state = 3961;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 3957;
                this.match(YQLParser.COMMA);
                this.state = 3958;
                this.alter_topic_action();
                }
                }
                this.state = 3963;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_action(): Alter_topic_actionContext {
        let localContext = new Alter_topic_actionContext(this.context, this.state);
        this.enterRule(localContext, 660, YQLParser.RULE_alter_topic_action);
        try {
            this.state = 3969;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ADD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3964;
                this.alter_topic_add_consumer();
                }
                break;
            case YQLParser.ALTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3965;
                this.alter_topic_alter_consumer();
                }
                break;
            case YQLParser.DROP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3966;
                this.alter_topic_drop_consumer();
                }
                break;
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3967;
                this.alter_topic_set_settings();
                }
                break;
            case YQLParser.RESET:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3968;
                this.alter_topic_reset_settings();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_add_consumer(): Alter_topic_add_consumerContext {
        let localContext = new Alter_topic_add_consumerContext(this.context, this.state);
        this.enterRule(localContext, 662, YQLParser.RULE_alter_topic_add_consumer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3971;
            this.match(YQLParser.ADD);
            this.state = 3972;
            this.topic_create_consumer_entry();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_create_consumer_entry(): Topic_create_consumer_entryContext {
        let localContext = new Topic_create_consumer_entryContext(this.context, this.state);
        this.enterRule(localContext, 664, YQLParser.RULE_topic_create_consumer_entry);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3974;
            this.match(YQLParser.CONSUMER);
            this.state = 3975;
            this.an_id();
            this.state = 3977;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 3976;
                this.topic_consumer_with_settings();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_alter_consumer(): Alter_topic_alter_consumerContext {
        let localContext = new Alter_topic_alter_consumerContext(this.context, this.state);
        this.enterRule(localContext, 666, YQLParser.RULE_alter_topic_alter_consumer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3979;
            this.match(YQLParser.ALTER);
            this.state = 3980;
            this.match(YQLParser.CONSUMER);
            this.state = 3981;
            this.topic_consumer_ref();
            this.state = 3982;
            this.alter_topic_alter_consumer_entry();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_alter_consumer_entry(): Alter_topic_alter_consumer_entryContext {
        let localContext = new Alter_topic_alter_consumer_entryContext(this.context, this.state);
        this.enterRule(localContext, 668, YQLParser.RULE_alter_topic_alter_consumer_entry);
        try {
            this.state = 3986;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3984;
                this.topic_alter_consumer_set();
                }
                break;
            case YQLParser.RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3985;
                this.topic_alter_consumer_reset();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_drop_consumer(): Alter_topic_drop_consumerContext {
        let localContext = new Alter_topic_drop_consumerContext(this.context, this.state);
        this.enterRule(localContext, 670, YQLParser.RULE_alter_topic_drop_consumer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3988;
            this.match(YQLParser.DROP);
            this.state = 3989;
            this.match(YQLParser.CONSUMER);
            this.state = 3990;
            this.topic_consumer_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_alter_consumer_set(): Topic_alter_consumer_setContext {
        let localContext = new Topic_alter_consumer_setContext(this.context, this.state);
        this.enterRule(localContext, 672, YQLParser.RULE_topic_alter_consumer_set);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3992;
            this.match(YQLParser.SET);
            this.state = 3993;
            this.match(YQLParser.LPAREN);
            this.state = 3994;
            this.topic_consumer_settings();
            this.state = 3995;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_alter_consumer_reset(): Topic_alter_consumer_resetContext {
        let localContext = new Topic_alter_consumer_resetContext(this.context, this.state);
        this.enterRule(localContext, 674, YQLParser.RULE_topic_alter_consumer_reset);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3997;
            this.match(YQLParser.RESET);
            this.state = 3998;
            this.match(YQLParser.LPAREN);
            this.state = 3999;
            this.an_id();
            this.state = 4004;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4000;
                this.match(YQLParser.COMMA);
                this.state = 4001;
                this.an_id();
                }
                }
                this.state = 4006;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4007;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_set_settings(): Alter_topic_set_settingsContext {
        let localContext = new Alter_topic_set_settingsContext(this.context, this.state);
        this.enterRule(localContext, 676, YQLParser.RULE_alter_topic_set_settings);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4009;
            this.match(YQLParser.SET);
            this.state = 4010;
            this.match(YQLParser.LPAREN);
            this.state = 4011;
            this.topic_settings();
            this.state = 4012;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_topic_reset_settings(): Alter_topic_reset_settingsContext {
        let localContext = new Alter_topic_reset_settingsContext(this.context, this.state);
        this.enterRule(localContext, 678, YQLParser.RULE_alter_topic_reset_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4014;
            this.match(YQLParser.RESET);
            this.state = 4015;
            this.match(YQLParser.LPAREN);
            this.state = 4016;
            this.an_id();
            this.state = 4021;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4017;
                this.match(YQLParser.COMMA);
                this.state = 4018;
                this.an_id_pure();
                }
                }
                this.state = 4023;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4024;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_topic_stmt(): Drop_topic_stmtContext {
        let localContext = new Drop_topic_stmtContext(this.context, this.state);
        this.enterRule(localContext, 680, YQLParser.RULE_drop_topic_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4026;
            this.match(YQLParser.DROP);
            this.state = 4027;
            this.match(YQLParser.TOPIC);
            this.state = 4030;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 430, this.context) ) {
            case 1:
                {
                this.state = 4028;
                this.match(YQLParser.IF);
                this.state = 4029;
                this.match(YQLParser.EXISTS);
                }
                break;
            }
            this.state = 4032;
            this.topic_ref();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_settings(): Topic_settingsContext {
        let localContext = new Topic_settingsContext(this.context, this.state);
        this.enterRule(localContext, 682, YQLParser.RULE_topic_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4034;
            this.topic_settings_entry();
            this.state = 4039;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4035;
                this.match(YQLParser.COMMA);
                this.state = 4036;
                this.topic_settings_entry();
                }
                }
                this.state = 4041;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_settings_entry(): Topic_settings_entryContext {
        let localContext = new Topic_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 684, YQLParser.RULE_topic_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4042;
            this.an_id();
            this.state = 4043;
            this.match(YQLParser.EQUALS);
            this.state = 4044;
            this.topic_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_setting_value(): Topic_setting_valueContext {
        let localContext = new Topic_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 686, YQLParser.RULE_topic_setting_value);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4046;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_with_settings(): Topic_consumer_with_settingsContext {
        let localContext = new Topic_consumer_with_settingsContext(this.context, this.state);
        this.enterRule(localContext, 688, YQLParser.RULE_topic_consumer_with_settings);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4048;
            this.match(YQLParser.WITH);
            this.state = 4049;
            this.match(YQLParser.LPAREN);
            this.state = 4050;
            this.topic_consumer_settings();
            this.state = 4051;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_settings(): Topic_consumer_settingsContext {
        let localContext = new Topic_consumer_settingsContext(this.context, this.state);
        this.enterRule(localContext, 690, YQLParser.RULE_topic_consumer_settings);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4053;
            this.topic_consumer_settings_entry();
            this.state = 4058;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4054;
                this.match(YQLParser.COMMA);
                this.state = 4055;
                this.topic_consumer_settings_entry();
                }
                }
                this.state = 4060;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_settings_entry(): Topic_consumer_settings_entryContext {
        let localContext = new Topic_consumer_settings_entryContext(this.context, this.state);
        this.enterRule(localContext, 692, YQLParser.RULE_topic_consumer_settings_entry);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4061;
            this.an_id();
            this.state = 4062;
            this.match(YQLParser.EQUALS);
            this.state = 4063;
            this.topic_consumer_setting_value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_setting_value(): Topic_consumer_setting_valueContext {
        let localContext = new Topic_consumer_setting_valueContext(this.context, this.state);
        this.enterRule(localContext, 694, YQLParser.RULE_topic_consumer_setting_value);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4065;
            this.expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_ref(): Topic_refContext {
        let localContext = new Topic_refContext(this.context, this.state);
        this.enterRule(localContext, 696, YQLParser.RULE_topic_ref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4070;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 433, this.context) ) {
            case 1:
                {
                this.state = 4067;
                this.cluster_expr();
                this.state = 4068;
                this.match(YQLParser.DOT);
                }
                break;
            }
            this.state = 4072;
            this.an_id();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topic_consumer_ref(): Topic_consumer_refContext {
        let localContext = new Topic_consumer_refContext(this.context, this.state);
        this.enterRule(localContext, 698, YQLParser.RULE_topic_consumer_ref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4074;
            this.an_id_pure();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public null_treatment(): Null_treatmentContext {
        let localContext = new Null_treatmentContext(this.context, this.state);
        this.enterRule(localContext, 700, YQLParser.RULE_null_treatment);
        try {
            this.state = 4080;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.RESPECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4076;
                this.match(YQLParser.RESPECT);
                this.state = 4077;
                this.match(YQLParser.NULLS);
                }
                break;
            case YQLParser.IGNORE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4078;
                this.match(YQLParser.IGNORE);
                this.state = 4079;
                this.match(YQLParser.NULLS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filter_clause(): Filter_clauseContext {
        let localContext = new Filter_clauseContext(this.context, this.state);
        this.enterRule(localContext, 702, YQLParser.RULE_filter_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4082;
            this.match(YQLParser.FILTER);
            this.state = 4083;
            this.match(YQLParser.LPAREN);
            this.state = 4084;
            this.match(YQLParser.WHERE);
            this.state = 4085;
            this.expr();
            this.state = 4086;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_name_or_specification(): Window_name_or_specificationContext {
        let localContext = new Window_name_or_specificationContext(this.context, this.state);
        this.enterRule(localContext, 704, YQLParser.RULE_window_name_or_specification);
        try {
            this.state = 4090;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4088;
                this.window_name();
                }
                break;
            case YQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4089;
                this.window_specification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_name(): Window_nameContext {
        let localContext = new Window_nameContext(this.context, this.state);
        this.enterRule(localContext, 706, YQLParser.RULE_window_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4092;
            this.an_id_window();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_clause(): Window_clauseContext {
        let localContext = new Window_clauseContext(this.context, this.state);
        this.enterRule(localContext, 708, YQLParser.RULE_window_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4094;
            this.match(YQLParser.WINDOW);
            this.state = 4095;
            this.window_definition_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_definition_list(): Window_definition_listContext {
        let localContext = new Window_definition_listContext(this.context, this.state);
        this.enterRule(localContext, 710, YQLParser.RULE_window_definition_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4097;
            this.window_definition();
            this.state = 4102;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 25) {
                {
                {
                this.state = 4098;
                this.match(YQLParser.COMMA);
                this.state = 4099;
                this.window_definition();
                }
                }
                this.state = 4104;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_definition(): Window_definitionContext {
        let localContext = new Window_definitionContext(this.context, this.state);
        this.enterRule(localContext, 712, YQLParser.RULE_window_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4105;
            this.new_window_name();
            this.state = 4106;
            this.match(YQLParser.AS);
            this.state = 4107;
            this.window_specification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public new_window_name(): New_window_nameContext {
        let localContext = new New_window_nameContext(this.context, this.state);
        this.enterRule(localContext, 714, YQLParser.RULE_new_window_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4109;
            this.window_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_specification(): Window_specificationContext {
        let localContext = new Window_specificationContext(this.context, this.state);
        this.enterRule(localContext, 716, YQLParser.RULE_window_specification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4111;
            this.match(YQLParser.LPAREN);
            this.state = 4112;
            this.window_specification_details();
            this.state = 4113;
            this.match(YQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_specification_details(): Window_specification_detailsContext {
        let localContext = new Window_specification_detailsContext(this.context, this.state);
        this.enterRule(localContext, 718, YQLParser.RULE_window_specification_details);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4116;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 437, this.context) ) {
            case 1:
                {
                this.state = 4115;
                this.existing_window_name();
                }
                break;
            }
            this.state = 4119;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 217) {
                {
                this.state = 4118;
                this.window_partition_clause();
                }
            }

            this.state = 4122;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 212) {
                {
                this.state = 4121;
                this.window_order_clause();
                }
            }

            this.state = 4125;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152 || _la === 234 || _la === 259) {
                {
                this.state = 4124;
                this.window_frame_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existing_window_name(): Existing_window_nameContext {
        let localContext = new Existing_window_nameContext(this.context, this.state);
        this.enterRule(localContext, 720, YQLParser.RULE_existing_window_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4127;
            this.window_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_partition_clause(): Window_partition_clauseContext {
        let localContext = new Window_partition_clauseContext(this.context, this.state);
        this.enterRule(localContext, 722, YQLParser.RULE_window_partition_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4129;
            this.match(YQLParser.PARTITION);
            this.state = 4131;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 4130;
                this.match(YQLParser.COMPACT);
                }
            }

            this.state = 4133;
            this.match(YQLParser.BY);
            this.state = 4134;
            this.named_expr_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_order_clause(): Window_order_clauseContext {
        let localContext = new Window_order_clauseContext(this.context, this.state);
        this.enterRule(localContext, 724, YQLParser.RULE_window_order_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4136;
            this.order_by_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_clause(): Window_frame_clauseContext {
        let localContext = new Window_frame_clauseContext(this.context, this.state);
        this.enterRule(localContext, 726, YQLParser.RULE_window_frame_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4138;
            this.window_frame_units();
            this.state = 4139;
            this.window_frame_extent();
            this.state = 4141;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127) {
                {
                this.state = 4140;
                this.window_frame_exclusion();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_units(): Window_frame_unitsContext {
        let localContext = new Window_frame_unitsContext(this.context, this.state);
        this.enterRule(localContext, 728, YQLParser.RULE_window_frame_units);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4143;
            _la = this.tokenStream.LA(1);
            if(!(_la === 152 || _la === 234 || _la === 259)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_extent(): Window_frame_extentContext {
        let localContext = new Window_frame_extentContext(this.context, this.state);
        this.enterRule(localContext, 730, YQLParser.RULE_window_frame_extent);
        try {
            this.state = 4147;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 443, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4145;
                this.window_frame_bound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4146;
                this.window_frame_between();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_between(): Window_frame_betweenContext {
        let localContext = new Window_frame_betweenContext(this.context, this.state);
        this.enterRule(localContext, 732, YQLParser.RULE_window_frame_between);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4149;
            this.match(YQLParser.BETWEEN);
            this.state = 4150;
            this.window_frame_bound();
            this.state = 4151;
            this.match(YQLParser.AND);
            this.state = 4152;
            this.window_frame_bound();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_bound(): Window_frame_boundContext {
        let localContext = new Window_frame_boundContext(this.context, this.state);
        this.enterRule(localContext, 734, YQLParser.RULE_window_frame_bound);
        let _la: number;
        try {
            this.state = 4161;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 445, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4154;
                this.match(YQLParser.CURRENT);
                this.state = 4155;
                this.match(YQLParser.ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4158;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 444, this.context) ) {
                case 1:
                    {
                    this.state = 4156;
                    this.expr();
                    }
                    break;
                case 2:
                    {
                    this.state = 4157;
                    this.match(YQLParser.UNBOUNDED);
                    }
                    break;
                }
                this.state = 4160;
                _la = this.tokenStream.LA(1);
                if(!(_la === 141 || _la === 227)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_exclusion(): Window_frame_exclusionContext {
        let localContext = new Window_frame_exclusionContext(this.context, this.state);
        this.enterRule(localContext, 736, YQLParser.RULE_window_frame_exclusion);
        try {
            this.state = 4173;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 446, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4163;
                this.match(YQLParser.EXCLUDE);
                this.state = 4164;
                this.match(YQLParser.CURRENT);
                this.state = 4165;
                this.match(YQLParser.ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4166;
                this.match(YQLParser.EXCLUDE);
                this.state = 4167;
                this.match(YQLParser.GROUP);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4168;
                this.match(YQLParser.EXCLUDE);
                this.state = 4169;
                this.match(YQLParser.TIES);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4170;
                this.match(YQLParser.EXCLUDE);
                this.state = 4171;
                this.match(YQLParser.NO);
                this.state = 4172;
                this.match(YQLParser.OTHERS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public use_stmt(): Use_stmtContext {
        let localContext = new Use_stmtContext(this.context, this.state);
        this.enterRule(localContext, 738, YQLParser.RULE_use_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4175;
            this.match(YQLParser.USE);
            this.state = 4176;
            this.cluster_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subselect_stmt(): Subselect_stmtContext {
        let localContext = new Subselect_stmtContext(this.context, this.state);
        this.enterRule(localContext, 740, YQLParser.RULE_subselect_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4183;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.LPAREN:
                {
                this.state = 4178;
                this.match(YQLParser.LPAREN);
                this.state = 4179;
                this.select_stmt();
                this.state = 4180;
                this.match(YQLParser.RPAREN);
                }
                break;
            case YQLParser.DISCARD:
            case YQLParser.FROM:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.SELECT:
                {
                this.state = 4182;
                this.select_unparenthesized_stmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public named_nodes_stmt(): Named_nodes_stmtContext {
        let localContext = new Named_nodes_stmtContext(this.context, this.state);
        this.enterRule(localContext, 742, YQLParser.RULE_named_nodes_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4185;
            this.bind_parameter_list();
            this.state = 4186;
            this.match(YQLParser.EQUALS);
            this.state = 4189;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 448, this.context) ) {
            case 1:
                {
                this.state = 4187;
                this.expr();
                }
                break;
            case 2:
                {
                this.state = 4188;
                this.subselect_stmt();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commit_stmt(): Commit_stmtContext {
        let localContext = new Commit_stmtContext(this.context, this.state);
        this.enterRule(localContext, 744, YQLParser.RULE_commit_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4191;
            this.match(YQLParser.COMMIT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollback_stmt(): Rollback_stmtContext {
        let localContext = new Rollback_stmtContext(this.context, this.state);
        this.enterRule(localContext, 746, YQLParser.RULE_rollback_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4193;
            this.match(YQLParser.ROLLBACK);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_table(): Analyze_tableContext {
        let localContext = new Analyze_tableContext(this.context, this.state);
        this.enterRule(localContext, 748, YQLParser.RULE_analyze_table);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4195;
            this.simple_table_ref();
            this.state = 4200;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26) {
                {
                this.state = 4196;
                this.match(YQLParser.LPAREN);
                this.state = 4197;
                this.column_list();
                this.state = 4198;
                this.match(YQLParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_table_list(): Analyze_table_listContext {
        let localContext = new Analyze_table_listContext(this.context, this.state);
        this.enterRule(localContext, 750, YQLParser.RULE_analyze_table_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4202;
            this.analyze_table();
            this.state = 4207;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 450, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4203;
                    this.match(YQLParser.COMMA);
                    this.state = 4204;
                    this.analyze_table();
                    }
                    }
                }
                this.state = 4209;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 450, this.context);
            }
            this.state = 4211;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 4210;
                this.match(YQLParser.COMMA);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_stmt(): Analyze_stmtContext {
        let localContext = new Analyze_stmtContext(this.context, this.state);
        this.enterRule(localContext, 752, YQLParser.RULE_analyze_stmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4213;
            this.match(YQLParser.ANALYZE);
            this.state = 4214;
            this.analyze_table_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 754, YQLParser.RULE_identifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4216;
            _la = this.tokenStream.LA(1);
            if(!(_la === 320 || _la === 321)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id(): IdContext {
        let localContext = new IdContext(this.context, this.state);
        this.enterRule(localContext, 756, YQLParser.RULE_id);
        try {
            this.state = 4220;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4218;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4219;
                this.keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_schema(): Id_schemaContext {
        let localContext = new Id_schemaContext(this.context, this.state);
        this.enterRule(localContext, 758, YQLParser.RULE_id_schema);
        try {
            this.state = 4229;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4222;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4223;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4224;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4225;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4226;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4227;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4228;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_expr(): Id_exprContext {
        let localContext = new Id_exprContext(this.context, this.state);
        this.enterRule(localContext, 760, YQLParser.RULE_id_expr);
        try {
            this.state = 4237;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4231;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4232;
                this.keyword_compat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4233;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4234;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4235;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4236;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_expr_in(): Id_expr_inContext {
        let localContext = new Id_expr_inContext(this.context, this.state);
        this.enterRule(localContext, 762, YQLParser.RULE_id_expr_in);
        try {
            this.state = 4244;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4239;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4240;
                this.keyword_compat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4241;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4242;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4243;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_window(): Id_windowContext {
        let localContext = new Id_windowContext(this.context, this.state);
        this.enterRule(localContext, 764, YQLParser.RULE_id_window);
        try {
            this.state = 4254;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4246;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4247;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4248;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ANY:
            case YQLParser.ERASE:
            case YQLParser.STREAM:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4249;
                this.keyword_table_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4250;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4251;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4252;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4253;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_table(): Id_tableContext {
        let localContext = new Id_tableContext(this.context, this.state);
        this.enterRule(localContext, 766, YQLParser.RULE_id_table);
        try {
            this.state = 4263;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4256;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4257;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4258;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4259;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4260;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4261;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4262;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_without(): Id_withoutContext {
        let localContext = new Id_withoutContext(this.context, this.state);
        this.enterRule(localContext, 768, YQLParser.RULE_id_without);
        try {
            this.state = 4272;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4265;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4266;
                this.keyword_compat();
                }
                break;
            case YQLParser.ANY:
            case YQLParser.ERASE:
            case YQLParser.STREAM:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4267;
                this.keyword_table_uncompat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4268;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4269;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4270;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4271;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_hint(): Id_hintContext {
        let localContext = new Id_hintContext(this.context, this.state);
        this.enterRule(localContext, 770, YQLParser.RULE_id_hint);
        try {
            this.state = 4282;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4274;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4275;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4276;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ANY:
            case YQLParser.ERASE:
            case YQLParser.STREAM:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4277;
                this.keyword_table_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4278;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4279;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4280;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4281;
                this.keyword_window_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_as_compat(): Id_as_compatContext {
        let localContext = new Id_as_compatContext(this.context, this.state);
        this.enterRule(localContext, 772, YQLParser.RULE_id_as_compat);
        try {
            this.state = 4286;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4284;
                this.identifier();
                }
                break;
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.LAST:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIRTUAL:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4285;
                this.keyword_as_compat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id(): An_idContext {
        let localContext = new An_idContext(this.context, this.state);
        this.enterRule(localContext, 774, YQLParser.RULE_an_id);
        try {
            this.state = 4290;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4288;
                this.id();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4289;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_or_type(): An_id_or_typeContext {
        let localContext = new An_id_or_typeContext(this.context, this.state);
        this.enterRule(localContext, 776, YQLParser.RULE_an_id_or_type);
        try {
            this.state = 4294;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CALLABLE:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DICT:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ENUM:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FLOW:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LIST:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OPTIONAL:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESOURCE:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SET:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.STRUCT:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TAGGED:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TUPLE:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VARIANT:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4292;
                this.id_or_type();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4293;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_schema(): An_id_schemaContext {
        let localContext = new An_id_schemaContext(this.context, this.state);
        this.enterRule(localContext, 778, YQLParser.RULE_an_id_schema);
        try {
            this.state = 4298;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4296;
                this.id_schema();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4297;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_expr(): An_id_exprContext {
        let localContext = new An_id_exprContext(this.context, this.state);
        this.enterRule(localContext, 780, YQLParser.RULE_an_id_expr);
        try {
            this.state = 4302;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4300;
                this.id_expr();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4301;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_expr_in(): An_id_expr_inContext {
        let localContext = new An_id_expr_inContext(this.context, this.state);
        this.enterRule(localContext, 782, YQLParser.RULE_an_id_expr_in);
        try {
            this.state = 4306;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4304;
                this.id_expr_in();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4305;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_window(): An_id_windowContext {
        let localContext = new An_id_windowContext(this.context, this.state);
        this.enterRule(localContext, 784, YQLParser.RULE_an_id_window);
        try {
            this.state = 4310;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4308;
                this.id_window();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4309;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_table(): An_id_tableContext {
        let localContext = new An_id_tableContext(this.context, this.state);
        this.enterRule(localContext, 786, YQLParser.RULE_an_id_table);
        try {
            this.state = 4314;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4312;
                this.id_table();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4313;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_without(): An_id_withoutContext {
        let localContext = new An_id_withoutContext(this.context, this.state);
        this.enterRule(localContext, 788, YQLParser.RULE_an_id_without);
        try {
            this.state = 4318;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4316;
                this.id_without();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4317;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_hint(): An_id_hintContext {
        let localContext = new An_id_hintContext(this.context, this.state);
        this.enterRule(localContext, 790, YQLParser.RULE_an_id_hint);
        try {
            this.state = 4322;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4320;
                this.id_hint();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4321;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_pure(): An_id_pureContext {
        let localContext = new An_id_pureContext(this.context, this.state);
        this.enterRule(localContext, 792, YQLParser.RULE_an_id_pure);
        try {
            this.state = 4326;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4324;
                this.identifier();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4325;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public an_id_as_compat(): An_id_as_compatContext {
        let localContext = new An_id_as_compatContext(this.context, this.state);
        this.enterRule(localContext, 794, YQLParser.RULE_an_id_as_compat);
        try {
            this.state = 4330;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.LAST:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIRTUAL:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4328;
                this.id_as_compat();
                }
                break;
            case YQLParser.STRING_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4329;
                this.match(YQLParser.STRING_VALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public view_name(): View_nameContext {
        let localContext = new View_nameContext(this.context, this.state);
        this.enterRule(localContext, 796, YQLParser.RULE_view_name);
        try {
            this.state = 4335;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 472, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4332;
                this.an_id();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4333;
                this.match(YQLParser.PRIMARY);
                this.state = 4334;
                this.match(YQLParser.KEY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_id_prefix(): Opt_id_prefixContext {
        let localContext = new Opt_id_prefixContext(this.context, this.state);
        this.enterRule(localContext, 798, YQLParser.RULE_opt_id_prefix);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4340;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 473, this.context) ) {
            case 1:
                {
                this.state = 4337;
                this.an_id();
                this.state = 4338;
                this.match(YQLParser.DOT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cluster_expr(): Cluster_exprContext {
        let localContext = new Cluster_exprContext(this.context, this.state);
        this.enterRule(localContext, 800, YQLParser.RULE_cluster_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4345;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 474, this.context) ) {
            case 1:
                {
                this.state = 4342;
                this.an_id();
                this.state = 4343;
                this.match(YQLParser.COLON);
                }
                break;
            }
            this.state = 4349;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.DOLLAR:
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                {
                this.state = 4347;
                this.pure_column_or_named();
                }
                break;
            case YQLParser.ASTERISK:
                {
                this.state = 4348;
                this.match(YQLParser.ASTERISK);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_or_type(): Id_or_typeContext {
        let localContext = new Id_or_typeContext(this.context, this.state);
        this.enterRule(localContext, 802, YQLParser.RULE_id_or_type);
        try {
            this.state = 4353;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ANY:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMN:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERASE:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.STREAM:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4351;
                this.id();
                }
                break;
            case YQLParser.CALLABLE:
            case YQLParser.DICT:
            case YQLParser.ENUM:
            case YQLParser.FLOW:
            case YQLParser.LIST:
            case YQLParser.OPTIONAL:
            case YQLParser.RESOURCE:
            case YQLParser.SET:
            case YQLParser.STRUCT:
            case YQLParser.TAGGED:
            case YQLParser.TUPLE:
            case YQLParser.VARIANT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4352;
                this.type_id();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_id_prefix_or_type(): Opt_id_prefix_or_typeContext {
        let localContext = new Opt_id_prefix_or_typeContext(this.context, this.state);
        this.enterRule(localContext, 804, YQLParser.RULE_opt_id_prefix_or_type);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4358;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 477, this.context) ) {
            case 1:
                {
                this.state = 4355;
                this.an_id_or_type();
                this.state = 4356;
                this.match(YQLParser.DOT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_or_at(): Id_or_atContext {
        let localContext = new Id_or_atContext(this.context, this.state);
        this.enterRule(localContext, 806, YQLParser.RULE_id_or_at);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4361;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30) {
                {
                this.state = 4360;
                this.match(YQLParser.AT);
                }
            }

            this.state = 4363;
            this.an_id_or_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_table_or_type(): Id_table_or_typeContext {
        let localContext = new Id_table_or_typeContext(this.context, this.state);
        this.enterRule(localContext, 808, YQLParser.RULE_id_table_or_type);
        try {
            this.state = 4367;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALL:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.AS:
            case YQLParser.ASC:
            case YQLParser.ASSUME:
            case YQLParser.ASYMMETRIC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COLUMNS:
            case YQLParser.COMMIT:
            case YQLParser.COMPACT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CUBE:
            case YQLParser.CURRENT:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DISTINCT:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCEPT:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXISTS:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.GROUPS:
            case YQLParser.HASH:
            case YQLParser.HAVING:
            case YQLParser.HOP:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTERSECT:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.LIMIT:
            case YQLParser.LOCAL:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOT:
            case YQLParser.NOTNULL:
            case YQLParser.NULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.PROCESS:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.RANGE:
            case YQLParser.REDUCE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROLLUP:
            case YQLParser.ROW:
            case YQLParser.ROWS:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SCHEMA:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SELECT:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYMMETRIC:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNBOUNDED:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNION:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
            case YQLParser.WINDOW:
            case YQLParser.WITH:
            case YQLParser.WITHOUT:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
            case YQLParser.STRING_VALUE:
            case YQLParser.ID_PLAIN:
            case YQLParser.ID_QUOTED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4365;
                this.an_id_table();
                }
                break;
            case YQLParser.CALLABLE:
            case YQLParser.DICT:
            case YQLParser.ENUM:
            case YQLParser.FLOW:
            case YQLParser.LIST:
            case YQLParser.OPTIONAL:
            case YQLParser.RESOURCE:
            case YQLParser.SET:
            case YQLParser.STRUCT:
            case YQLParser.TAGGED:
            case YQLParser.TUPLE:
            case YQLParser.VARIANT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4366;
                this.type_id();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_table_or_at(): Id_table_or_atContext {
        let localContext = new Id_table_or_atContext(this.context, this.state);
        this.enterRule(localContext, 810, YQLParser.RULE_id_table_or_at);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4370;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30) {
                {
                this.state = 4369;
                this.match(YQLParser.AT);
                }
            }

            this.state = 4372;
            this.id_table_or_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword(): KeywordContext {
        let localContext = new KeywordContext(this.context, this.state);
        this.enterRule(localContext, 812, YQLParser.RULE_keyword);
        try {
            this.state = 4382;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case YQLParser.ABORT:
            case YQLParser.ACTION:
            case YQLParser.ADD:
            case YQLParser.AFTER:
            case YQLParser.ALTER:
            case YQLParser.ANALYZE:
            case YQLParser.AND:
            case YQLParser.ANSI:
            case YQLParser.ARRAY:
            case YQLParser.ASC:
            case YQLParser.ASYNC:
            case YQLParser.ATTACH:
            case YQLParser.ATTRIBUTES:
            case YQLParser.AUTOINCREMENT:
            case YQLParser.BACKUP:
            case YQLParser.COLLECTION:
            case YQLParser.BEFORE:
            case YQLParser.BEGIN:
            case YQLParser.BERNOULLI:
            case YQLParser.BY:
            case YQLParser.CASCADE:
            case YQLParser.CHANGEFEED:
            case YQLParser.CHECK:
            case YQLParser.CLASSIFIER:
            case YQLParser.COLLATE:
            case YQLParser.COMMIT:
            case YQLParser.CONDITIONAL:
            case YQLParser.CONFLICT:
            case YQLParser.CONNECT:
            case YQLParser.CONSTRAINT:
            case YQLParser.CONSUMER:
            case YQLParser.COVER:
            case YQLParser.CREATE:
            case YQLParser.CROSS:
            case YQLParser.CURRENT:
            case YQLParser.DATA:
            case YQLParser.DATABASE:
            case YQLParser.DECIMAL:
            case YQLParser.DECLARE:
            case YQLParser.DEFAULT:
            case YQLParser.DEFERRABLE:
            case YQLParser.DEFERRED:
            case YQLParser.DEFINE:
            case YQLParser.DELETE:
            case YQLParser.DESC:
            case YQLParser.DESCRIBE:
            case YQLParser.DETACH:
            case YQLParser.DIRECTORY:
            case YQLParser.DISABLE:
            case YQLParser.DISCARD:
            case YQLParser.DO:
            case YQLParser.DROP:
            case YQLParser.EACH:
            case YQLParser.ELSE:
            case YQLParser.EMPTY:
            case YQLParser.ENCRYPTED:
            case YQLParser.END:
            case YQLParser.ERROR:
            case YQLParser.ESCAPE:
            case YQLParser.EVALUATE:
            case YQLParser.EXCLUDE:
            case YQLParser.EXCLUSION:
            case YQLParser.EXCLUSIVE:
            case YQLParser.EXPLAIN:
            case YQLParser.EXPORT:
            case YQLParser.EXTERNAL:
            case YQLParser.FAIL:
            case YQLParser.FAMILY:
            case YQLParser.FILTER:
            case YQLParser.FIRST:
            case YQLParser.FLATTEN:
            case YQLParser.FOLLOWING:
            case YQLParser.FOR:
            case YQLParser.FOREIGN:
            case YQLParser.FUNCTION:
            case YQLParser.GLOB:
            case YQLParser.GRANT:
            case YQLParser.GROUP:
            case YQLParser.GROUPING:
            case YQLParser.HASH:
            case YQLParser.IF:
            case YQLParser.IGNORE:
            case YQLParser.ILIKE:
            case YQLParser.IMMEDIATE:
            case YQLParser.IMPORT:
            case YQLParser.IN:
            case YQLParser.INDEX:
            case YQLParser.INDEXED:
            case YQLParser.INHERITS:
            case YQLParser.INITIAL:
            case YQLParser.INITIALLY:
            case YQLParser.INNER:
            case YQLParser.INSERT:
            case YQLParser.INSTEAD:
            case YQLParser.INTO:
            case YQLParser.IS:
            case YQLParser.ISNULL:
            case YQLParser.JOIN:
            case YQLParser.KEY:
            case YQLParser.LAST:
            case YQLParser.LEFT:
            case YQLParser.LEGACY:
            case YQLParser.LIKE:
            case YQLParser.MANAGE:
            case YQLParser.MATCH:
            case YQLParser.MATCHES:
            case YQLParser.MATCH_RECOGNIZE:
            case YQLParser.MEASURES:
            case YQLParser.MICROSECONDS:
            case YQLParser.MILLISECONDS:
            case YQLParser.MODIFY:
            case YQLParser.NANOSECONDS:
            case YQLParser.NATURAL:
            case YQLParser.NEXT:
            case YQLParser.NO:
            case YQLParser.NOTNULL:
            case YQLParser.NULLS:
            case YQLParser.OBJECT:
            case YQLParser.OF:
            case YQLParser.OFFSET:
            case YQLParser.OMIT:
            case YQLParser.ON:
            case YQLParser.ONE:
            case YQLParser.ONLY:
            case YQLParser.OPTION:
            case YQLParser.OR:
            case YQLParser.ORDER:
            case YQLParser.OTHERS:
            case YQLParser.OUTER:
            case YQLParser.OVER:
            case YQLParser.PARALLEL:
            case YQLParser.PARTITION:
            case YQLParser.PASSING:
            case YQLParser.PASSWORD:
            case YQLParser.PAST:
            case YQLParser.PATTERN:
            case YQLParser.PER:
            case YQLParser.PERMUTE:
            case YQLParser.PLAN:
            case YQLParser.POOL:
            case YQLParser.PRAGMA:
            case YQLParser.PRECEDING:
            case YQLParser.PRESORT:
            case YQLParser.PRIMARY:
            case YQLParser.PRIVILEGES:
            case YQLParser.QUEUE:
            case YQLParser.RAISE:
            case YQLParser.REFERENCES:
            case YQLParser.REGEXP:
            case YQLParser.REINDEX:
            case YQLParser.RELEASE:
            case YQLParser.REMOVE:
            case YQLParser.RENAME:
            case YQLParser.REPLACE:
            case YQLParser.REPLICATION:
            case YQLParser.RESET:
            case YQLParser.RESPECT:
            case YQLParser.RESTRICT:
            case YQLParser.RESULT:
            case YQLParser.REVERT:
            case YQLParser.REVOKE:
            case YQLParser.RIGHT:
            case YQLParser.RLIKE:
            case YQLParser.ROLLBACK:
            case YQLParser.ROW:
            case YQLParser.SAMPLE:
            case YQLParser.SAVEPOINT:
            case YQLParser.SECONDS:
            case YQLParser.SEEK:
            case YQLParser.SEMI:
            case YQLParser.SETS:
            case YQLParser.SHOW:
            case YQLParser.TSKIP:
            case YQLParser.SOURCE:
            case YQLParser.SUBQUERY:
            case YQLParser.SUBSET:
            case YQLParser.SYMBOLS:
            case YQLParser.SYNC:
            case YQLParser.SYSTEM:
            case YQLParser.TABLE:
            case YQLParser.TABLES:
            case YQLParser.TABLESAMPLE:
            case YQLParser.TABLESTORE:
            case YQLParser.TEMP:
            case YQLParser.TEMPORARY:
            case YQLParser.THEN:
            case YQLParser.TIES:
            case YQLParser.TO:
            case YQLParser.TOPIC:
            case YQLParser.TRANSACTION:
            case YQLParser.TRIGGER:
            case YQLParser.TYPE:
            case YQLParser.UNCONDITIONAL:
            case YQLParser.UNIQUE:
            case YQLParser.UNKNOWN:
            case YQLParser.UNMATCHED:
            case YQLParser.UPDATE:
            case YQLParser.UPSERT:
            case YQLParser.USE:
            case YQLParser.USER:
            case YQLParser.USING:
            case YQLParser.VACUUM:
            case YQLParser.VALUES:
            case YQLParser.VIEW:
            case YQLParser.VIRTUAL:
            case YQLParser.WITH:
            case YQLParser.WRAPPER:
            case YQLParser.XOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4374;
                this.keyword_compat();
                }
                break;
            case YQLParser.ASYMMETRIC:
            case YQLParser.BETWEEN:
            case YQLParser.BITCAST:
            case YQLParser.CASE:
            case YQLParser.CAST:
            case YQLParser.CUBE:
            case YQLParser.CURRENT_DATE:
            case YQLParser.CURRENT_TIME:
            case YQLParser.CURRENT_TIMESTAMP:
            case YQLParser.EMPTY_ACTION:
            case YQLParser.EXISTS:
            case YQLParser.FROM:
            case YQLParser.FULL:
            case YQLParser.HOP:
            case YQLParser.JSON_EXISTS:
            case YQLParser.JSON_QUERY:
            case YQLParser.JSON_VALUE:
            case YQLParser.LOCAL:
            case YQLParser.NOT:
            case YQLParser.NULL:
            case YQLParser.PROCESS:
            case YQLParser.REDUCE:
            case YQLParser.RETURN:
            case YQLParser.RETURNING:
            case YQLParser.ROLLUP:
            case YQLParser.SELECT:
            case YQLParser.SYMMETRIC:
            case YQLParser.UNBOUNDED:
            case YQLParser.WHEN:
            case YQLParser.WHERE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4375;
                this.keyword_expr_uncompat();
                }
                break;
            case YQLParser.ANY:
            case YQLParser.ERASE:
            case YQLParser.STREAM:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4376;
                this.keyword_table_uncompat();
                }
                break;
            case YQLParser.ALL:
            case YQLParser.AS:
            case YQLParser.ASSUME:
            case YQLParser.DISTINCT:
            case YQLParser.EXCEPT:
            case YQLParser.HAVING:
            case YQLParser.INTERSECT:
            case YQLParser.LIMIT:
            case YQLParser.UNION:
            case YQLParser.WINDOW:
            case YQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4377;
                this.keyword_select_uncompat();
                }
                break;
            case YQLParser.COLUMN:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4378;
                this.keyword_alter_uncompat();
                }
                break;
            case YQLParser.COMPACT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4379;
                this.keyword_in_uncompat();
                }
                break;
            case YQLParser.GROUPS:
            case YQLParser.RANGE:
            case YQLParser.ROWS:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4380;
                this.keyword_window_uncompat();
                }
                break;
            case YQLParser.COLUMNS:
            case YQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4381;
                this.keyword_hint_uncompat();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext {
        let localContext = new Keyword_expr_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 814, YQLParser.RULE_keyword_expr_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4384;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 57)) & ~0x1F) === 0 && ((1 << (_la - 57)) & 202753) !== 0) || ((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 134217757) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 33603585) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 41944071) !== 0) || ((((_la - 231)) & ~0x1F) === 0 && ((1 << (_la - 231)) & 68681745) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 2147487745) !== 0) || _la === 312 || _la === 313)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext {
        let localContext = new Keyword_table_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 816, YQLParser.RULE_keyword_table_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4386;
            _la = this.tokenStream.LA(1);
            if(!(_la === 52 || _la === 122 || _la === 272)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext {
        let localContext = new Keyword_select_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 818, YQLParser.RULE_keyword_select_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4388;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 641) !== 0) || _la === 112 || _la === 126 || ((((_la - 154)) & ~0x1F) === 0 && ((1 << (_la - 154)) & 536936449) !== 0) || ((((_la - 298)) & ~0x1F) === 0 && ((1 << (_la - 298)) & 327681) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext {
        let localContext = new Keyword_alter_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 820, YQLParser.RULE_keyword_alter_uncompat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4390;
            this.match(YQLParser.COLUMN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext {
        let localContext = new Keyword_in_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 822, YQLParser.RULE_keyword_in_uncompat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4392;
            this.match(YQLParser.COMPACT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext {
        let localContext = new Keyword_window_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 824, YQLParser.RULE_keyword_window_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4394;
            _la = this.tokenStream.LA(1);
            if(!(_la === 152 || _la === 234 || _la === 259)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext {
        let localContext = new Keyword_hint_uncompatContext(this.context, this.state);
        this.enterRule(localContext, 826, YQLParser.RULE_keyword_hint_uncompat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4396;
            _la = this.tokenStream.LA(1);
            if(!(_la === 80 || _la === 262)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_as_compat(): Keyword_as_compatContext {
        let localContext = new Keyword_as_compatContext(this.context, this.state);
        this.enterRule(localContext, 828, YQLParser.RULE_keyword_as_compat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4398;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 43)) & ~0x1F) === 0 && ((1 << (_la - 43)) & 704091631) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 4024598343) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4015470493) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 1878941085) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 3338636547) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 1845487479) !== 0) || ((((_la - 236)) & ~0x1F) === 0 && ((1 << (_la - 236)) & 442178495) !== 0) || ((((_la - 268)) & ~0x1F) === 0 && ((1 << (_la - 268)) & 2852060623) !== 0) || ((((_la - 300)) & ~0x1F) === 0 && ((1 << (_la - 300)) & 395711) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword_compat(): Keyword_compatContext {
        let localContext = new Keyword_compatContext(this.context, this.state);
        this.enterRule(localContext, 830, YQLParser.RULE_keyword_compat);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4400;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 43)) & ~0x1F) === 0 && ((1 << (_la - 43)) & 704091631) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 4293066575) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4017567709) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 2147376541) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 3623849871) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 1879048063) !== 0) || ((((_la - 236)) & ~0x1F) === 0 && ((1 << (_la - 236)) & 1532967871) !== 0) || ((((_la - 268)) & ~0x1F) === 0 && ((1 << (_la - 268)) & 2852060623) !== 0) || ((((_la - 300)) & ~0x1F) === 0 && ((1 << (_la - 300)) & 429567) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_id(): Type_idContext {
        let localContext = new Type_idContext(this.context, this.state);
        this.enterRule(localContext, 832, YQLParser.RULE_type_id);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4402;
            _la = this.tokenStream.LA(1);
            if(!(_la === 71 || _la === 108 || _la === 121 || _la === 140 || _la === 184 || _la === 210 || ((((_la - 246)) & ~0x1F) === 0 && ((1 << (_la - 246)) & 136314881) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & 33555457) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bool_value(): Bool_valueContext {
        let localContext = new Bool_valueContext(this.context, this.state);
        this.enterRule(localContext, 834, YQLParser.RULE_bool_value);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4404;
            _la = this.tokenStream.LA(1);
            if(!(_la === 135 || _la === 293)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public real(): RealContext {
        let localContext = new RealContext(this.context, this.state);
        this.enterRule(localContext, 836, YQLParser.RULE_real);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4406;
            this.match(YQLParser.REAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public integer(): IntegerContext {
        let localContext = new IntegerContext(this.context, this.state);
        this.enterRule(localContext, 838, YQLParser.RULE_integer);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4408;
            _la = this.tokenStream.LA(1);
            if(!(_la === 322 || _la === 323)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public static readonly _serializedATN: number[] = [
        4,1,332,4411,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,1,0,1,0,1,0,1,0,1,0,3,0,846,8,0,1,
        1,5,1,849,8,1,10,1,12,1,852,9,1,1,1,1,1,4,1,856,8,1,11,1,12,1,857,
        1,1,5,1,861,8,1,10,1,12,1,864,9,1,1,1,5,1,867,8,1,10,1,12,1,870,
        9,1,1,1,1,1,1,2,5,2,875,8,2,10,2,12,2,878,9,2,1,2,1,2,1,3,5,3,883,
        8,3,10,3,12,3,886,9,3,1,3,1,3,4,3,890,8,3,11,3,12,3,891,5,3,894,
        8,3,10,3,12,3,897,9,3,1,3,1,3,1,3,5,3,902,8,3,10,3,12,3,905,9,3,
        1,4,1,4,3,4,909,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,918,8,5,3,5,
        920,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,978,8,6,1,7,1,7,1,7,
        5,7,983,8,7,10,7,12,7,986,9,7,1,7,3,7,989,8,7,1,8,1,8,1,8,5,8,994,
        8,8,10,8,12,8,997,9,8,1,9,1,9,1,9,5,9,1002,8,9,10,9,12,9,1005,9,
        9,1,10,1,10,3,10,1009,8,10,1,11,1,11,3,11,1013,8,11,1,11,1,11,1,
        11,1,12,3,12,1019,8,12,1,12,1,12,1,12,1,12,3,12,1025,8,12,1,12,3,
        12,1028,8,12,1,12,1,12,3,12,1032,8,12,1,12,1,12,1,12,1,12,1,12,1,
        12,3,12,1040,8,12,1,12,1,12,3,12,1044,8,12,1,12,3,12,1047,8,12,1,
        12,1,12,3,12,1051,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,3,12,1062,8,12,1,12,4,12,1065,8,12,11,12,12,12,1066,3,12,1069,
        8,12,1,13,1,13,1,14,1,14,1,14,5,14,1076,8,14,10,14,12,14,1079,9,
        14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,3,18,1099,8,18,1,18,5,18,1102,8,18,10,
        18,12,18,1105,9,18,1,18,1,18,1,18,1,18,4,18,1111,8,18,11,18,12,18,
        1112,3,18,1115,8,18,1,19,1,19,1,19,5,19,1120,8,19,10,19,12,19,1123,
        9,19,1,20,1,20,1,20,5,20,1128,8,20,10,20,12,20,1131,9,20,1,21,1,
        21,1,21,5,21,1136,8,21,10,21,12,21,1139,9,21,1,22,1,22,1,22,1,22,
        3,22,1145,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1155,
        8,24,3,24,1157,8,24,5,24,1159,8,24,10,24,12,24,1162,9,24,1,24,1,
        24,3,24,1166,8,24,1,25,1,25,3,25,1170,8,25,1,25,1,25,1,26,1,26,3,
        26,1176,8,26,1,26,1,26,1,27,1,27,3,27,1182,8,27,1,28,1,28,3,28,1186,
        8,28,1,29,1,29,3,29,1190,8,29,1,29,3,29,1193,8,29,1,29,1,29,1,30,
        1,30,1,30,3,30,1200,8,30,1,30,1,30,1,30,1,30,3,30,1206,8,30,5,30,
        1208,8,30,10,30,12,30,1211,9,30,1,31,1,31,3,31,1215,8,31,1,31,3,
        31,1218,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,
        32,1230,8,32,10,32,12,32,1233,9,32,1,33,1,33,3,33,1237,8,33,1,33,
        3,33,1240,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,3,34,1254,8,34,1,34,1,34,1,34,1,34,1,34,3,34,1261,8,34,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1272,8,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1283,8,35,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,
        1,38,1,38,1,38,3,38,1303,8,38,1,38,1,38,1,39,1,39,3,39,1309,8,39,
        1,39,4,39,1312,8,39,11,39,12,39,1313,1,39,1,39,3,39,1318,8,39,1,
        39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1332,
        8,40,3,40,1334,8,40,1,41,1,41,1,42,1,42,1,42,3,42,1341,8,42,1,43,
        1,43,1,44,1,44,3,44,1347,8,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,
        5,46,1356,8,46,10,46,12,46,1359,9,46,1,47,1,47,1,47,1,47,1,47,3,
        47,1366,8,47,1,48,1,48,1,48,1,48,3,48,1372,8,48,1,49,1,49,1,49,1,
        49,1,49,3,49,1379,8,49,1,49,1,49,1,49,1,49,5,49,1385,8,49,10,49,
        12,49,1388,9,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,
        3,51,1400,8,51,1,51,1,51,1,52,1,52,3,52,1406,8,52,1,52,1,52,3,52,
        1410,8,52,1,52,3,52,1413,8,52,3,52,1415,8,52,1,53,1,53,1,53,1,53,
        1,53,1,53,3,53,1423,8,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1431,
        8,54,1,54,1,54,1,54,1,54,3,54,1437,8,54,1,54,1,54,1,54,1,54,3,54,
        1443,8,54,1,54,1,54,1,55,1,55,3,55,1449,8,55,1,55,3,55,1452,8,55,
        1,55,1,55,1,56,1,56,1,56,5,56,1459,8,56,10,56,12,56,1462,9,56,1,
        57,1,57,1,57,1,57,5,57,1468,8,57,10,57,12,57,1471,9,57,1,57,1,57,
        1,58,1,58,3,58,1477,8,58,1,59,1,59,1,59,1,59,5,59,1483,8,59,10,59,
        12,59,1486,9,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,
        3,61,1498,8,61,1,62,1,62,1,62,5,62,1503,8,62,10,62,12,62,1506,9,
        62,1,62,3,62,1509,8,62,1,63,1,63,1,63,5,63,1514,8,63,10,63,12,63,
        1517,9,63,1,63,3,63,1520,8,63,1,64,1,64,1,64,3,64,1525,8,64,1,65,
        1,65,1,65,5,65,1530,8,65,10,65,12,65,1533,9,65,1,66,1,66,1,66,1,
        66,3,66,1539,8,66,1,66,3,66,1542,8,66,1,66,1,66,1,66,1,67,1,67,3,
        67,1549,8,67,1,67,1,67,3,67,1553,8,67,1,68,1,68,1,68,1,68,1,68,1,
        68,1,68,1,68,3,68,1563,8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,
        70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
        71,3,71,1586,8,71,1,72,1,72,1,72,1,72,3,72,1592,8,72,1,73,1,73,3,
        73,1596,8,73,1,74,1,74,1,74,5,74,1601,8,74,10,74,12,74,1604,9,74,
        1,75,1,75,1,75,3,75,1609,8,75,1,76,1,76,1,76,5,76,1614,8,76,10,76,
        12,76,1617,9,76,1,77,3,77,1620,8,77,1,77,1,77,3,77,1624,8,77,1,78,
        1,78,1,79,1,79,3,79,1630,8,79,1,80,1,80,1,80,3,80,1635,8,80,1,81,
        1,81,1,81,1,81,1,82,1,82,1,82,3,82,1644,8,82,1,82,3,82,1647,8,82,
        1,82,1,82,1,82,1,82,3,82,1653,8,82,1,83,1,83,1,83,3,83,1658,8,83,
        1,83,1,83,1,84,1,84,1,84,1,84,3,84,1666,8,84,1,85,1,85,1,85,5,85,
        1671,8,85,10,85,12,85,1674,9,85,1,86,1,86,1,86,1,86,1,86,1,86,1,
        86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,5,88,1693,8,
        88,10,88,12,88,1696,9,88,1,88,3,88,1699,8,88,3,88,1701,8,88,1,88,
        1,88,3,88,1705,8,88,1,89,1,89,1,89,1,89,1,89,5,89,1712,8,89,10,89,
        12,89,1715,9,89,1,89,3,89,1718,8,89,3,89,1720,8,89,1,89,1,89,3,89,
        1724,8,89,1,90,1,90,1,90,1,90,1,90,5,90,1731,8,90,10,90,12,90,1734,
        9,90,1,90,3,90,1737,8,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,
        1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,
        5,96,1773,8,96,10,96,12,96,1776,9,96,1,96,3,96,1779,8,96,1,96,1,
        96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        99,1,99,1,99,1,99,3,99,1799,8,99,1,99,3,99,1802,8,99,1,99,1,99,1,
        99,1,99,3,99,1808,8,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,
        1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,
        1828,8,100,1,100,5,100,1831,8,100,10,100,12,100,1834,9,100,1,101,
        1,101,1,101,3,101,1839,8,101,1,101,5,101,1842,8,101,10,101,12,101,
        1845,9,101,3,101,1847,8,101,1,102,1,102,3,102,1851,8,102,1,103,1,
        103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,3,104,1878,8,104,1,105,1,105,1,105,1,105,1,105,1,105,
        3,105,1886,8,105,1,106,3,106,1889,8,106,1,106,1,106,1,106,5,106,
        1894,8,106,10,106,12,106,1897,9,106,1,107,1,107,1,107,1,107,1,107,
        1,108,1,108,1,108,1,109,1,109,3,109,1909,8,109,1,109,1,109,3,109,
        1913,8,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,111,1,111,
        1,111,3,111,1925,8,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,5,112,1936,8,112,10,112,12,112,1939,9,112,1,112,1,112,
        3,112,1943,8,112,1,113,1,113,1,113,1,113,1,113,3,113,1950,8,113,
        1,114,1,114,3,114,1954,8,114,1,115,1,115,1,115,5,115,1959,8,115,
        10,115,12,115,1962,9,115,1,116,1,116,1,116,1,116,5,116,1968,8,116,
        10,116,12,116,1971,9,116,1,117,1,117,1,117,1,117,5,117,1977,8,117,
        10,117,12,117,1980,9,117,1,118,1,118,1,118,1,118,1,118,3,118,1987,
        8,118,1,119,1,119,3,119,1991,8,119,1,119,1,119,3,119,1995,8,119,
        1,120,1,120,1,120,1,120,1,120,3,120,2002,8,120,3,120,2004,8,120,
        1,121,3,121,2007,8,121,1,121,1,121,1,121,3,121,2012,8,121,1,121,
        1,121,1,121,3,121,2017,8,121,1,122,1,122,3,122,2021,8,122,1,122,
        1,122,1,122,5,122,2026,8,122,10,122,12,122,2029,9,122,1,122,1,122,
        1,122,1,122,3,122,2035,8,122,1,122,1,122,3,122,2039,8,122,1,122,
        1,122,3,122,2043,8,122,1,122,1,122,3,122,2047,8,122,1,122,1,122,
        3,122,2051,8,122,3,122,2053,8,122,1,123,1,123,1,123,1,123,1,124,
        1,124,1,124,5,124,2062,8,124,10,124,12,124,2065,9,124,1,125,1,125,
        1,125,1,125,5,125,2071,8,125,10,125,12,125,2074,9,125,1,125,1,125,
        3,125,2078,8,125,1,125,1,125,1,125,1,125,3,125,2084,8,125,1,125,
        1,125,1,125,3,125,2089,8,125,1,125,1,125,3,125,2093,8,125,1,125,
        1,125,3,125,2097,8,125,1,125,1,125,3,125,2101,8,125,1,126,3,126,
        2104,8,126,1,127,1,127,3,127,2108,8,127,1,127,1,127,3,127,2112,8,
        127,1,127,1,127,1,127,1,127,5,127,2118,8,127,10,127,12,127,2121,
        9,127,1,127,3,127,2124,8,127,1,127,1,127,3,127,2128,8,127,1,127,
        1,127,3,127,2132,8,127,1,127,1,127,3,127,2136,8,127,1,127,3,127,
        2139,8,127,1,127,1,127,3,127,2143,8,127,1,127,3,127,2146,8,127,1,
        127,3,127,2149,8,127,1,128,1,128,1,128,3,128,2154,8,128,1,128,3,
        128,2157,8,128,1,128,3,128,2160,8,128,1,128,3,128,2163,8,128,1,128,
        1,128,1,128,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,
        3,129,2177,8,129,3,129,2179,8,129,1,130,1,130,1,130,1,130,1,130,
        1,130,1,130,1,130,1,130,3,130,2190,8,130,1,131,1,131,1,131,1,132,
        1,132,1,132,5,132,2198,8,132,10,132,12,132,2201,9,132,1,133,1,133,
        1,133,1,133,1,134,1,134,1,134,3,134,2210,8,134,1,134,3,134,2213,
        8,134,1,134,1,134,1,134,1,134,1,134,3,134,2220,8,134,1,134,1,134,
        1,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,3,135,2244,
        8,135,1,136,1,136,1,137,1,137,1,138,1,138,1,138,5,138,2253,8,138,
        10,138,12,138,2256,9,138,1,139,4,139,2259,8,139,11,139,12,139,2260,
        1,140,1,140,3,140,2265,8,140,1,141,1,141,3,141,2269,8,141,1,141,
        1,141,3,141,2273,8,141,1,141,1,141,3,141,2277,8,141,1,141,1,141,
        3,141,2281,8,141,1,141,1,141,3,141,2285,8,141,1,141,1,141,3,141,
        2289,8,141,1,141,1,141,1,141,1,141,3,141,2295,8,141,1,142,1,142,
        1,142,1,142,1,142,3,142,2302,8,142,1,142,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,3,142,2312,8,142,1,143,1,143,1,144,1,144,1,144,
        1,144,1,144,5,144,2321,8,144,10,144,12,144,2324,9,144,1,144,1,144,
        1,145,1,145,1,145,1,146,1,146,1,146,5,146,2334,8,146,10,146,12,146,
        2337,9,146,1,147,1,147,1,147,1,147,1,147,1,147,1,148,1,148,1,149,
        1,149,1,149,5,149,2350,8,149,10,149,12,149,2353,9,149,1,150,1,150,
        1,151,1,151,1,151,5,151,2360,8,151,10,151,12,151,2363,9,151,1,152,
        1,152,1,152,1,152,1,153,1,153,1,154,1,154,1,155,1,155,1,156,1,156,
        1,157,1,157,1,157,1,157,1,158,3,158,2382,8,158,1,158,1,158,1,159,
        1,159,3,159,2388,8,159,1,159,1,159,1,159,1,159,1,159,3,159,2395,
        8,159,1,160,1,160,1,160,5,160,2400,8,160,10,160,12,160,2403,9,160,
        1,161,1,161,1,161,1,161,1,161,3,161,2410,8,161,1,162,1,162,1,163,
        1,163,1,163,5,163,2417,8,163,10,163,12,163,2420,9,163,1,164,1,164,
        1,164,1,164,1,164,1,165,1,165,1,165,1,165,1,165,1,166,1,166,1,166,
        1,166,1,166,1,166,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
        1,167,1,167,1,167,1,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,
        2456,8,168,3,168,2458,8,168,1,169,3,169,2461,8,169,1,169,1,169,1,
        169,3,169,2466,8,169,1,169,1,169,3,169,2470,8,169,5,169,2472,8,169,
        10,169,12,169,2475,9,169,1,170,1,170,1,170,3,170,2480,8,170,1,171,
        1,171,1,171,1,171,3,171,2486,8,171,1,171,1,171,3,171,2490,8,171,
        1,172,1,172,1,172,3,172,2495,8,172,1,172,1,172,1,172,3,172,2500,
        8,172,3,172,2502,8,172,1,173,1,173,3,173,2506,8,173,1,173,1,173,
        1,173,3,173,2511,8,173,1,173,3,173,2514,8,173,3,173,2516,8,173,1,
        173,1,173,3,173,2520,8,173,1,174,1,174,1,174,1,174,1,174,1,174,1,
        174,1,174,1,174,3,174,2531,8,174,1,175,1,175,1,175,1,176,1,176,1,
        176,1,176,1,176,1,176,3,176,2542,8,176,1,177,1,177,1,178,1,178,1,
        178,1,178,1,178,1,179,1,179,3,179,2553,8,179,1,179,1,179,3,179,2557,
        8,179,1,179,1,179,3,179,2561,8,179,1,179,1,179,3,179,2565,8,179,
        1,179,3,179,2568,8,179,1,179,1,179,3,179,2572,8,179,1,179,3,179,
        2575,8,179,1,180,1,180,1,180,1,180,3,180,2581,8,180,1,181,1,181,
        1,181,1,181,1,181,5,181,2588,8,181,10,181,12,181,2591,9,181,3,181,
        2593,8,181,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,182,3,182,2607,8,182,1,182,1,182,1,182,1,182,3,182,
        2613,8,182,1,183,3,183,2616,8,183,1,183,1,183,1,183,3,183,2621,8,
        183,1,184,1,184,1,184,1,185,1,185,3,185,2628,8,185,1,186,1,186,1,
        186,5,186,2633,8,186,10,186,12,186,2636,9,186,1,187,1,187,1,187,
        1,187,1,188,1,188,3,188,2644,8,188,1,189,1,189,1,189,3,189,2649,
        8,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,2657,8,189,1,189,
        1,189,1,189,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,5,190,
        2670,8,190,10,190,12,190,2673,9,190,1,191,1,191,1,191,3,191,2678,
        8,191,1,192,1,192,1,192,1,192,1,192,1,192,3,192,2686,8,192,1,192,
        1,192,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,194,1,194,1,194,
        1,194,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,3,195,2709,
        8,195,1,196,1,196,1,196,1,196,1,196,3,196,2716,8,196,1,196,1,196,
        1,196,1,196,1,196,1,196,3,196,2724,8,196,1,197,1,197,1,197,1,198,
        1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,199,1,199,1,199,
        1,200,1,200,1,200,1,200,3,200,2745,8,200,1,200,1,200,1,200,1,200,
        1,200,1,200,3,200,2753,8,200,1,201,1,201,1,201,1,202,1,202,1,202,
        3,202,2761,8,202,1,203,1,203,1,203,1,203,1,204,1,204,1,205,1,205,
        3,205,2771,8,205,1,206,1,206,1,206,1,206,1,206,5,206,2778,8,206,
        10,206,12,206,2781,9,206,1,206,1,206,3,206,2785,8,206,1,207,1,207,
        1,208,1,208,1,208,3,208,2792,8,208,1,208,1,208,1,208,1,208,1,208,
        1,208,1,208,1,208,3,208,2802,8,208,1,208,1,208,1,208,3,208,2807,
        8,208,1,208,1,208,1,208,1,208,1,208,5,208,2814,8,208,10,208,12,208,
        2817,9,208,1,208,3,208,2820,8,208,1,208,1,208,3,208,2824,8,208,1,
        208,3,208,2827,8,208,1,208,3,208,2830,8,208,1,208,3,208,2833,8,208,
        1,208,3,208,2836,8,208,1,209,1,209,1,209,1,209,1,209,1,209,3,209,
        2844,8,209,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,211,1,211,
        1,211,1,211,1,212,1,212,1,212,1,213,1,213,1,213,5,213,2863,8,213,
        10,213,12,213,2866,9,213,1,214,1,214,3,214,2870,8,214,1,215,1,215,
        1,215,1,215,1,216,1,216,1,216,5,216,2879,8,216,10,216,12,216,2882,
        9,216,1,217,1,217,1,217,1,217,1,218,1,218,1,218,1,218,1,218,5,218,
        2893,8,218,10,218,12,218,2896,9,218,1,218,1,218,1,219,1,219,1,219,
        1,219,1,219,1,220,1,220,1,220,1,220,1,220,5,220,2910,8,220,10,220,
        12,220,2913,9,220,1,220,1,220,1,221,1,221,1,221,1,222,1,222,1,222,
        1,222,1,223,1,223,1,223,1,224,1,224,1,224,1,224,1,224,1,224,5,224,
        2933,8,224,10,224,12,224,2936,9,224,1,225,1,225,1,225,1,225,1,225,
        1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,
        1,225,3,225,2955,8,225,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
        5,226,2964,8,226,10,226,12,226,2967,9,226,1,227,1,227,1,227,1,227,
        1,227,3,227,2974,8,227,1,228,1,228,1,228,1,228,1,228,1,228,5,228,
        2982,8,228,10,228,12,228,2985,9,228,1,229,1,229,3,229,2989,8,229,
        1,230,1,230,3,230,2993,8,230,1,230,1,230,1,231,1,231,3,231,2999,
        8,231,1,231,1,231,1,232,1,232,1,232,1,232,1,232,1,232,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,234,1,234,1,234,1,235,1,235,1,235,
        1,235,1,235,1,235,1,235,1,236,1,236,1,236,1,236,1,237,1,237,1,237,
        1,237,1,237,5,237,3035,8,237,10,237,12,237,3038,9,237,1,237,1,237,
        1,238,1,238,1,238,1,238,1,238,5,238,3047,8,238,10,238,12,238,3050,
        9,238,1,238,1,238,1,239,1,239,1,239,1,240,1,240,1,240,1,240,1,241,
        1,241,1,241,1,241,1,242,1,242,1,242,1,242,1,242,1,242,1,243,1,243,
        1,243,1,244,1,244,1,244,1,244,1,244,1,245,1,245,1,245,1,245,1,246,
        1,246,1,246,1,246,1,246,1,247,1,247,1,247,3,247,3091,8,247,1,247,
        1,247,1,248,1,248,1,248,1,249,3,249,3099,8,249,1,249,3,249,3102,
        8,249,1,249,1,249,3,249,3106,8,249,1,250,1,250,3,250,3110,8,250,
        1,251,1,251,1,251,1,251,1,251,1,251,5,251,3118,8,251,10,251,12,251,
        3121,9,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,5,251,
        3131,8,251,10,251,12,251,3134,9,251,1,251,1,251,1,251,1,251,1,251,
        1,251,1,251,1,251,5,251,3144,8,251,10,251,12,251,3147,9,251,1,251,
        1,251,3,251,3151,8,251,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
        1,252,5,252,3161,8,252,10,252,12,252,3164,9,252,1,252,1,252,1,252,
        1,252,1,252,1,252,5,252,3172,8,252,10,252,12,252,3175,9,252,1,252,
        1,252,3,252,3179,8,252,1,252,3,252,3182,8,252,1,253,1,253,3,253,
        3186,8,253,1,253,1,253,3,253,3190,8,253,1,254,1,254,3,254,3194,8,
        254,1,254,3,254,3197,8,254,1,255,1,255,1,256,1,256,1,257,1,257,1,
        257,1,257,1,257,5,257,3208,8,257,10,257,12,257,3211,9,257,1,257,
        3,257,3214,8,257,1,257,1,257,1,258,1,258,1,258,1,258,1,259,1,259,
        1,259,1,259,3,259,3226,8,259,1,260,1,260,1,260,1,260,1,260,1,260,
        1,260,1,261,1,261,1,261,5,261,3238,8,261,10,261,12,261,3241,9,261,
        1,262,1,262,1,262,1,262,1,263,1,263,1,264,1,264,1,264,1,264,1,264,
        1,264,3,264,3255,8,264,1,265,1,265,1,265,1,265,1,266,1,266,1,266,
        1,266,1,266,1,266,1,266,1,266,1,266,3,266,3270,8,266,1,266,3,266,
        3273,8,266,1,267,1,267,1,267,1,267,1,268,1,268,1,268,1,268,5,268,
        3283,8,268,10,268,12,268,3286,9,268,3,268,3288,8,268,1,268,1,268,
        1,269,1,269,1,269,1,269,1,270,1,270,1,271,1,271,1,271,1,271,5,271,
        3302,8,271,10,271,12,271,3305,9,271,1,271,1,271,1,271,3,271,3310,
        8,271,1,272,1,272,1,272,1,272,5,272,3316,8,272,10,272,12,272,3319,
        9,272,1,272,1,272,1,273,1,273,1,273,3,273,3326,8,273,1,274,1,274,
        1,274,1,274,1,274,3,274,3333,8,274,1,274,1,274,3,274,3337,8,274,
        1,274,1,274,1,275,1,275,1,275,1,275,3,275,3345,8,275,1,276,1,276,
        1,276,1,276,3,276,3351,8,276,1,276,1,276,1,276,1,276,3,276,3357,
        8,276,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,5,277,3367,
        8,277,10,277,12,277,3370,9,277,1,277,3,277,3373,8,277,3,277,3375,
        8,277,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,5,278,3385,
        8,278,10,278,12,278,3388,9,278,1,278,3,278,3391,8,278,1,278,1,278,
        1,278,3,278,3396,8,278,1,279,1,279,1,279,1,279,3,279,3402,8,279,
        1,279,1,279,1,279,5,279,3407,8,279,10,279,12,279,3410,9,279,1,279,
        3,279,3413,8,279,1,280,1,280,3,280,3417,8,280,1,281,3,281,3420,8,
        281,1,281,1,281,1,281,1,282,1,282,1,282,1,282,1,282,1,282,5,282,
        3431,8,282,10,282,12,282,3434,9,282,1,282,1,282,1,282,1,282,5,282,
        3440,8,282,10,282,12,282,3443,9,282,1,282,3,282,3446,8,282,1,282,
        1,282,1,282,3,282,3451,8,282,1,283,1,283,1,283,1,283,3,283,3457,
        8,283,1,283,1,283,1,283,1,283,1,283,5,283,3464,8,283,10,283,12,283,
        3467,9,283,1,283,1,283,1,283,1,283,5,283,3473,8,283,10,283,12,283,
        3476,9,283,1,284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,
        1,284,1,284,1,284,1,284,1,284,3,284,3492,8,284,1,284,1,284,3,284,
        3496,8,284,1,284,1,284,3,284,3500,8,284,3,284,3502,8,284,1,285,1,
        285,3,285,3506,8,285,1,286,1,286,1,286,5,286,3511,8,286,10,286,12,
        286,3514,9,286,1,286,3,286,3517,8,286,1,286,1,286,3,286,3521,8,286,
        3,286,3523,8,286,1,287,1,287,1,287,1,287,1,287,1,287,1,288,1,288,
        1,288,1,288,1,288,1,288,1,288,5,288,3538,8,288,10,288,12,288,3541,
        9,288,1,289,1,289,3,289,3545,8,289,1,290,1,290,1,290,1,290,1,290,
        1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,292,1,292,1,292,1,292,
        1,292,1,292,1,292,1,292,5,292,3567,8,292,10,292,12,292,3570,9,292,
        1,293,1,293,3,293,3574,8,293,1,294,1,294,1,294,1,294,1,294,1,294,
        1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,5,295,3590,8,295,
        10,295,12,295,3593,9,295,1,295,1,295,1,295,1,295,1,295,1,296,1,296,
        1,296,1,296,1,297,1,297,1,297,5,297,3607,8,297,10,297,12,297,3610,
        9,297,1,298,1,298,1,298,1,298,1,299,1,299,1,299,1,299,1,299,1,299,
        1,299,5,299,3623,8,299,10,299,12,299,3626,9,299,1,300,1,300,1,301,
        1,301,1,301,1,301,1,301,1,302,1,302,1,302,1,302,1,302,3,302,3640,
        8,302,1,303,1,303,1,303,5,303,3645,8,303,10,303,12,303,3648,9,303,
        1,304,1,304,1,304,1,304,1,304,3,304,3655,8,304,1,304,1,304,1,304,
        1,304,1,304,1,304,1,305,5,305,3664,8,305,10,305,12,305,3667,9,305,
        1,305,1,305,4,305,3671,8,305,11,305,12,305,3672,1,305,5,305,3676,
        8,305,10,305,12,305,3679,9,305,1,305,5,305,3682,8,305,10,305,12,
        305,3685,9,305,3,305,3687,8,305,1,306,3,306,3690,8,306,1,306,1,306,
        1,306,1,306,1,306,3,306,3697,8,306,1,307,3,307,3700,8,307,1,307,
        3,307,3703,8,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,3,307,
        3712,8,307,1,308,1,308,1,308,3,308,3717,8,308,1,308,3,308,3720,8,
        308,1,308,1,308,1,308,1,308,1,308,1,308,5,308,3728,8,308,10,308,
        12,308,3731,9,308,1,308,3,308,3734,8,308,3,308,3736,8,308,1,308,
        1,308,1,308,1,308,1,308,3,308,3743,8,308,1,308,3,308,3746,8,308,
        1,308,1,308,3,308,3750,8,308,3,308,3752,8,308,1,308,3,308,3755,8,
        308,1,309,1,309,1,309,3,309,3760,8,309,1,310,3,310,3763,8,310,1,
        310,1,310,1,310,3,310,3768,8,310,1,311,1,311,1,311,1,311,1,311,1,
        311,5,311,3776,8,311,10,311,12,311,3779,9,311,1,311,1,311,3,311,
        3783,8,311,1,312,1,312,1,312,1,312,1,312,1,312,1,312,5,312,3792,
        8,312,10,312,12,312,3795,9,312,1,312,3,312,3798,8,312,1,312,1,312,
        3,312,3802,8,312,3,312,3804,8,312,1,312,1,312,3,312,3808,8,312,1,
        312,1,312,1,312,3,312,3813,8,312,1,312,1,312,1,312,1,312,5,312,3819,
        8,312,10,312,12,312,3822,9,312,3,312,3824,8,312,1,312,3,312,3827,
        8,312,1,312,3,312,3830,8,312,1,313,1,313,1,313,3,313,3835,8,313,
        1,313,1,313,1,314,1,314,3,314,3841,8,314,1,314,3,314,3844,8,314,
        1,315,1,315,3,315,3848,8,315,1,316,1,316,1,316,1,316,3,316,3854,
        8,316,1,317,1,317,1,317,1,317,1,317,1,317,1,317,3,317,3863,8,317,
        1,317,3,317,3866,8,317,1,318,1,318,1,318,1,318,1,318,1,318,3,318,
        3874,8,318,1,318,1,318,3,318,3878,8,318,1,318,3,318,3881,8,318,1,
        319,1,319,3,319,3885,8,319,1,320,1,320,1,320,5,320,3890,8,320,10,
        320,12,320,3893,9,320,1,321,1,321,1,321,1,321,1,322,1,322,1,323,
        1,323,1,323,1,323,1,323,1,323,1,324,1,324,1,324,1,324,5,324,3911,
        8,324,10,324,12,324,3914,9,324,1,324,1,324,1,325,1,325,1,325,1,325,
        1,325,3,325,3923,8,325,1,325,1,325,3,325,3927,8,325,1,325,3,325,
        3930,8,325,1,326,1,326,1,326,1,326,5,326,3936,8,326,10,326,12,326,
        3939,9,326,1,326,1,326,1,327,1,327,1,328,1,328,1,328,1,328,1,328,
        1,329,1,329,1,329,1,329,3,329,3954,8,329,1,329,1,329,1,329,1,329,
        5,329,3960,8,329,10,329,12,329,3963,9,329,1,330,1,330,1,330,1,330,
        1,330,3,330,3970,8,330,1,331,1,331,1,331,1,332,1,332,1,332,3,332,
        3978,8,332,1,333,1,333,1,333,1,333,1,333,1,334,1,334,3,334,3987,
        8,334,1,335,1,335,1,335,1,335,1,336,1,336,1,336,1,336,1,336,1,337,
        1,337,1,337,1,337,1,337,5,337,4003,8,337,10,337,12,337,4006,9,337,
        1,337,1,337,1,338,1,338,1,338,1,338,1,338,1,339,1,339,1,339,1,339,
        1,339,5,339,4020,8,339,10,339,12,339,4023,9,339,1,339,1,339,1,340,
        1,340,1,340,1,340,3,340,4031,8,340,1,340,1,340,1,341,1,341,1,341,
        5,341,4038,8,341,10,341,12,341,4041,9,341,1,342,1,342,1,342,1,342,
        1,343,1,343,1,344,1,344,1,344,1,344,1,344,1,345,1,345,1,345,5,345,
        4057,8,345,10,345,12,345,4060,9,345,1,346,1,346,1,346,1,346,1,347,
        1,347,1,348,1,348,1,348,3,348,4071,8,348,1,348,1,348,1,349,1,349,
        1,350,1,350,1,350,1,350,3,350,4081,8,350,1,351,1,351,1,351,1,351,
        1,351,1,351,1,352,1,352,3,352,4091,8,352,1,353,1,353,1,354,1,354,
        1,354,1,355,1,355,1,355,5,355,4101,8,355,10,355,12,355,4104,9,355,
        1,356,1,356,1,356,1,356,1,357,1,357,1,358,1,358,1,358,1,358,1,359,
        3,359,4117,8,359,1,359,3,359,4120,8,359,1,359,3,359,4123,8,359,1,
        359,3,359,4126,8,359,1,360,1,360,1,361,1,361,3,361,4132,8,361,1,
        361,1,361,1,361,1,362,1,362,1,363,1,363,1,363,3,363,4142,8,363,1,
        364,1,364,1,365,1,365,3,365,4148,8,365,1,366,1,366,1,366,1,366,1,
        366,1,367,1,367,1,367,1,367,3,367,4159,8,367,1,367,3,367,4162,8,
        367,1,368,1,368,1,368,1,368,1,368,1,368,1,368,1,368,1,368,1,368,
        3,368,4174,8,368,1,369,1,369,1,369,1,370,1,370,1,370,1,370,1,370,
        3,370,4184,8,370,1,371,1,371,1,371,1,371,3,371,4190,8,371,1,372,
        1,372,1,373,1,373,1,374,1,374,1,374,1,374,1,374,3,374,4201,8,374,
        1,375,1,375,1,375,5,375,4206,8,375,10,375,12,375,4209,9,375,1,375,
        3,375,4212,8,375,1,376,1,376,1,376,1,377,1,377,1,378,1,378,3,378,
        4221,8,378,1,379,1,379,1,379,1,379,1,379,1,379,1,379,3,379,4230,
        8,379,1,380,1,380,1,380,1,380,1,380,1,380,3,380,4238,8,380,1,381,
        1,381,1,381,1,381,1,381,3,381,4245,8,381,1,382,1,382,1,382,1,382,
        1,382,1,382,1,382,1,382,3,382,4255,8,382,1,383,1,383,1,383,1,383,
        1,383,1,383,1,383,3,383,4264,8,383,1,384,1,384,1,384,1,384,1,384,
        1,384,1,384,3,384,4273,8,384,1,385,1,385,1,385,1,385,1,385,1,385,
        1,385,1,385,3,385,4283,8,385,1,386,1,386,3,386,4287,8,386,1,387,
        1,387,3,387,4291,8,387,1,388,1,388,3,388,4295,8,388,1,389,1,389,
        3,389,4299,8,389,1,390,1,390,3,390,4303,8,390,1,391,1,391,3,391,
        4307,8,391,1,392,1,392,3,392,4311,8,392,1,393,1,393,3,393,4315,8,
        393,1,394,1,394,3,394,4319,8,394,1,395,1,395,3,395,4323,8,395,1,
        396,1,396,3,396,4327,8,396,1,397,1,397,3,397,4331,8,397,1,398,1,
        398,1,398,3,398,4336,8,398,1,399,1,399,1,399,3,399,4341,8,399,1,
        400,1,400,1,400,3,400,4346,8,400,1,400,1,400,3,400,4350,8,400,1,
        401,1,401,3,401,4354,8,401,1,402,1,402,1,402,3,402,4359,8,402,1,
        403,3,403,4362,8,403,1,403,1,403,1,404,1,404,3,404,4368,8,404,1,
        405,3,405,4371,8,405,1,405,1,405,1,406,1,406,1,406,1,406,1,406,1,
        406,1,406,1,406,3,406,4383,8,406,1,407,1,407,1,408,1,408,1,409,1,
        409,1,410,1,410,1,411,1,411,1,412,1,412,1,413,1,413,1,414,1,414,
        1,415,1,415,1,416,1,416,1,417,1,417,1,418,1,418,1,419,1,419,1,419,
        0,0,420,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
        250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
        282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
        314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,
        346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
        378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,
        410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,
        442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,
        474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,
        506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,
        538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,
        570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,
        602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,
        634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,
        666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,
        698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,
        730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,
        762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,
        794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,
        826,828,830,832,834,836,838,0,39,2,0,57,57,277,277,6,0,147,147,158,
        158,182,182,187,187,237,237,255,255,1,0,5,8,1,0,16,17,2,0,19,20,
        22,22,2,0,16,18,198,198,2,0,117,117,123,123,4,0,123,123,135,135,
        293,293,300,300,2,0,83,83,297,297,2,0,55,55,105,105,2,0,25,25,204,
        204,2,0,47,47,112,112,2,0,165,165,264,264,3,0,108,108,184,184,210,
        210,2,0,67,67,279,279,2,0,208,208,266,266,2,0,58,58,278,278,3,0,
        191,192,194,194,263,263,2,0,45,45,114,114,2,0,150,150,305,305,2,
        0,60,60,281,281,2,0,122,122,302,302,3,0,48,48,106,106,240,240,3,
        0,60,60,258,258,281,281,2,0,145,145,304,304,3,0,109,109,232,232,
        280,280,2,0,44,44,274,274,2,0,80,80,262,262,3,0,152,152,234,234,
        259,259,2,0,141,141,227,227,1,0,320,321,21,0,57,57,68,69,73,74,91,
        91,93,95,118,118,130,130,144,145,155,155,175,177,185,185,198,198,
        200,200,231,231,235,235,250,251,257,257,265,265,277,277,296,296,
        312,313,3,0,52,52,122,122,272,272,11,0,47,47,54,54,56,56,112,112,
        126,126,154,154,170,170,183,183,298,298,314,314,316,316,57,0,43,
        46,48,51,53,53,55,55,58,61,63,67,70,70,72,72,75,77,81,81,83,89,92,
        92,96,102,104,107,109,111,114,117,119,120,123,125,127,127,129,129,
        131,134,136,139,141,143,146,147,149,151,153,153,156,166,168,169,
        171,172,179,179,181,182,186,194,196,197,201,205,207,209,211,213,
        216,227,229,230,232,233,236,241,243,245,247,248,252,253,255,256,
        258,258,261,261,263,264,268,271,274,276,278,283,285,292,295,295,
        297,297,299,305,307,308,311,311,317,318,50,0,43,46,48,51,53,53,55,
        55,58,61,63,67,70,70,72,72,75,78,81,81,83,90,92,92,96,107,109,111,
        113,117,119,120,123,125,127,129,131,134,136,139,141,143,146,147,
        149,151,153,153,156,169,171,174,178,182,186,197,199,199,201,209,
        211,230,232,233,236,241,243,245,247,249,252,256,258,258,260,261,
        263,264,266,266,268,271,274,276,278,283,285,292,295,295,297,297,
        299,308,310,311,315,315,317,318,12,0,71,71,108,108,121,121,140,140,
        184,184,210,210,246,246,267,267,273,273,284,284,294,294,309,309,
        2,0,135,135,293,293,1,0,322,323,4715,0,845,1,0,0,0,2,850,1,0,0,0,
        4,876,1,0,0,0,6,884,1,0,0,0,8,908,1,0,0,0,10,919,1,0,0,0,12,977,
        1,0,0,0,14,988,1,0,0,0,16,990,1,0,0,0,18,998,1,0,0,0,20,1006,1,0,
        0,0,22,1010,1,0,0,0,24,1068,1,0,0,0,26,1070,1,0,0,0,28,1072,1,0,
        0,0,30,1080,1,0,0,0,32,1083,1,0,0,0,34,1087,1,0,0,0,36,1090,1,0,
        0,0,38,1116,1,0,0,0,40,1124,1,0,0,0,42,1132,1,0,0,0,44,1144,1,0,
        0,0,46,1146,1,0,0,0,48,1160,1,0,0,0,50,1169,1,0,0,0,52,1175,1,0,
        0,0,54,1181,1,0,0,0,56,1185,1,0,0,0,58,1187,1,0,0,0,60,1196,1,0,
        0,0,62,1212,1,0,0,0,64,1221,1,0,0,0,66,1234,1,0,0,0,68,1260,1,0,
        0,0,70,1282,1,0,0,0,72,1284,1,0,0,0,74,1291,1,0,0,0,76,1298,1,0,
        0,0,78,1306,1,0,0,0,80,1321,1,0,0,0,82,1335,1,0,0,0,84,1340,1,0,
        0,0,86,1342,1,0,0,0,88,1346,1,0,0,0,90,1348,1,0,0,0,92,1352,1,0,
        0,0,94,1360,1,0,0,0,96,1371,1,0,0,0,98,1373,1,0,0,0,100,1391,1,0,
        0,0,102,1395,1,0,0,0,104,1414,1,0,0,0,106,1422,1,0,0,0,108,1424,
        1,0,0,0,110,1446,1,0,0,0,112,1455,1,0,0,0,114,1463,1,0,0,0,116,1476,
        1,0,0,0,118,1478,1,0,0,0,120,1489,1,0,0,0,122,1497,1,0,0,0,124,1499,
        1,0,0,0,126,1510,1,0,0,0,128,1521,1,0,0,0,130,1526,1,0,0,0,132,1534,
        1,0,0,0,134,1548,1,0,0,0,136,1562,1,0,0,0,138,1566,1,0,0,0,140,1570,
        1,0,0,0,142,1585,1,0,0,0,144,1587,1,0,0,0,146,1593,1,0,0,0,148,1597,
        1,0,0,0,150,1605,1,0,0,0,152,1610,1,0,0,0,154,1619,1,0,0,0,156,1625,
        1,0,0,0,158,1629,1,0,0,0,160,1634,1,0,0,0,162,1636,1,0,0,0,164,1652,
        1,0,0,0,166,1657,1,0,0,0,168,1661,1,0,0,0,170,1667,1,0,0,0,172,1675,
        1,0,0,0,174,1682,1,0,0,0,176,1687,1,0,0,0,178,1706,1,0,0,0,180,1725,
        1,0,0,0,182,1740,1,0,0,0,184,1745,1,0,0,0,186,1750,1,0,0,0,188,1755,
        1,0,0,0,190,1762,1,0,0,0,192,1767,1,0,0,0,194,1782,1,0,0,0,196,1787,
        1,0,0,0,198,1794,1,0,0,0,200,1827,1,0,0,0,202,1846,1,0,0,0,204,1850,
        1,0,0,0,206,1852,1,0,0,0,208,1877,1,0,0,0,210,1879,1,0,0,0,212,1888,
        1,0,0,0,214,1898,1,0,0,0,216,1903,1,0,0,0,218,1908,1,0,0,0,220,1916,
        1,0,0,0,222,1921,1,0,0,0,224,1926,1,0,0,0,226,1949,1,0,0,0,228,1951,
        1,0,0,0,230,1955,1,0,0,0,232,1963,1,0,0,0,234,1972,1,0,0,0,236,1986,
        1,0,0,0,238,1994,1,0,0,0,240,1996,1,0,0,0,242,2006,1,0,0,0,244,2018,
        1,0,0,0,246,2054,1,0,0,0,248,2058,1,0,0,0,250,2066,1,0,0,0,252,2103,
        1,0,0,0,254,2107,1,0,0,0,256,2150,1,0,0,0,258,2178,1,0,0,0,260,2189,
        1,0,0,0,262,2191,1,0,0,0,264,2194,1,0,0,0,266,2202,1,0,0,0,268,2209,
        1,0,0,0,270,2243,1,0,0,0,272,2245,1,0,0,0,274,2247,1,0,0,0,276,2249,
        1,0,0,0,278,2258,1,0,0,0,280,2262,1,0,0,0,282,2294,1,0,0,0,284,2311,
        1,0,0,0,286,2313,1,0,0,0,288,2315,1,0,0,0,290,2327,1,0,0,0,292,2330,
        1,0,0,0,294,2338,1,0,0,0,296,2344,1,0,0,0,298,2346,1,0,0,0,300,2354,
        1,0,0,0,302,2356,1,0,0,0,304,2364,1,0,0,0,306,2368,1,0,0,0,308,2370,
        1,0,0,0,310,2372,1,0,0,0,312,2374,1,0,0,0,314,2376,1,0,0,0,316,2381,
        1,0,0,0,318,2385,1,0,0,0,320,2396,1,0,0,0,322,2409,1,0,0,0,324,2411,
        1,0,0,0,326,2413,1,0,0,0,328,2421,1,0,0,0,330,2426,1,0,0,0,332,2431,
        1,0,0,0,334,2437,1,0,0,0,336,2457,1,0,0,0,338,2460,1,0,0,0,340,2476,
        1,0,0,0,342,2489,1,0,0,0,344,2491,1,0,0,0,346,2503,1,0,0,0,348,2530,
        1,0,0,0,350,2532,1,0,0,0,352,2535,1,0,0,0,354,2543,1,0,0,0,356,2545,
        1,0,0,0,358,2574,1,0,0,0,360,2580,1,0,0,0,362,2582,1,0,0,0,364,2606,
        1,0,0,0,366,2620,1,0,0,0,368,2622,1,0,0,0,370,2627,1,0,0,0,372,2629,
        1,0,0,0,374,2637,1,0,0,0,376,2643,1,0,0,0,378,2645,1,0,0,0,380,2661,
        1,0,0,0,382,2677,1,0,0,0,384,2679,1,0,0,0,386,2689,1,0,0,0,388,2696,
        1,0,0,0,390,2700,1,0,0,0,392,2710,1,0,0,0,394,2725,1,0,0,0,396,2728,
        1,0,0,0,398,2737,1,0,0,0,400,2740,1,0,0,0,402,2754,1,0,0,0,404,2760,
        1,0,0,0,406,2762,1,0,0,0,408,2766,1,0,0,0,410,2770,1,0,0,0,412,2784,
        1,0,0,0,414,2786,1,0,0,0,416,2788,1,0,0,0,418,2843,1,0,0,0,420,2845,
        1,0,0,0,422,2852,1,0,0,0,424,2856,1,0,0,0,426,2859,1,0,0,0,428,2869,
        1,0,0,0,430,2871,1,0,0,0,432,2875,1,0,0,0,434,2883,1,0,0,0,436,2887,
        1,0,0,0,438,2899,1,0,0,0,440,2904,1,0,0,0,442,2916,1,0,0,0,444,2919,
        1,0,0,0,446,2923,1,0,0,0,448,2926,1,0,0,0,450,2954,1,0,0,0,452,2956,
        1,0,0,0,454,2973,1,0,0,0,456,2975,1,0,0,0,458,2988,1,0,0,0,460,2990,
        1,0,0,0,462,2996,1,0,0,0,464,3002,1,0,0,0,466,3008,1,0,0,0,468,3015,
        1,0,0,0,470,3018,1,0,0,0,472,3025,1,0,0,0,474,3029,1,0,0,0,476,3041,
        1,0,0,0,478,3053,1,0,0,0,480,3056,1,0,0,0,482,3060,1,0,0,0,484,3064,
        1,0,0,0,486,3070,1,0,0,0,488,3073,1,0,0,0,490,3078,1,0,0,0,492,3082,
        1,0,0,0,494,3087,1,0,0,0,496,3094,1,0,0,0,498,3101,1,0,0,0,500,3107,
        1,0,0,0,502,3150,1,0,0,0,504,3152,1,0,0,0,506,3185,1,0,0,0,508,3191,
        1,0,0,0,510,3198,1,0,0,0,512,3200,1,0,0,0,514,3202,1,0,0,0,516,3217,
        1,0,0,0,518,3225,1,0,0,0,520,3227,1,0,0,0,522,3234,1,0,0,0,524,3242,
        1,0,0,0,526,3246,1,0,0,0,528,3254,1,0,0,0,530,3256,1,0,0,0,532,3272,
        1,0,0,0,534,3274,1,0,0,0,536,3278,1,0,0,0,538,3291,1,0,0,0,540,3295,
        1,0,0,0,542,3309,1,0,0,0,544,3311,1,0,0,0,546,3325,1,0,0,0,548,3327,
        1,0,0,0,550,3340,1,0,0,0,552,3346,1,0,0,0,554,3358,1,0,0,0,556,3376,
        1,0,0,0,558,3397,1,0,0,0,560,3416,1,0,0,0,562,3419,1,0,0,0,564,3424,
        1,0,0,0,566,3452,1,0,0,0,568,3501,1,0,0,0,570,3505,1,0,0,0,572,3522,
        1,0,0,0,574,3524,1,0,0,0,576,3530,1,0,0,0,578,3544,1,0,0,0,580,3546,
        1,0,0,0,582,3551,1,0,0,0,584,3558,1,0,0,0,586,3573,1,0,0,0,588,3575,
        1,0,0,0,590,3581,1,0,0,0,592,3599,1,0,0,0,594,3603,1,0,0,0,596,3611,
        1,0,0,0,598,3615,1,0,0,0,600,3627,1,0,0,0,602,3629,1,0,0,0,604,3634,
        1,0,0,0,606,3641,1,0,0,0,608,3649,1,0,0,0,610,3665,1,0,0,0,612,3689,
        1,0,0,0,614,3699,1,0,0,0,616,3716,1,0,0,0,618,3756,1,0,0,0,620,3762,
        1,0,0,0,622,3769,1,0,0,0,624,3829,1,0,0,0,626,3834,1,0,0,0,628,3843,
        1,0,0,0,630,3845,1,0,0,0,632,3849,1,0,0,0,634,3855,1,0,0,0,636,3867,
        1,0,0,0,638,3884,1,0,0,0,640,3886,1,0,0,0,642,3894,1,0,0,0,644,3898,
        1,0,0,0,646,3900,1,0,0,0,648,3906,1,0,0,0,650,3917,1,0,0,0,652,3931,
        1,0,0,0,654,3942,1,0,0,0,656,3944,1,0,0,0,658,3949,1,0,0,0,660,3969,
        1,0,0,0,662,3971,1,0,0,0,664,3974,1,0,0,0,666,3979,1,0,0,0,668,3986,
        1,0,0,0,670,3988,1,0,0,0,672,3992,1,0,0,0,674,3997,1,0,0,0,676,4009,
        1,0,0,0,678,4014,1,0,0,0,680,4026,1,0,0,0,682,4034,1,0,0,0,684,4042,
        1,0,0,0,686,4046,1,0,0,0,688,4048,1,0,0,0,690,4053,1,0,0,0,692,4061,
        1,0,0,0,694,4065,1,0,0,0,696,4070,1,0,0,0,698,4074,1,0,0,0,700,4080,
        1,0,0,0,702,4082,1,0,0,0,704,4090,1,0,0,0,706,4092,1,0,0,0,708,4094,
        1,0,0,0,710,4097,1,0,0,0,712,4105,1,0,0,0,714,4109,1,0,0,0,716,4111,
        1,0,0,0,718,4116,1,0,0,0,720,4127,1,0,0,0,722,4129,1,0,0,0,724,4136,
        1,0,0,0,726,4138,1,0,0,0,728,4143,1,0,0,0,730,4147,1,0,0,0,732,4149,
        1,0,0,0,734,4161,1,0,0,0,736,4173,1,0,0,0,738,4175,1,0,0,0,740,4183,
        1,0,0,0,742,4185,1,0,0,0,744,4191,1,0,0,0,746,4193,1,0,0,0,748,4195,
        1,0,0,0,750,4202,1,0,0,0,752,4213,1,0,0,0,754,4216,1,0,0,0,756,4220,
        1,0,0,0,758,4229,1,0,0,0,760,4237,1,0,0,0,762,4244,1,0,0,0,764,4254,
        1,0,0,0,766,4263,1,0,0,0,768,4272,1,0,0,0,770,4282,1,0,0,0,772,4286,
        1,0,0,0,774,4290,1,0,0,0,776,4294,1,0,0,0,778,4298,1,0,0,0,780,4302,
        1,0,0,0,782,4306,1,0,0,0,784,4310,1,0,0,0,786,4314,1,0,0,0,788,4318,
        1,0,0,0,790,4322,1,0,0,0,792,4326,1,0,0,0,794,4330,1,0,0,0,796,4335,
        1,0,0,0,798,4340,1,0,0,0,800,4345,1,0,0,0,802,4353,1,0,0,0,804,4358,
        1,0,0,0,806,4361,1,0,0,0,808,4367,1,0,0,0,810,4370,1,0,0,0,812,4382,
        1,0,0,0,814,4384,1,0,0,0,816,4386,1,0,0,0,818,4388,1,0,0,0,820,4390,
        1,0,0,0,822,4392,1,0,0,0,824,4394,1,0,0,0,826,4396,1,0,0,0,828,4398,
        1,0,0,0,830,4400,1,0,0,0,832,4402,1,0,0,0,834,4404,1,0,0,0,836,4406,
        1,0,0,0,838,4408,1,0,0,0,840,846,3,2,1,0,841,842,5,226,0,0,842,843,
        5,51,0,0,843,844,5,322,0,0,844,846,3,4,2,0,845,840,1,0,0,0,845,841,
        1,0,0,0,846,1,1,0,0,0,847,849,5,23,0,0,848,847,1,0,0,0,849,852,1,
        0,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,853,1,0,0,0,852,850,1,
        0,0,0,853,862,3,10,5,0,854,856,5,23,0,0,855,854,1,0,0,0,856,857,
        1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,861,
        3,10,5,0,860,855,1,0,0,0,861,864,1,0,0,0,862,860,1,0,0,0,862,863,
        1,0,0,0,863,868,1,0,0,0,864,862,1,0,0,0,865,867,5,23,0,0,866,865,
        1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,871,
        1,0,0,0,870,868,1,0,0,0,871,872,5,0,0,1,872,3,1,0,0,0,873,875,5,
        23,0,0,874,873,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,1,
        0,0,0,877,879,1,0,0,0,878,876,1,0,0,0,879,880,5,0,0,1,880,5,1,0,
        0,0,881,883,5,23,0,0,882,881,1,0,0,0,883,886,1,0,0,0,884,882,1,0,
        0,0,884,885,1,0,0,0,885,895,1,0,0,0,886,884,1,0,0,0,887,889,3,8,
        4,0,888,890,5,23,0,0,889,888,1,0,0,0,890,891,1,0,0,0,891,889,1,0,
        0,0,891,892,1,0,0,0,892,894,1,0,0,0,893,887,1,0,0,0,894,897,1,0,
        0,0,895,893,1,0,0,0,895,896,1,0,0,0,896,898,1,0,0,0,897,895,1,0,
        0,0,898,899,5,250,0,0,899,903,3,14,7,0,900,902,5,23,0,0,901,900,
        1,0,0,0,902,905,1,0,0,0,903,901,1,0,0,0,903,904,1,0,0,0,904,7,1,
        0,0,0,905,903,1,0,0,0,906,909,3,742,371,0,907,909,3,214,107,0,908,
        906,1,0,0,0,908,907,1,0,0,0,909,9,1,0,0,0,910,917,5,131,0,0,911,
        912,5,326,0,0,912,913,5,327,0,0,913,914,5,328,0,0,914,915,5,329,
        0,0,915,916,5,330,0,0,916,918,5,224,0,0,917,911,1,0,0,0,917,918,
        1,0,0,0,918,920,1,0,0,0,919,910,1,0,0,0,919,920,1,0,0,0,920,921,
        1,0,0,0,921,922,3,12,6,0,922,11,1,0,0,0,923,978,3,224,112,0,924,
        978,3,232,116,0,925,978,3,742,371,0,926,978,3,416,208,0,927,978,
        3,548,274,0,928,978,3,738,369,0,929,978,3,364,182,0,930,978,3,744,
        372,0,931,978,3,636,318,0,932,978,3,634,317,0,933,978,3,746,373,
        0,934,978,3,210,105,0,935,978,3,214,107,0,936,978,3,216,108,0,937,
        978,3,448,224,0,938,978,3,452,226,0,939,978,3,222,111,0,940,978,
        3,608,304,0,941,978,3,612,306,0,942,978,3,614,307,0,943,978,3,368,
        184,0,944,978,3,550,275,0,945,978,3,552,276,0,946,978,3,554,277,
        0,947,978,3,556,278,0,948,978,3,558,279,0,949,978,3,392,196,0,950,
        978,3,396,198,0,951,978,3,400,200,0,952,978,3,378,189,0,953,978,
        3,380,190,0,954,978,3,384,192,0,955,978,3,590,295,0,956,978,3,604,
        302,0,957,978,3,650,325,0,958,978,3,658,329,0,959,978,3,680,340,
        0,960,978,3,564,282,0,961,978,3,566,283,0,962,978,3,456,228,0,963,
        978,3,390,195,0,964,978,3,386,193,0,965,978,3,388,194,0,966,978,
        3,598,299,0,967,978,3,574,287,0,968,978,3,576,288,0,969,978,3,580,
        290,0,970,978,3,420,210,0,971,978,3,422,211,0,972,978,3,424,212,
        0,973,978,3,752,376,0,974,978,3,582,291,0,975,978,3,584,292,0,976,
        978,3,588,294,0,977,923,1,0,0,0,977,924,1,0,0,0,977,925,1,0,0,0,
        977,926,1,0,0,0,977,927,1,0,0,0,977,928,1,0,0,0,977,929,1,0,0,0,
        977,930,1,0,0,0,977,931,1,0,0,0,977,932,1,0,0,0,977,933,1,0,0,0,
        977,934,1,0,0,0,977,935,1,0,0,0,977,936,1,0,0,0,977,937,1,0,0,0,
        977,938,1,0,0,0,977,939,1,0,0,0,977,940,1,0,0,0,977,941,1,0,0,0,
        977,942,1,0,0,0,977,943,1,0,0,0,977,944,1,0,0,0,977,945,1,0,0,0,
        977,946,1,0,0,0,977,947,1,0,0,0,977,948,1,0,0,0,977,949,1,0,0,0,
        977,950,1,0,0,0,977,951,1,0,0,0,977,952,1,0,0,0,977,953,1,0,0,0,
        977,954,1,0,0,0,977,955,1,0,0,0,977,956,1,0,0,0,977,957,1,0,0,0,
        977,958,1,0,0,0,977,959,1,0,0,0,977,960,1,0,0,0,977,961,1,0,0,0,
        977,962,1,0,0,0,977,963,1,0,0,0,977,964,1,0,0,0,977,965,1,0,0,0,
        977,966,1,0,0,0,977,967,1,0,0,0,977,968,1,0,0,0,977,969,1,0,0,0,
        977,970,1,0,0,0,977,971,1,0,0,0,977,972,1,0,0,0,977,973,1,0,0,0,
        977,974,1,0,0,0,977,975,1,0,0,0,977,976,1,0,0,0,978,13,1,0,0,0,979,
        984,3,16,8,0,980,981,5,211,0,0,981,983,3,16,8,0,982,980,1,0,0,0,
        983,986,1,0,0,0,984,982,1,0,0,0,984,985,1,0,0,0,985,989,1,0,0,0,
        986,984,1,0,0,0,987,989,3,200,100,0,988,979,1,0,0,0,988,987,1,0,
        0,0,989,15,1,0,0,0,990,995,3,18,9,0,991,992,5,50,0,0,992,994,3,18,
        9,0,993,991,1,0,0,0,994,997,1,0,0,0,995,993,1,0,0,0,995,996,1,0,
        0,0,996,17,1,0,0,0,997,995,1,0,0,0,998,1003,3,20,10,0,999,1000,5,
        318,0,0,1000,1002,3,20,10,0,1001,999,1,0,0,0,1002,1005,1,0,0,0,1003,
        1001,1,0,0,0,1003,1004,1,0,0,0,1004,19,1,0,0,0,1005,1003,1,0,0,0,
        1006,1008,3,28,14,0,1007,1009,3,24,12,0,1008,1007,1,0,0,0,1008,1009,
        1,0,0,0,1009,21,1,0,0,0,1010,1012,5,172,0,0,1011,1013,5,198,0,0,
        1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,1014,1,0,0,0,1014,1015,
        5,112,0,0,1015,1016,5,144,0,0,1016,23,1,0,0,0,1017,1019,5,198,0,
        0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,1020,1021,
        3,26,13,0,1021,1024,3,28,14,0,1022,1023,5,124,0,0,1023,1025,3,28,
        14,0,1024,1022,1,0,0,0,1024,1025,1,0,0,0,1025,1069,1,0,0,0,1026,
        1028,5,198,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,
        0,0,1029,1031,5,161,0,0,1030,1032,5,82,0,0,1031,1030,1,0,0,0,1031,
        1032,1,0,0,0,1032,1033,1,0,0,0,1033,1069,3,82,41,0,1034,1044,5,173,
        0,0,1035,1044,5,199,0,0,1036,1037,5,172,0,0,1037,1044,5,200,0,0,
        1038,1040,5,172,0,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,1041,
        1,0,0,0,1041,1042,5,198,0,0,1042,1044,5,200,0,0,1043,1034,1,0,0,
        0,1043,1035,1,0,0,0,1043,1036,1,0,0,0,1043,1039,1,0,0,0,1044,1069,
        1,0,0,0,1045,1047,5,198,0,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,
        1047,1048,1,0,0,0,1048,1050,5,68,0,0,1049,1051,7,0,0,0,1050,1049,
        1,0,0,0,1050,1051,1,0,0,0,1051,1052,1,0,0,0,1052,1053,3,28,14,0,
        1053,1054,5,50,0,0,1054,1055,3,28,14,0,1055,1069,1,0,0,0,1056,1062,
        5,1,0,0,1057,1062,5,2,0,0,1058,1062,5,3,0,0,1059,1062,5,4,0,0,1060,
        1062,3,22,11,0,1061,1056,1,0,0,0,1061,1057,1,0,0,0,1061,1058,1,0,
        0,0,1061,1059,1,0,0,0,1061,1060,1,0,0,0,1062,1063,1,0,0,0,1063,1065,
        3,28,14,0,1064,1061,1,0,0,0,1065,1066,1,0,0,0,1066,1064,1,0,0,0,
        1066,1067,1,0,0,0,1067,1069,1,0,0,0,1068,1018,1,0,0,0,1068,1027,
        1,0,0,0,1068,1043,1,0,0,0,1068,1046,1,0,0,0,1068,1064,1,0,0,0,1069,
        25,1,0,0,0,1070,1071,7,1,0,0,1071,27,1,0,0,0,1072,1077,3,36,18,0,
        1073,1074,7,2,0,0,1074,1076,3,36,18,0,1075,1073,1,0,0,0,1076,1079,
        1,0,0,0,1077,1075,1,0,0,0,1077,1078,1,0,0,0,1078,29,1,0,0,0,1079,
        1077,1,0,0,0,1080,1081,5,7,0,0,1081,1082,5,7,0,0,1082,31,1,0,0,0,
        1083,1084,5,7,0,0,1084,1085,5,7,0,0,1085,1086,5,12,0,0,1086,33,1,
        0,0,0,1087,1088,5,28,0,0,1088,1089,5,28,0,0,1089,35,1,0,0,0,1090,
        1103,3,38,19,0,1091,1099,5,9,0,0,1092,1099,3,30,15,0,1093,1099,5,
        10,0,0,1094,1099,3,32,16,0,1095,1099,5,11,0,0,1096,1099,5,12,0,0,
        1097,1099,5,38,0,0,1098,1091,1,0,0,0,1098,1092,1,0,0,0,1098,1093,
        1,0,0,0,1098,1094,1,0,0,0,1098,1095,1,0,0,0,1098,1096,1,0,0,0,1098,
        1097,1,0,0,0,1099,1100,1,0,0,0,1100,1102,3,38,19,0,1101,1098,1,0,
        0,0,1102,1105,1,0,0,0,1103,1101,1,0,0,0,1103,1104,1,0,0,0,1104,1114,
        1,0,0,0,1105,1103,1,0,0,0,1106,1107,3,34,17,0,1107,1108,3,36,18,
        0,1108,1115,1,0,0,0,1109,1111,5,28,0,0,1110,1109,1,0,0,0,1111,1112,
        1,0,0,0,1112,1110,1,0,0,0,1112,1113,1,0,0,0,1113,1115,1,0,0,0,1114,
        1106,1,0,0,0,1114,1110,1,0,0,0,1114,1115,1,0,0,0,1115,37,1,0,0,0,
        1116,1121,3,40,20,0,1117,1118,7,3,0,0,1118,1120,3,40,20,0,1119,1117,
        1,0,0,0,1120,1123,1,0,0,0,1121,1119,1,0,0,0,1121,1122,1,0,0,0,1122,
        39,1,0,0,0,1123,1121,1,0,0,0,1124,1129,3,42,21,0,1125,1126,7,4,0,
        0,1126,1128,3,42,21,0,1127,1125,1,0,0,0,1128,1131,1,0,0,0,1129,1127,
        1,0,0,0,1129,1130,1,0,0,0,1130,41,1,0,0,0,1131,1129,1,0,0,0,1132,
        1137,3,44,22,0,1133,1134,5,13,0,0,1134,1136,3,44,22,0,1135,1133,
        1,0,0,0,1136,1139,1,0,0,0,1137,1135,1,0,0,0,1137,1138,1,0,0,0,1138,
        43,1,0,0,0,1139,1137,1,0,0,0,1140,1145,3,54,27,0,1141,1142,3,46,
        23,0,1142,1143,3,54,27,0,1143,1145,1,0,0,0,1144,1140,1,0,0,0,1144,
        1141,1,0,0,0,1145,45,1,0,0,0,1146,1147,7,5,0,0,1147,47,1,0,0,0,1148,
        1157,3,138,69,0,1149,1157,3,132,66,0,1150,1154,5,24,0,0,1151,1155,
        3,144,72,0,1152,1155,5,322,0,0,1153,1155,3,776,388,0,1154,1151,1,
        0,0,0,1154,1152,1,0,0,0,1154,1153,1,0,0,0,1155,1157,1,0,0,0,1156,
        1148,1,0,0,0,1156,1149,1,0,0,0,1156,1150,1,0,0,0,1157,1159,1,0,0,
        0,1158,1156,1,0,0,0,1159,1162,1,0,0,0,1160,1158,1,0,0,0,1160,1161,
        1,0,0,0,1161,1165,1,0,0,0,1162,1160,1,0,0,0,1163,1164,5,78,0,0,1164,
        1166,3,774,387,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,49,1,0,
        0,0,1167,1170,3,760,380,0,1168,1170,3,68,34,0,1169,1167,1,0,0,0,
        1169,1168,1,0,0,0,1170,1171,1,0,0,0,1171,1172,3,48,24,0,1172,51,
        1,0,0,0,1173,1176,3,762,381,0,1174,1176,3,70,35,0,1175,1173,1,0,
        0,0,1175,1174,1,0,0,0,1176,1177,1,0,0,0,1177,1178,3,48,24,0,1178,
        53,1,0,0,0,1179,1182,3,50,25,0,1180,1182,3,84,42,0,1181,1179,1,0,
        0,0,1181,1180,1,0,0,0,1182,55,1,0,0,0,1183,1186,3,52,26,0,1184,1186,
        3,84,42,0,1185,1183,1,0,0,0,1185,1184,1,0,0,0,1186,57,1,0,0,0,1187,
        1189,5,42,0,0,1188,1190,3,112,56,0,1189,1188,1,0,0,0,1189,1190,1,
        0,0,0,1190,1192,1,0,0,0,1191,1193,5,25,0,0,1192,1191,1,0,0,0,1192,
        1193,1,0,0,0,1193,1194,1,0,0,0,1194,1195,5,41,0,0,1195,59,1,0,0,
        0,1196,1199,3,14,7,0,1197,1198,5,29,0,0,1198,1200,3,14,7,0,1199,
        1197,1,0,0,0,1199,1200,1,0,0,0,1200,1209,1,0,0,0,1201,1202,5,25,
        0,0,1202,1205,3,14,7,0,1203,1204,5,29,0,0,1204,1206,3,14,7,0,1205,
        1203,1,0,0,0,1205,1206,1,0,0,0,1206,1208,1,0,0,0,1207,1201,1,0,0,
        0,1208,1211,1,0,0,0,1209,1207,1,0,0,0,1209,1210,1,0,0,0,1210,61,
        1,0,0,0,1211,1209,1,0,0,0,1212,1214,5,36,0,0,1213,1215,3,60,30,0,
        1214,1213,1,0,0,0,1214,1215,1,0,0,0,1215,1217,1,0,0,0,1216,1218,
        5,25,0,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,1219,1,0,0,0,1219,
        1220,5,37,0,0,1220,63,1,0,0,0,1221,1222,3,14,7,0,1222,1223,5,29,
        0,0,1223,1231,3,14,7,0,1224,1225,5,25,0,0,1225,1226,3,14,7,0,1226,
        1227,5,29,0,0,1227,1228,3,14,7,0,1228,1230,1,0,0,0,1229,1224,1,0,
        0,0,1230,1233,1,0,0,0,1231,1229,1,0,0,0,1231,1232,1,0,0,0,1232,65,
        1,0,0,0,1233,1231,1,0,0,0,1234,1236,5,14,0,0,1235,1237,3,64,32,0,
        1236,1235,1,0,0,0,1236,1237,1,0,0,0,1237,1239,1,0,0,0,1238,1240,
        5,25,0,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,1241,1,0,0,0,1241,
        1242,5,15,0,0,1242,67,1,0,0,0,1243,1261,3,142,71,0,1244,1261,3,144,
        72,0,1245,1261,3,80,40,0,1246,1261,3,72,36,0,1247,1261,3,76,38,0,
        1248,1261,3,78,39,0,1249,1250,3,776,388,0,1250,1253,5,39,0,0,1251,
        1254,3,802,401,0,1252,1254,5,319,0,0,1253,1251,1,0,0,0,1253,1252,
        1,0,0,0,1254,1261,1,0,0,0,1255,1261,3,208,104,0,1256,1261,3,74,37,
        0,1257,1261,3,58,29,0,1258,1261,3,62,31,0,1259,1261,3,66,33,0,1260,
        1243,1,0,0,0,1260,1244,1,0,0,0,1260,1245,1,0,0,0,1260,1246,1,0,0,
        0,1260,1247,1,0,0,0,1260,1248,1,0,0,0,1260,1249,1,0,0,0,1260,1255,
        1,0,0,0,1260,1256,1,0,0,0,1260,1257,1,0,0,0,1260,1258,1,0,0,0,1260,
        1259,1,0,0,0,1261,69,1,0,0,0,1262,1283,3,142,71,0,1263,1283,3,144,
        72,0,1264,1283,3,80,40,0,1265,1283,3,72,36,0,1266,1283,3,78,39,0,
        1267,1268,3,776,388,0,1268,1271,5,39,0,0,1269,1272,3,802,401,0,1270,
        1272,5,319,0,0,1271,1269,1,0,0,0,1271,1270,1,0,0,0,1272,1283,1,0,
        0,0,1273,1274,5,26,0,0,1274,1275,3,232,116,0,1275,1276,5,27,0,0,
        1276,1283,1,0,0,0,1277,1283,3,208,104,0,1278,1283,3,74,37,0,1279,
        1283,3,58,29,0,1280,1283,3,62,31,0,1281,1283,3,66,33,0,1282,1262,
        1,0,0,0,1282,1263,1,0,0,0,1282,1264,1,0,0,0,1282,1265,1,0,0,0,1282,
        1266,1,0,0,0,1282,1267,1,0,0,0,1282,1273,1,0,0,0,1282,1277,1,0,0,
        0,1282,1278,1,0,0,0,1282,1279,1,0,0,0,1282,1280,1,0,0,0,1282,1281,
        1,0,0,0,1283,71,1,0,0,0,1284,1285,5,74,0,0,1285,1286,5,26,0,0,1286,
        1287,3,14,7,0,1287,1288,5,54,0,0,1288,1289,3,204,102,0,1289,1290,
        5,27,0,0,1290,73,1,0,0,0,1291,1292,5,69,0,0,1292,1293,5,26,0,0,1293,
        1294,3,14,7,0,1294,1295,5,54,0,0,1295,1296,3,156,78,0,1296,1297,
        5,27,0,0,1297,75,1,0,0,0,1298,1299,5,130,0,0,1299,1302,5,26,0,0,
        1300,1303,3,232,116,0,1301,1303,3,368,184,0,1302,1300,1,0,0,0,1302,
        1301,1,0,0,0,1303,1304,1,0,0,0,1304,1305,5,27,0,0,1305,77,1,0,0,
        0,1306,1308,5,73,0,0,1307,1309,3,14,7,0,1308,1307,1,0,0,0,1308,1309,
        1,0,0,0,1309,1311,1,0,0,0,1310,1312,3,140,70,0,1311,1310,1,0,0,0,
        1312,1313,1,0,0,0,1313,1311,1,0,0,0,1313,1314,1,0,0,0,1314,1317,
        1,0,0,0,1315,1316,5,116,0,0,1316,1318,3,14,7,0,1317,1315,1,0,0,0,
        1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1320,5,120,0,0,1320,79,
        1,0,0,0,1321,1333,3,110,55,0,1322,1331,5,40,0,0,1323,1324,5,26,0,
        0,1324,1325,3,14,7,0,1325,1326,5,27,0,0,1326,1332,1,0,0,0,1327,1328,
        5,36,0,0,1328,1329,3,6,3,0,1329,1330,5,37,0,0,1330,1332,1,0,0,0,
        1331,1323,1,0,0,0,1331,1327,1,0,0,0,1332,1334,1,0,0,0,1333,1322,
        1,0,0,0,1333,1334,1,0,0,0,1334,81,1,0,0,0,1335,1336,3,56,28,0,1336,
        83,1,0,0,0,1337,1341,3,98,49,0,1338,1341,3,102,51,0,1339,1341,3,
        108,54,0,1340,1337,1,0,0,0,1340,1338,1,0,0,0,1340,1339,1,0,0,0,1341,
        85,1,0,0,0,1342,1343,5,319,0,0,1343,87,1,0,0,0,1344,1347,3,760,380,
        0,1345,1347,5,319,0,0,1346,1344,1,0,0,0,1346,1345,1,0,0,0,1347,89,
        1,0,0,0,1348,1349,3,14,7,0,1349,1350,5,54,0,0,1350,1351,3,88,44,
        0,1351,91,1,0,0,0,1352,1357,3,90,45,0,1353,1354,5,25,0,0,1354,1356,
        3,90,45,0,1355,1353,1,0,0,0,1356,1359,1,0,0,0,1357,1355,1,0,0,0,
        1357,1358,1,0,0,0,1358,93,1,0,0,0,1359,1357,1,0,0,0,1360,1361,3,
        14,7,0,1361,1362,5,25,0,0,1362,1365,3,86,43,0,1363,1364,5,218,0,
        0,1364,1366,3,92,46,0,1365,1363,1,0,0,0,1365,1366,1,0,0,0,1366,95,
        1,0,0,0,1367,1372,5,123,0,0,1368,1372,5,200,0,0,1369,1370,5,100,
        0,0,1370,1372,3,14,7,0,1371,1367,1,0,0,0,1371,1368,1,0,0,0,1371,
        1369,1,0,0,0,1372,97,1,0,0,0,1373,1374,5,177,0,0,1374,1375,5,26,
        0,0,1375,1378,3,94,47,0,1376,1377,5,251,0,0,1377,1379,3,156,78,0,
        1378,1376,1,0,0,0,1378,1379,1,0,0,0,1379,1386,1,0,0,0,1380,1381,
        3,96,48,0,1381,1382,5,206,0,0,1382,1383,7,6,0,0,1383,1385,1,0,0,
        0,1384,1380,1,0,0,0,1385,1388,1,0,0,0,1386,1384,1,0,0,0,1386,1387,
        1,0,0,0,1387,1389,1,0,0,0,1388,1386,1,0,0,0,1389,1390,5,27,0,0,1390,
        99,1,0,0,0,1391,1392,7,7,0,0,1392,1393,5,206,0,0,1393,1394,5,123,
        0,0,1394,101,1,0,0,0,1395,1396,5,175,0,0,1396,1397,5,26,0,0,1397,
        1399,3,94,47,0,1398,1400,3,100,50,0,1399,1398,1,0,0,0,1399,1400,
        1,0,0,0,1400,1401,1,0,0,0,1401,1402,5,27,0,0,1402,103,1,0,0,0,1403,
        1405,5,316,0,0,1404,1406,5,53,0,0,1405,1404,1,0,0,0,1405,1406,1,
        0,0,0,1406,1415,1,0,0,0,1407,1409,5,315,0,0,1408,1410,7,8,0,0,1409,
        1408,1,0,0,0,1409,1410,1,0,0,0,1410,1412,1,0,0,0,1411,1413,5,53,
        0,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,1413,1415,1,0,0,0,1414,1403,
        1,0,0,0,1414,1407,1,0,0,0,1415,105,1,0,0,0,1416,1423,5,123,0,0,1417,
        1423,5,200,0,0,1418,1419,5,117,0,0,1419,1423,5,53,0,0,1420,1421,
        5,117,0,0,1421,1423,5,202,0,0,1422,1416,1,0,0,0,1422,1417,1,0,0,
        0,1422,1418,1,0,0,0,1422,1420,1,0,0,0,1423,107,1,0,0,0,1424,1425,
        5,176,0,0,1425,1426,5,26,0,0,1426,1430,3,94,47,0,1427,1428,3,104,
        52,0,1428,1429,5,317,0,0,1429,1431,1,0,0,0,1430,1427,1,0,0,0,1430,
        1431,1,0,0,0,1431,1436,1,0,0,0,1432,1433,3,106,53,0,1433,1434,5,
        206,0,0,1434,1435,5,117,0,0,1435,1437,1,0,0,0,1436,1432,1,0,0,0,
        1436,1437,1,0,0,0,1437,1442,1,0,0,0,1438,1439,3,106,53,0,1439,1440,
        5,206,0,0,1440,1441,5,123,0,0,1441,1443,1,0,0,0,1442,1438,1,0,0,
        0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,1445,5,27,0,0,1445,109,
        1,0,0,0,1446,1448,5,26,0,0,1447,1449,3,130,65,0,1448,1447,1,0,0,
        0,1448,1449,1,0,0,0,1449,1451,1,0,0,0,1450,1452,5,25,0,0,1451,1450,
        1,0,0,0,1451,1452,1,0,0,0,1452,1453,1,0,0,0,1453,1454,5,27,0,0,1454,
        111,1,0,0,0,1455,1460,3,14,7,0,1456,1457,5,25,0,0,1457,1459,3,14,
        7,0,1458,1456,1,0,0,0,1459,1462,1,0,0,0,1460,1458,1,0,0,0,1460,1461,
        1,0,0,0,1461,113,1,0,0,0,1462,1460,1,0,0,0,1463,1464,5,26,0,0,1464,
        1469,3,774,387,0,1465,1466,5,25,0,0,1466,1468,3,774,387,0,1467,1465,
        1,0,0,0,1468,1471,1,0,0,0,1469,1467,1,0,0,0,1469,1470,1,0,0,0,1470,
        1472,1,0,0,0,1471,1469,1,0,0,0,1472,1473,5,27,0,0,1473,115,1,0,0,
        0,1474,1477,3,144,72,0,1475,1477,3,774,387,0,1476,1474,1,0,0,0,1476,
        1475,1,0,0,0,1477,117,1,0,0,0,1478,1479,5,26,0,0,1479,1484,3,116,
        58,0,1480,1481,5,25,0,0,1481,1483,3,116,58,0,1482,1480,1,0,0,0,1483,
        1486,1,0,0,0,1484,1482,1,0,0,0,1484,1485,1,0,0,0,1485,1487,1,0,0,
        0,1486,1484,1,0,0,0,1487,1488,5,27,0,0,1488,119,1,0,0,0,1489,1490,
        3,798,399,0,1490,1491,3,774,387,0,1491,121,1,0,0,0,1492,1493,3,774,
        387,0,1493,1494,5,24,0,0,1494,1495,3,774,387,0,1495,1498,1,0,0,0,
        1496,1498,3,788,394,0,1497,1492,1,0,0,0,1497,1496,1,0,0,0,1498,123,
        1,0,0,0,1499,1504,3,120,60,0,1500,1501,5,25,0,0,1501,1503,3,120,
        60,0,1502,1500,1,0,0,0,1503,1506,1,0,0,0,1504,1502,1,0,0,0,1504,
        1505,1,0,0,0,1505,1508,1,0,0,0,1506,1504,1,0,0,0,1507,1509,5,25,
        0,0,1508,1507,1,0,0,0,1508,1509,1,0,0,0,1509,125,1,0,0,0,1510,1515,
        3,122,61,0,1511,1512,5,25,0,0,1512,1514,3,122,61,0,1513,1511,1,0,
        0,0,1514,1517,1,0,0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,1519,
        1,0,0,0,1517,1515,1,0,0,0,1518,1520,5,25,0,0,1519,1518,1,0,0,0,1519,
        1520,1,0,0,0,1520,127,1,0,0,0,1521,1524,3,14,7,0,1522,1523,5,54,
        0,0,1523,1525,3,776,388,0,1524,1522,1,0,0,0,1524,1525,1,0,0,0,1525,
        129,1,0,0,0,1526,1531,3,128,64,0,1527,1528,5,25,0,0,1528,1530,3,
        128,64,0,1529,1527,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,1531,
        1532,1,0,0,0,1532,131,1,0,0,0,1533,1531,1,0,0,0,1534,1541,5,26,0,
        0,1535,1536,3,252,126,0,1536,1538,3,130,65,0,1537,1539,5,25,0,0,
        1538,1537,1,0,0,0,1538,1539,1,0,0,0,1539,1542,1,0,0,0,1540,1542,
        5,19,0,0,1541,1535,1,0,0,0,1541,1540,1,0,0,0,1541,1542,1,0,0,0,1542,
        1543,1,0,0,0,1543,1544,5,27,0,0,1544,1545,3,134,67,0,1545,133,1,
        0,0,0,1546,1549,3,700,350,0,1547,1549,3,702,351,0,1548,1546,1,0,
        0,0,1548,1547,1,0,0,0,1548,1549,1,0,0,0,1549,1552,1,0,0,0,1550,1551,
        5,215,0,0,1551,1553,3,704,352,0,1552,1550,1,0,0,0,1552,1553,1,0,
        0,0,1553,135,1,0,0,0,1554,1555,3,776,388,0,1555,1556,5,39,0,0,1556,
        1557,3,776,388,0,1557,1563,1,0,0,0,1558,1563,3,780,390,0,1559,1563,
        3,144,72,0,1560,1561,5,133,0,0,1561,1563,5,146,0,0,1562,1554,1,0,
        0,0,1562,1558,1,0,0,0,1562,1559,1,0,0,0,1562,1560,1,0,0,0,1563,1564,
        1,0,0,0,1564,1565,3,132,66,0,1565,137,1,0,0,0,1566,1567,5,42,0,0,
        1567,1568,3,14,7,0,1568,1569,5,41,0,0,1569,139,1,0,0,0,1570,1571,
        5,312,0,0,1571,1572,3,14,7,0,1572,1573,5,287,0,0,1573,1574,3,14,
        7,0,1574,141,1,0,0,0,1575,1586,3,838,419,0,1576,1586,3,836,418,0,
        1577,1586,5,319,0,0,1578,1586,5,325,0,0,1579,1586,5,200,0,0,1580,
        1586,5,94,0,0,1581,1586,5,93,0,0,1582,1586,5,95,0,0,1583,1586,3,
        834,417,0,1584,1586,5,118,0,0,1585,1575,1,0,0,0,1585,1576,1,0,0,
        0,1585,1577,1,0,0,0,1585,1578,1,0,0,0,1585,1579,1,0,0,0,1585,1580,
        1,0,0,0,1585,1581,1,0,0,0,1585,1582,1,0,0,0,1585,1583,1,0,0,0,1585,
        1584,1,0,0,0,1586,143,1,0,0,0,1587,1591,5,32,0,0,1588,1592,3,776,
        388,0,1589,1592,5,293,0,0,1590,1592,5,135,0,0,1591,1588,1,0,0,0,
        1591,1589,1,0,0,0,1591,1590,1,0,0,0,1592,145,1,0,0,0,1593,1595,3,
        144,72,0,1594,1596,5,28,0,0,1595,1594,1,0,0,0,1595,1596,1,0,0,0,
        1596,147,1,0,0,0,1597,1602,3,144,72,0,1598,1599,5,25,0,0,1599,1601,
        3,144,72,0,1600,1598,1,0,0,0,1601,1604,1,0,0,0,1602,1600,1,0,0,0,
        1602,1603,1,0,0,0,1603,149,1,0,0,0,1604,1602,1,0,0,0,1605,1608,3,
        144,72,0,1606,1607,5,54,0,0,1607,1609,3,144,72,0,1608,1606,1,0,0,
        0,1608,1609,1,0,0,0,1609,151,1,0,0,0,1610,1615,3,150,75,0,1611,1612,
        5,25,0,0,1612,1614,3,150,75,0,1613,1611,1,0,0,0,1614,1617,1,0,0,
        0,1615,1613,1,0,0,0,1615,1616,1,0,0,0,1616,153,1,0,0,0,1617,1615,
        1,0,0,0,1618,1620,7,3,0,0,1619,1618,1,0,0,0,1619,1620,1,0,0,0,1620,
        1623,1,0,0,0,1621,1624,3,838,419,0,1622,1624,3,836,418,0,1623,1621,
        1,0,0,0,1623,1622,1,0,0,0,1624,155,1,0,0,0,1625,1626,3,792,396,0,
        1626,157,1,0,0,0,1627,1630,3,838,419,0,1628,1630,3,144,72,0,1629,
        1627,1,0,0,0,1629,1628,1,0,0,0,1630,159,1,0,0,0,1631,1635,3,756,
        378,0,1632,1635,5,319,0,0,1633,1635,3,144,72,0,1634,1631,1,0,0,0,
        1634,1632,1,0,0,0,1634,1633,1,0,0,0,1635,161,1,0,0,0,1636,1637,3,
        160,80,0,1637,1638,5,29,0,0,1638,1639,3,204,102,0,1639,163,1,0,0,
        0,1640,1641,3,160,80,0,1641,1646,3,204,102,0,1642,1644,5,198,0,0,
        1643,1642,1,0,0,0,1643,1644,1,0,0,0,1644,1645,1,0,0,0,1645,1647,
        5,200,0,0,1646,1643,1,0,0,0,1646,1647,1,0,0,0,1647,1653,1,0,0,0,
        1648,1649,3,204,102,0,1649,1650,5,54,0,0,1650,1651,3,160,80,0,1651,
        1653,1,0,0,0,1652,1640,1,0,0,0,1652,1648,1,0,0,0,1653,165,1,0,0,
        0,1654,1655,3,160,80,0,1655,1656,5,29,0,0,1656,1658,1,0,0,0,1657,
        1654,1,0,0,0,1657,1658,1,0,0,0,1658,1659,1,0,0,0,1659,1660,3,204,
        102,0,1660,167,1,0,0,0,1661,1665,3,166,83,0,1662,1663,5,36,0,0,1663,
        1664,5,62,0,0,1664,1666,5,37,0,0,1665,1662,1,0,0,0,1665,1666,1,0,
        0,0,1666,169,1,0,0,0,1667,1672,3,168,84,0,1668,1669,5,25,0,0,1669,
        1671,3,168,84,0,1670,1668,1,0,0,0,1671,1674,1,0,0,0,1672,1670,1,
        0,0,0,1672,1673,1,0,0,0,1673,171,1,0,0,0,1674,1672,1,0,0,0,1675,
        1676,5,98,0,0,1676,1677,5,26,0,0,1677,1678,3,158,79,0,1678,1679,
        5,25,0,0,1679,1680,3,158,79,0,1680,1681,5,27,0,0,1681,173,1,0,0,
        0,1682,1683,5,210,0,0,1683,1684,5,5,0,0,1684,1685,3,204,102,0,1685,
        1686,5,7,0,0,1686,175,1,0,0,0,1687,1704,5,294,0,0,1688,1700,5,5,
        0,0,1689,1694,3,204,102,0,1690,1691,5,25,0,0,1691,1693,3,204,102,
        0,1692,1690,1,0,0,0,1693,1696,1,0,0,0,1694,1692,1,0,0,0,1694,1695,
        1,0,0,0,1695,1698,1,0,0,0,1696,1694,1,0,0,0,1697,1699,5,25,0,0,1698,
        1697,1,0,0,0,1698,1699,1,0,0,0,1699,1701,1,0,0,0,1700,1689,1,0,0,
        0,1700,1701,1,0,0,0,1701,1702,1,0,0,0,1702,1705,5,7,0,0,1703,1705,
        5,4,0,0,1704,1688,1,0,0,0,1704,1703,1,0,0,0,1705,177,1,0,0,0,1706,
        1723,5,273,0,0,1707,1719,5,5,0,0,1708,1713,3,162,81,0,1709,1710,
        5,25,0,0,1710,1712,3,162,81,0,1711,1709,1,0,0,0,1712,1715,1,0,0,
        0,1713,1711,1,0,0,0,1713,1714,1,0,0,0,1714,1717,1,0,0,0,1715,1713,
        1,0,0,0,1716,1718,5,25,0,0,1717,1716,1,0,0,0,1717,1718,1,0,0,0,1718,
        1720,1,0,0,0,1719,1708,1,0,0,0,1719,1720,1,0,0,0,1720,1721,1,0,0,
        0,1721,1724,5,7,0,0,1722,1724,5,4,0,0,1723,1707,1,0,0,0,1723,1722,
        1,0,0,0,1724,179,1,0,0,0,1725,1726,5,309,0,0,1726,1727,5,5,0,0,1727,
        1732,3,166,83,0,1728,1729,5,25,0,0,1729,1731,3,166,83,0,1730,1728,
        1,0,0,0,1731,1734,1,0,0,0,1732,1730,1,0,0,0,1732,1733,1,0,0,0,1733,
        1736,1,0,0,0,1734,1732,1,0,0,0,1735,1737,5,25,0,0,1736,1735,1,0,
        0,0,1736,1737,1,0,0,0,1737,1738,1,0,0,0,1738,1739,5,7,0,0,1739,181,
        1,0,0,0,1740,1741,5,184,0,0,1741,1742,5,5,0,0,1742,1743,3,204,102,
        0,1743,1744,5,7,0,0,1744,183,1,0,0,0,1745,1746,5,272,0,0,1746,1747,
        5,5,0,0,1747,1748,3,204,102,0,1748,1749,5,7,0,0,1749,185,1,0,0,0,
        1750,1751,5,140,0,0,1751,1752,5,5,0,0,1752,1753,3,204,102,0,1753,
        1754,5,7,0,0,1754,187,1,0,0,0,1755,1756,5,108,0,0,1756,1757,5,5,
        0,0,1757,1758,3,204,102,0,1758,1759,5,25,0,0,1759,1760,3,204,102,
        0,1760,1761,5,7,0,0,1761,189,1,0,0,0,1762,1763,5,267,0,0,1763,1764,
        5,5,0,0,1764,1765,3,204,102,0,1765,1766,5,7,0,0,1766,191,1,0,0,0,
        1767,1768,5,121,0,0,1768,1769,5,5,0,0,1769,1774,3,160,80,0,1770,
        1771,5,25,0,0,1771,1773,3,160,80,0,1772,1770,1,0,0,0,1773,1776,1,
        0,0,0,1774,1772,1,0,0,0,1774,1775,1,0,0,0,1775,1778,1,0,0,0,1776,
        1774,1,0,0,0,1777,1779,5,25,0,0,1778,1777,1,0,0,0,1778,1779,1,0,
        0,0,1779,1780,1,0,0,0,1780,1781,5,7,0,0,1781,193,1,0,0,0,1782,1783,
        5,246,0,0,1783,1784,5,5,0,0,1784,1785,3,160,80,0,1785,1786,5,7,0,
        0,1786,195,1,0,0,0,1787,1788,5,284,0,0,1788,1789,5,5,0,0,1789,1790,
        3,204,102,0,1790,1791,5,25,0,0,1791,1792,3,160,80,0,1792,1793,5,
        7,0,0,1793,197,1,0,0,0,1794,1795,5,71,0,0,1795,1796,5,5,0,0,1796,
        1798,5,26,0,0,1797,1799,3,170,85,0,1798,1797,1,0,0,0,1798,1799,1,
        0,0,0,1799,1801,1,0,0,0,1800,1802,5,25,0,0,1801,1800,1,0,0,0,1801,
        1802,1,0,0,0,1802,1807,1,0,0,0,1803,1804,5,42,0,0,1804,1805,3,170,
        85,0,1805,1806,5,41,0,0,1806,1808,1,0,0,0,1807,1803,1,0,0,0,1807,
        1808,1,0,0,0,1808,1809,1,0,0,0,1809,1810,5,27,0,0,1810,1811,5,40,
        0,0,1811,1812,3,204,102,0,1812,1813,5,7,0,0,1813,199,1,0,0,0,1814,
        1828,3,174,87,0,1815,1828,3,176,88,0,1816,1828,3,178,89,0,1817,1828,
        3,180,90,0,1818,1828,3,182,91,0,1819,1828,3,184,92,0,1820,1828,3,
        186,93,0,1821,1828,3,188,94,0,1822,1828,3,190,95,0,1823,1828,3,192,
        96,0,1824,1828,3,194,97,0,1825,1828,3,196,98,0,1826,1828,3,198,99,
        0,1827,1814,1,0,0,0,1827,1815,1,0,0,0,1827,1816,1,0,0,0,1827,1817,
        1,0,0,0,1827,1818,1,0,0,0,1827,1819,1,0,0,0,1827,1820,1,0,0,0,1827,
        1821,1,0,0,0,1827,1822,1,0,0,0,1827,1823,1,0,0,0,1827,1824,1,0,0,
        0,1827,1825,1,0,0,0,1827,1826,1,0,0,0,1828,1832,1,0,0,0,1829,1831,
        5,28,0,0,1830,1829,1,0,0,0,1831,1834,1,0,0,0,1832,1830,1,0,0,0,1832,
        1833,1,0,0,0,1833,201,1,0,0,0,1834,1832,1,0,0,0,1835,1847,3,200,
        100,0,1836,1839,3,172,86,0,1837,1839,3,156,78,0,1838,1836,1,0,0,
        0,1838,1837,1,0,0,0,1839,1843,1,0,0,0,1840,1842,5,28,0,0,1841,1840,
        1,0,0,0,1842,1845,1,0,0,0,1843,1841,1,0,0,0,1843,1844,1,0,0,0,1844,
        1847,1,0,0,0,1845,1843,1,0,0,0,1846,1835,1,0,0,0,1846,1838,1,0,0,
        0,1847,203,1,0,0,0,1848,1851,3,202,101,0,1849,1851,3,144,72,0,1850,
        1848,1,0,0,0,1850,1849,1,0,0,0,1851,205,1,0,0,0,1852,1853,5,319,
        0,0,1853,207,1,0,0,0,1854,1855,5,309,0,0,1855,1856,5,26,0,0,1856,
        1857,3,14,7,0,1857,1858,5,25,0,0,1858,1859,3,14,7,0,1859,1860,5,
        25,0,0,1860,1861,3,14,7,0,1861,1862,5,27,0,0,1862,1878,1,0,0,0,1863,
        1864,5,121,0,0,1864,1865,5,26,0,0,1865,1866,3,14,7,0,1866,1867,5,
        25,0,0,1867,1868,3,14,7,0,1868,1869,5,27,0,0,1869,1878,1,0,0,0,1870,
        1871,5,71,0,0,1871,1872,5,26,0,0,1872,1873,3,14,7,0,1873,1874,5,
        25,0,0,1874,1875,3,14,7,0,1875,1876,5,27,0,0,1876,1878,1,0,0,0,1877,
        1854,1,0,0,0,1877,1863,1,0,0,0,1877,1870,1,0,0,0,1878,209,1,0,0,
        0,1879,1880,5,99,0,0,1880,1881,3,144,72,0,1881,1882,5,54,0,0,1882,
        1885,3,202,101,0,1883,1884,5,1,0,0,1884,1886,3,142,71,0,1885,1883,
        1,0,0,0,1885,1886,1,0,0,0,1886,211,1,0,0,0,1887,1889,5,24,0,0,1888,
        1887,1,0,0,0,1888,1889,1,0,0,0,1889,1890,1,0,0,0,1890,1895,3,774,
        387,0,1891,1892,5,24,0,0,1892,1894,3,774,387,0,1893,1891,1,0,0,0,
        1894,1897,1,0,0,0,1895,1893,1,0,0,0,1895,1896,1,0,0,0,1896,213,1,
        0,0,0,1897,1895,1,0,0,0,1898,1899,5,160,0,0,1899,1900,3,212,106,
        0,1900,1901,5,276,0,0,1901,1902,3,152,76,0,1902,215,1,0,0,0,1903,
        1904,5,132,0,0,1904,1905,3,148,74,0,1905,217,1,0,0,0,1906,1909,3,
        144,72,0,1907,1909,5,118,0,0,1908,1906,1,0,0,0,1908,1907,1,0,0,0,
        1909,1910,1,0,0,0,1910,1912,5,26,0,0,1911,1913,3,112,56,0,1912,1911,
        1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,0,1914,1915,5,27,0,0,1915,
        219,1,0,0,0,1916,1917,5,66,0,0,1917,1918,3,610,305,0,1918,1919,5,
        120,0,0,1919,1920,5,113,0,0,1920,221,1,0,0,0,1921,1924,5,113,0,0,
        1922,1925,3,218,109,0,1923,1925,3,220,110,0,1924,1922,1,0,0,0,1924,
        1923,1,0,0,0,1925,223,1,0,0,0,1926,1927,5,226,0,0,1927,1928,3,804,
        402,0,1928,1942,3,774,387,0,1929,1930,5,1,0,0,1930,1943,3,226,113,
        0,1931,1932,5,26,0,0,1932,1937,3,226,113,0,1933,1934,5,25,0,0,1934,
        1936,3,226,113,0,1935,1933,1,0,0,0,1936,1939,1,0,0,0,1937,1935,1,
        0,0,0,1937,1938,1,0,0,0,1938,1940,1,0,0,0,1939,1937,1,0,0,0,1940,
        1941,5,27,0,0,1941,1943,1,0,0,0,1942,1929,1,0,0,0,1942,1931,1,0,
        0,0,1942,1943,1,0,0,0,1943,225,1,0,0,0,1944,1950,3,154,77,0,1945,
        1950,3,756,378,0,1946,1950,5,319,0,0,1947,1950,3,834,417,0,1948,
        1950,3,144,72,0,1949,1944,1,0,0,0,1949,1945,1,0,0,0,1949,1946,1,
        0,0,0,1949,1947,1,0,0,0,1949,1948,1,0,0,0,1950,227,1,0,0,0,1951,
        1953,3,14,7,0,1952,1954,7,9,0,0,1953,1952,1,0,0,0,1953,1954,1,0,
        0,0,1954,229,1,0,0,0,1955,1960,3,228,114,0,1956,1957,5,25,0,0,1957,
        1959,3,228,114,0,1958,1956,1,0,0,0,1959,1962,1,0,0,0,1960,1958,1,
        0,0,0,1960,1961,1,0,0,0,1961,231,1,0,0,0,1962,1960,1,0,0,0,1963,
        1969,3,236,118,0,1964,1965,3,238,119,0,1965,1966,3,236,118,0,1966,
        1968,1,0,0,0,1967,1964,1,0,0,0,1968,1971,1,0,0,0,1969,1967,1,0,0,
        0,1969,1970,1,0,0,0,1970,233,1,0,0,0,1971,1969,1,0,0,0,1972,1978,
        3,240,120,0,1973,1974,3,238,119,0,1974,1975,3,236,118,0,1975,1977,
        1,0,0,0,1976,1973,1,0,0,0,1977,1980,1,0,0,0,1978,1976,1,0,0,0,1978,
        1979,1,0,0,0,1979,235,1,0,0,0,1980,1978,1,0,0,0,1981,1987,3,240,
        120,0,1982,1983,5,26,0,0,1983,1984,3,240,120,0,1984,1985,5,27,0,
        0,1985,1987,1,0,0,0,1986,1981,1,0,0,0,1986,1982,1,0,0,0,1987,237,
        1,0,0,0,1988,1990,5,298,0,0,1989,1991,5,47,0,0,1990,1989,1,0,0,0,
        1990,1991,1,0,0,0,1991,1995,1,0,0,0,1992,1995,5,170,0,0,1993,1995,
        5,126,0,0,1994,1988,1,0,0,0,1994,1992,1,0,0,0,1994,1993,1,0,0,0,
        1995,239,1,0,0,0,1996,2003,3,242,121,0,1997,1998,5,183,0,0,1998,
        2001,3,14,7,0,1999,2000,7,10,0,0,2000,2002,3,14,7,0,2001,1999,1,
        0,0,0,2001,2002,1,0,0,0,2002,2004,1,0,0,0,2003,1997,1,0,0,0,2003,
        2004,1,0,0,0,2004,241,1,0,0,0,2005,2007,5,111,0,0,2006,2005,1,0,
        0,0,2006,2007,1,0,0,0,2007,2011,1,0,0,0,2008,2012,3,244,122,0,2009,
        2012,3,250,125,0,2010,2012,3,254,127,0,2011,2008,1,0,0,0,2011,2009,
        1,0,0,0,2011,2010,1,0,0,0,2012,2016,1,0,0,0,2013,2014,5,171,0,0,
        2014,2015,5,249,0,0,2015,2017,3,116,58,0,2016,2013,1,0,0,0,2016,
        2017,1,0,0,0,2017,243,1,0,0,0,2018,2020,5,231,0,0,2019,2021,5,272,
        0,0,2020,2019,1,0,0,0,2020,2021,1,0,0,0,2021,2022,1,0,0,0,2022,2027,
        3,346,173,0,2023,2024,5,25,0,0,2024,2026,3,346,173,0,2025,2023,1,
        0,0,0,2026,2029,1,0,0,0,2027,2025,1,0,0,0,2027,2028,1,0,0,0,2028,
        2052,1,0,0,0,2029,2027,1,0,0,0,2030,2031,5,306,0,0,2031,2034,3,136,
        68,0,2032,2033,5,54,0,0,2033,2035,3,774,387,0,2034,2032,1,0,0,0,
        2034,2035,1,0,0,0,2035,2038,1,0,0,0,2036,2037,5,315,0,0,2037,2039,
        3,248,124,0,2038,2036,1,0,0,0,2038,2039,1,0,0,0,2039,2042,1,0,0,
        0,2040,2041,5,313,0,0,2041,2043,3,14,7,0,2042,2040,1,0,0,0,2042,
        2043,1,0,0,0,2043,2046,1,0,0,0,2044,2045,5,154,0,0,2045,2047,3,14,
        7,0,2046,2044,1,0,0,0,2046,2047,1,0,0,0,2047,2050,1,0,0,0,2048,2049,
        5,56,0,0,2049,2051,3,314,157,0,2050,2048,1,0,0,0,2050,2051,1,0,0,
        0,2051,2053,1,0,0,0,2052,2030,1,0,0,0,2052,2053,1,0,0,0,2053,245,
        1,0,0,0,2054,2055,3,774,387,0,2055,2056,5,1,0,0,2056,2057,3,14,7,
        0,2057,247,1,0,0,0,2058,2063,3,246,123,0,2059,2060,5,25,0,0,2060,
        2062,3,246,123,0,2061,2059,1,0,0,0,2062,2065,1,0,0,0,2063,2061,1,
        0,0,0,2063,2064,1,0,0,0,2064,249,1,0,0,0,2065,2063,1,0,0,0,2066,
        2067,5,235,0,0,2067,2072,3,346,173,0,2068,2069,5,25,0,0,2069,2071,
        3,346,173,0,2070,2068,1,0,0,0,2071,2074,1,0,0,0,2072,2070,1,0,0,
        0,2072,2073,1,0,0,0,2073,2077,1,0,0,0,2074,2072,1,0,0,0,2075,2076,
        5,228,0,0,2076,2078,3,230,115,0,2077,2075,1,0,0,0,2077,2078,1,0,
        0,0,2078,2079,1,0,0,0,2079,2080,5,206,0,0,2080,2081,3,124,62,0,2081,
        2083,5,306,0,0,2082,2084,5,47,0,0,2083,2082,1,0,0,0,2083,2084,1,
        0,0,0,2084,2085,1,0,0,0,2085,2088,3,136,68,0,2086,2087,5,54,0,0,
        2087,2089,3,774,387,0,2088,2086,1,0,0,0,2088,2089,1,0,0,0,2089,2092,
        1,0,0,0,2090,2091,5,313,0,0,2091,2093,3,14,7,0,2092,2090,1,0,0,0,
        2092,2093,1,0,0,0,2093,2096,1,0,0,0,2094,2095,5,154,0,0,2095,2097,
        3,14,7,0,2096,2094,1,0,0,0,2096,2097,1,0,0,0,2097,2100,1,0,0,0,2098,
        2099,5,56,0,0,2099,2101,3,314,157,0,2100,2098,1,0,0,0,2100,2101,
        1,0,0,0,2101,251,1,0,0,0,2102,2104,7,11,0,0,2103,2102,1,0,0,0,2103,
        2104,1,0,0,0,2104,253,1,0,0,0,2105,2106,5,144,0,0,2106,2108,3,338,
        169,0,2107,2105,1,0,0,0,2107,2108,1,0,0,0,2108,2109,1,0,0,0,2109,
        2111,5,265,0,0,2110,2112,5,272,0,0,2111,2110,1,0,0,0,2111,2112,1,
        0,0,0,2112,2113,1,0,0,0,2113,2114,3,252,126,0,2114,2119,3,336,168,
        0,2115,2116,5,25,0,0,2116,2118,3,336,168,0,2117,2115,1,0,0,0,2118,
        2121,1,0,0,0,2119,2117,1,0,0,0,2119,2120,1,0,0,0,2120,2123,1,0,0,
        0,2121,2119,1,0,0,0,2122,2124,5,25,0,0,2123,2122,1,0,0,0,2123,2124,
        1,0,0,0,2124,2127,1,0,0,0,2125,2126,5,316,0,0,2126,2128,3,126,63,
        0,2127,2125,1,0,0,0,2127,2128,1,0,0,0,2128,2131,1,0,0,0,2129,2130,
        5,144,0,0,2130,2132,3,338,169,0,2131,2129,1,0,0,0,2131,2132,1,0,
        0,0,2132,2135,1,0,0,0,2133,2134,5,313,0,0,2134,2136,3,14,7,0,2135,
        2133,1,0,0,0,2135,2136,1,0,0,0,2136,2138,1,0,0,0,2137,2139,3,318,
        159,0,2138,2137,1,0,0,0,2138,2139,1,0,0,0,2139,2142,1,0,0,0,2140,
        2141,5,154,0,0,2141,2143,3,14,7,0,2142,2140,1,0,0,0,2142,2143,1,
        0,0,0,2143,2145,1,0,0,0,2144,2146,3,708,354,0,2145,2144,1,0,0,0,
        2145,2146,1,0,0,0,2146,2148,1,0,0,0,2147,2149,3,316,158,0,2148,2147,
        1,0,0,0,2148,2149,1,0,0,0,2149,255,1,0,0,0,2150,2151,5,189,0,0,2151,
        2153,5,26,0,0,2152,2154,3,722,361,0,2153,2152,1,0,0,0,2153,2154,
        1,0,0,0,2154,2156,1,0,0,0,2155,2157,3,314,157,0,2156,2155,1,0,0,
        0,2156,2157,1,0,0,0,2157,2159,1,0,0,0,2158,2160,3,262,131,0,2159,
        2158,1,0,0,0,2159,2160,1,0,0,0,2160,2162,1,0,0,0,2161,2163,3,258,
        129,0,2162,2161,1,0,0,0,2162,2163,1,0,0,0,2163,2164,1,0,0,0,2164,
        2165,3,268,134,0,2165,2166,5,27,0,0,2166,257,1,0,0,0,2167,2168,5,
        207,0,0,2168,2169,5,258,0,0,2169,2170,5,222,0,0,2170,2179,5,187,
        0,0,2171,2172,5,47,0,0,2172,2173,5,259,0,0,2173,2174,5,222,0,0,2174,
        2176,5,187,0,0,2175,2177,3,260,130,0,2176,2175,1,0,0,0,2176,2177,
        1,0,0,0,2177,2179,1,0,0,0,2178,2167,1,0,0,0,2178,2171,1,0,0,0,2179,
        259,1,0,0,0,2180,2181,5,269,0,0,2181,2182,5,117,0,0,2182,2190,5,
        188,0,0,2183,2184,5,205,0,0,2184,2185,5,117,0,0,2185,2190,5,188,
        0,0,2186,2187,5,315,0,0,2187,2188,5,301,0,0,2188,2190,5,259,0,0,
        2189,2180,1,0,0,0,2189,2183,1,0,0,0,2189,2186,1,0,0,0,2190,261,1,
        0,0,0,2191,2192,5,190,0,0,2192,2193,3,264,132,0,2193,263,1,0,0,0,
        2194,2199,3,266,133,0,2195,2196,5,25,0,0,2196,2198,3,266,133,0,2197,
        2195,1,0,0,0,2198,2201,1,0,0,0,2199,2197,1,0,0,0,2199,2200,1,0,0,
        0,2200,265,1,0,0,0,2201,2199,1,0,0,0,2202,2203,3,14,7,0,2203,2204,
        5,54,0,0,2204,2205,3,774,387,0,2205,267,1,0,0,0,2206,2207,5,46,0,
        0,2207,2208,5,187,0,0,2208,2210,3,270,135,0,2209,2206,1,0,0,0,2209,
        2210,1,0,0,0,2210,2212,1,0,0,0,2211,2213,3,274,137,0,2212,2211,1,
        0,0,0,2212,2213,1,0,0,0,2213,2214,1,0,0,0,2214,2215,5,221,0,0,2215,
        2216,5,26,0,0,2216,2217,3,276,138,0,2217,2219,5,27,0,0,2218,2220,
        3,290,145,0,2219,2218,1,0,0,0,2219,2220,1,0,0,0,2220,2221,1,0,0,
        0,2221,2222,5,103,0,0,2222,2223,3,302,151,0,2223,269,1,0,0,0,2224,
        2225,5,270,0,0,2225,2226,5,289,0,0,2226,2227,5,196,0,0,2227,2244,
        5,258,0,0,2228,2229,5,270,0,0,2229,2230,5,220,0,0,2230,2231,5,179,
        0,0,2231,2244,5,258,0,0,2232,2233,5,270,0,0,2233,2234,5,289,0,0,
        2234,2235,5,138,0,0,2235,2244,3,272,136,0,2236,2237,5,270,0,0,2237,
        2238,5,289,0,0,2238,2239,5,179,0,0,2239,2244,3,272,136,0,2240,2241,
        5,270,0,0,2241,2242,5,289,0,0,2242,2244,3,272,136,0,2243,2224,1,
        0,0,0,2243,2228,1,0,0,0,2243,2232,1,0,0,0,2243,2236,1,0,0,0,2243,
        2240,1,0,0,0,2244,271,1,0,0,0,2245,2246,3,312,156,0,2246,273,1,0,
        0,0,2247,2248,7,12,0,0,2248,275,1,0,0,0,2249,2254,3,278,139,0,2250,
        2251,5,12,0,0,2251,2253,3,278,139,0,2252,2250,1,0,0,0,2253,2256,
        1,0,0,0,2254,2252,1,0,0,0,2254,2255,1,0,0,0,2255,277,1,0,0,0,2256,
        2254,1,0,0,0,2257,2259,3,280,140,0,2258,2257,1,0,0,0,2259,2260,1,
        0,0,0,2260,2258,1,0,0,0,2260,2261,1,0,0,0,2261,279,1,0,0,0,2262,
        2264,3,284,142,0,2263,2265,3,282,141,0,2264,2263,1,0,0,0,2264,2265,
        1,0,0,0,2265,281,1,0,0,0,2266,2268,5,19,0,0,2267,2269,5,28,0,0,2268,
        2267,1,0,0,0,2268,2269,1,0,0,0,2269,2295,1,0,0,0,2270,2272,5,16,
        0,0,2271,2273,5,28,0,0,2272,2271,1,0,0,0,2272,2273,1,0,0,0,2273,
        2295,1,0,0,0,2274,2276,5,28,0,0,2275,2277,5,28,0,0,2276,2275,1,0,
        0,0,2276,2277,1,0,0,0,2277,2295,1,0,0,0,2278,2280,5,36,0,0,2279,
        2281,3,838,419,0,2280,2279,1,0,0,0,2280,2281,1,0,0,0,2281,2282,1,
        0,0,0,2282,2284,5,25,0,0,2283,2285,3,838,419,0,2284,2283,1,0,0,0,
        2284,2285,1,0,0,0,2285,2286,1,0,0,0,2286,2288,5,37,0,0,2287,2289,
        5,28,0,0,2288,2287,1,0,0,0,2288,2289,1,0,0,0,2289,2295,1,0,0,0,2290,
        2291,5,36,0,0,2291,2292,3,838,419,0,2292,2293,5,37,0,0,2293,2295,
        1,0,0,0,2294,2266,1,0,0,0,2294,2270,1,0,0,0,2294,2274,1,0,0,0,2294,
        2278,1,0,0,0,2294,2290,1,0,0,0,2295,283,1,0,0,0,2296,2312,3,286,
        143,0,2297,2312,5,32,0,0,2298,2312,5,38,0,0,2299,2301,5,26,0,0,2300,
        2302,3,276,138,0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,2302,2303,1,
        0,0,0,2303,2312,5,27,0,0,2304,2305,5,36,0,0,2305,2306,5,17,0,0,2306,
        2307,3,276,138,0,2307,2308,5,17,0,0,2308,2309,5,37,0,0,2309,2312,
        1,0,0,0,2310,2312,3,288,144,0,2311,2296,1,0,0,0,2311,2297,1,0,0,
        0,2311,2298,1,0,0,0,2311,2299,1,0,0,0,2311,2304,1,0,0,0,2311,2310,
        1,0,0,0,2312,285,1,0,0,0,2313,2314,3,312,156,0,2314,287,1,0,0,0,
        2315,2316,5,223,0,0,2316,2317,5,26,0,0,2317,2322,3,276,138,0,2318,
        2319,5,25,0,0,2319,2321,3,276,138,0,2320,2318,1,0,0,0,2321,2324,
        1,0,0,0,2322,2320,1,0,0,0,2322,2323,1,0,0,0,2323,2325,1,0,0,0,2324,
        2322,1,0,0,0,2325,2326,5,27,0,0,2326,289,1,0,0,0,2327,2328,5,275,
        0,0,2328,2329,3,292,146,0,2329,291,1,0,0,0,2330,2335,3,294,147,0,
        2331,2332,5,25,0,0,2332,2334,3,294,147,0,2333,2331,1,0,0,0,2334,
        2337,1,0,0,0,2335,2333,1,0,0,0,2335,2336,1,0,0,0,2336,293,1,0,0,
        0,2337,2335,1,0,0,0,2338,2339,3,296,148,0,2339,2340,5,1,0,0,2340,
        2341,5,26,0,0,2341,2342,3,298,149,0,2342,2343,5,27,0,0,2343,295,
        1,0,0,0,2344,2345,3,312,156,0,2345,297,1,0,0,0,2346,2351,3,300,150,
        0,2347,2348,5,25,0,0,2348,2350,3,300,150,0,2349,2347,1,0,0,0,2350,
        2353,1,0,0,0,2351,2349,1,0,0,0,2351,2352,1,0,0,0,2352,299,1,0,0,
        0,2353,2351,1,0,0,0,2354,2355,3,312,156,0,2355,301,1,0,0,0,2356,
        2361,3,304,152,0,2357,2358,5,25,0,0,2358,2360,3,304,152,0,2359,2357,
        1,0,0,0,2360,2363,1,0,0,0,2361,2359,1,0,0,0,2361,2362,1,0,0,0,2362,
        303,1,0,0,0,2363,2361,1,0,0,0,2364,2365,3,306,153,0,2365,2366,5,
        54,0,0,2366,2367,3,308,154,0,2367,305,1,0,0,0,2368,2369,3,312,156,
        0,2369,307,1,0,0,0,2370,2371,3,310,155,0,2371,309,1,0,0,0,2372,2373,
        3,14,7,0,2373,311,1,0,0,0,2374,2375,3,754,377,0,2375,313,1,0,0,0,
        2376,2377,5,212,0,0,2377,2378,5,70,0,0,2378,2379,3,230,115,0,2379,
        315,1,0,0,0,2380,2382,5,56,0,0,2381,2380,1,0,0,0,2381,2382,1,0,0,
        0,2382,2383,1,0,0,0,2383,2384,3,314,157,0,2384,317,1,0,0,0,2385,
        2387,5,150,0,0,2386,2388,5,82,0,0,2387,2386,1,0,0,0,2387,2388,1,
        0,0,0,2388,2389,1,0,0,0,2389,2390,5,70,0,0,2390,2391,3,252,126,0,
        2391,2394,3,320,160,0,2392,2393,5,315,0,0,2393,2395,3,774,387,0,
        2394,2392,1,0,0,0,2394,2395,1,0,0,0,2395,319,1,0,0,0,2396,2401,3,
        322,161,0,2397,2398,5,25,0,0,2398,2400,3,322,161,0,2399,2397,1,0,
        0,0,2400,2403,1,0,0,0,2401,2399,1,0,0,0,2401,2402,1,0,0,0,2402,321,
        1,0,0,0,2403,2401,1,0,0,0,2404,2410,3,324,162,0,2405,2410,3,328,
        164,0,2406,2410,3,330,165,0,2407,2410,3,332,166,0,2408,2410,3,334,
        167,0,2409,2404,1,0,0,0,2409,2405,1,0,0,0,2409,2406,1,0,0,0,2409,
        2407,1,0,0,0,2409,2408,1,0,0,0,2410,323,1,0,0,0,2411,2412,3,128,
        64,0,2412,325,1,0,0,0,2413,2418,3,324,162,0,2414,2415,5,25,0,0,2415,
        2417,3,324,162,0,2416,2414,1,0,0,0,2417,2420,1,0,0,0,2418,2416,1,
        0,0,0,2418,2419,1,0,0,0,2419,327,1,0,0,0,2420,2418,1,0,0,0,2421,
        2422,5,257,0,0,2422,2423,5,26,0,0,2423,2424,3,326,163,0,2424,2425,
        5,27,0,0,2425,329,1,0,0,0,2426,2427,5,91,0,0,2427,2428,5,26,0,0,
        2428,2429,3,326,163,0,2429,2430,5,27,0,0,2430,331,1,0,0,0,2431,2432,
        5,151,0,0,2432,2433,5,268,0,0,2433,2434,5,26,0,0,2434,2435,3,320,
        160,0,2435,2436,5,27,0,0,2436,333,1,0,0,0,2437,2438,5,155,0,0,2438,
        2439,5,26,0,0,2439,2440,3,14,7,0,2440,2441,5,25,0,0,2441,2442,3,
        14,7,0,2442,2443,5,25,0,0,2443,2444,3,14,7,0,2444,2445,5,25,0,0,
        2445,2446,3,14,7,0,2446,2447,5,27,0,0,2447,335,1,0,0,0,2448,2449,
        3,798,399,0,2449,2450,5,19,0,0,2450,2458,1,0,0,0,2451,2455,3,14,
        7,0,2452,2453,5,54,0,0,2453,2456,3,776,388,0,2454,2456,3,794,397,
        0,2455,2452,1,0,0,0,2455,2454,1,0,0,0,2455,2456,1,0,0,0,2456,2458,
        1,0,0,0,2457,2448,1,0,0,0,2457,2451,1,0,0,0,2458,337,1,0,0,0,2459,
        2461,5,52,0,0,2460,2459,1,0,0,0,2460,2461,1,0,0,0,2461,2462,1,0,
        0,0,2462,2473,3,344,172,0,2463,2465,3,358,179,0,2464,2466,5,52,0,
        0,2465,2464,1,0,0,0,2465,2466,1,0,0,0,2466,2467,1,0,0,0,2467,2469,
        3,344,172,0,2468,2470,3,360,180,0,2469,2468,1,0,0,0,2469,2470,1,
        0,0,0,2470,2472,1,0,0,0,2471,2463,1,0,0,0,2472,2475,1,0,0,0,2473,
        2471,1,0,0,0,2473,2474,1,0,0,0,2474,339,1,0,0,0,2475,2473,1,0,0,
        0,2476,2479,3,120,60,0,2477,2478,5,54,0,0,2478,2480,3,774,387,0,
        2479,2477,1,0,0,0,2479,2480,1,0,0,0,2480,341,1,0,0,0,2481,2490,3,
        340,170,0,2482,2483,5,26,0,0,2483,2485,3,130,65,0,2484,2486,5,25,
        0,0,2485,2484,1,0,0,0,2485,2486,1,0,0,0,2486,2487,1,0,0,0,2487,2488,
        5,27,0,0,2488,2490,1,0,0,0,2489,2481,1,0,0,0,2489,2482,1,0,0,0,2490,
        343,1,0,0,0,2491,2501,3,346,173,0,2492,2499,5,139,0,0,2493,2495,
        7,13,0,0,2494,2493,1,0,0,0,2494,2495,1,0,0,0,2495,2496,1,0,0,0,2496,
        2497,5,70,0,0,2497,2500,3,342,171,0,2498,2500,5,80,0,0,2499,2494,
        1,0,0,0,2499,2498,1,0,0,0,2500,2502,1,0,0,0,2501,2492,1,0,0,0,2501,
        2502,1,0,0,0,2502,345,1,0,0,0,2503,2505,3,348,174,0,2504,2506,3,
        256,128,0,2505,2504,1,0,0,0,2505,2506,1,0,0,0,2506,2515,1,0,0,0,
        2507,2508,5,54,0,0,2508,2511,3,774,387,0,2509,2511,3,794,397,0,2510,
        2507,1,0,0,0,2510,2509,1,0,0,0,2511,2513,1,0,0,0,2512,2514,3,114,
        57,0,2513,2512,1,0,0,0,2513,2514,1,0,0,0,2514,2516,1,0,0,0,2515,
        2510,1,0,0,0,2515,2516,1,0,0,0,2516,2519,1,0,0,0,2517,2520,3,350,
        175,0,2518,2520,3,352,176,0,2519,2517,1,0,0,0,2519,2518,1,0,0,0,
        2519,2520,1,0,0,0,2520,347,1,0,0,0,2521,2531,3,616,308,0,2522,2523,
        5,26,0,0,2523,2524,3,232,116,0,2524,2525,5,27,0,0,2525,2531,1,0,
        0,0,2526,2527,5,26,0,0,2527,2528,3,368,184,0,2528,2529,5,27,0,0,
        2529,2531,1,0,0,0,2530,2521,1,0,0,0,2530,2522,1,0,0,0,2530,2526,
        1,0,0,0,2531,349,1,0,0,0,2532,2533,5,260,0,0,2533,2534,3,14,7,0,
        2534,351,1,0,0,0,2535,2536,5,282,0,0,2536,2537,3,354,177,0,2537,
        2538,5,26,0,0,2538,2539,3,14,7,0,2539,2541,5,27,0,0,2540,2542,3,
        356,178,0,2541,2540,1,0,0,0,2541,2542,1,0,0,0,2542,353,1,0,0,0,2543,
        2544,7,14,0,0,2544,355,1,0,0,0,2545,2546,5,242,0,0,2546,2547,5,26,
        0,0,2547,2548,3,14,7,0,2548,2549,5,27,0,0,2549,357,1,0,0,0,2550,
        2575,5,25,0,0,2551,2553,5,195,0,0,2552,2551,1,0,0,0,2552,2553,1,
        0,0,0,2553,2571,1,0,0,0,2554,2556,5,180,0,0,2555,2557,7,15,0,0,2556,
        2555,1,0,0,0,2556,2557,1,0,0,0,2557,2565,1,0,0,0,2558,2560,5,254,
        0,0,2559,2561,7,15,0,0,2560,2559,1,0,0,0,2560,2561,1,0,0,0,2561,
        2565,1,0,0,0,2562,2565,5,128,0,0,2563,2565,5,145,0,0,2564,2554,1,
        0,0,0,2564,2558,1,0,0,0,2564,2562,1,0,0,0,2564,2563,1,0,0,0,2564,
        2565,1,0,0,0,2565,2567,1,0,0,0,2566,2568,5,214,0,0,2567,2566,1,0,
        0,0,2567,2568,1,0,0,0,2568,2572,1,0,0,0,2569,2572,5,167,0,0,2570,
        2572,5,90,0,0,2571,2564,1,0,0,0,2571,2569,1,0,0,0,2571,2570,1,0,
        0,0,2572,2573,1,0,0,0,2573,2575,5,174,0,0,2574,2550,1,0,0,0,2574,
        2552,1,0,0,0,2575,359,1,0,0,0,2576,2577,5,206,0,0,2577,2581,3,14,
        7,0,2578,2579,5,306,0,0,2579,2581,3,118,59,0,2580,2576,1,0,0,0,2580,
        2578,1,0,0,0,2581,361,1,0,0,0,2582,2592,5,251,0,0,2583,2593,5,19,
        0,0,2584,2589,3,774,387,0,2585,2586,5,25,0,0,2586,2588,3,774,387,
        0,2587,2585,1,0,0,0,2588,2591,1,0,0,0,2589,2587,1,0,0,0,2589,2590,
        1,0,0,0,2590,2593,1,0,0,0,2591,2589,1,0,0,0,2592,2583,1,0,0,0,2592,
        2584,1,0,0,0,2593,363,1,0,0,0,2594,2607,5,168,0,0,2595,2596,5,168,
        0,0,2596,2597,5,211,0,0,2597,2607,5,43,0,0,2598,2599,5,168,0,0,2599,
        2600,5,211,0,0,2600,2607,5,252,0,0,2601,2602,5,168,0,0,2602,2603,
        5,211,0,0,2603,2607,5,157,0,0,2604,2607,5,303,0,0,2605,2607,5,243,
        0,0,2606,2594,1,0,0,0,2606,2595,1,0,0,0,2606,2598,1,0,0,0,2606,2601,
        1,0,0,0,2606,2604,1,0,0,0,2606,2605,1,0,0,0,2607,2608,1,0,0,0,2608,
        2609,5,171,0,0,2609,2610,3,632,316,0,2610,2612,3,366,183,0,2611,
        2613,3,362,181,0,2612,2611,1,0,0,0,2612,2613,1,0,0,0,2613,365,1,
        0,0,0,2614,2616,3,114,57,0,2615,2614,1,0,0,0,2615,2616,1,0,0,0,2616,
        2617,1,0,0,0,2617,2621,3,370,185,0,2618,2619,5,100,0,0,2619,2621,
        5,308,0,0,2620,2615,1,0,0,0,2620,2618,1,0,0,0,2621,367,1,0,0,0,2622,
        2623,5,308,0,0,2623,2624,3,372,186,0,2624,369,1,0,0,0,2625,2628,
        3,368,184,0,2626,2628,3,232,116,0,2627,2625,1,0,0,0,2627,2626,1,
        0,0,0,2628,371,1,0,0,0,2629,2634,3,374,187,0,2630,2631,5,25,0,0,
        2631,2633,3,374,187,0,2632,2630,1,0,0,0,2633,2636,1,0,0,0,2634,2632,
        1,0,0,0,2634,2635,1,0,0,0,2635,373,1,0,0,0,2636,2634,1,0,0,0,2637,
        2638,5,26,0,0,2638,2639,3,112,56,0,2639,2640,5,27,0,0,2640,375,1,
        0,0,0,2641,2644,3,112,56,0,2642,2644,3,232,116,0,2643,2641,1,0,0,
        0,2643,2642,1,0,0,0,2644,377,1,0,0,0,2645,2648,5,89,0,0,2646,2647,
        5,211,0,0,2647,2649,5,243,0,0,2648,2646,1,0,0,0,2648,2649,1,0,0,
        0,2649,2650,1,0,0,0,2650,2651,5,133,0,0,2651,2652,5,96,0,0,2652,
        2656,5,271,0,0,2653,2654,5,156,0,0,2654,2655,5,198,0,0,2655,2657,
        5,130,0,0,2656,2653,1,0,0,0,2656,2657,1,0,0,0,2657,2658,1,0,0,0,
        2658,2659,3,626,313,0,2659,2660,3,440,220,0,2660,379,1,0,0,0,2661,
        2662,5,48,0,0,2662,2663,5,133,0,0,2663,2664,5,96,0,0,2664,2665,5,
        271,0,0,2665,2666,3,626,313,0,2666,2671,3,382,191,0,2667,2668,5,
        25,0,0,2668,2670,3,382,191,0,2669,2667,1,0,0,0,2670,2673,1,0,0,0,
        2671,2669,1,0,0,0,2671,2672,1,0,0,0,2672,381,1,0,0,0,2673,2671,1,
        0,0,0,2674,2678,3,472,236,0,2675,2678,3,474,237,0,2676,2678,3,476,
        238,0,2677,2674,1,0,0,0,2677,2675,1,0,0,0,2677,2676,1,0,0,0,2678,
        383,1,0,0,0,2679,2680,5,114,0,0,2680,2681,5,133,0,0,2681,2682,5,
        96,0,0,2682,2685,5,271,0,0,2683,2684,5,156,0,0,2684,2686,5,130,0,
        0,2685,2683,1,0,0,0,2685,2686,1,0,0,0,2686,2687,1,0,0,0,2687,2688,
        3,626,313,0,2688,385,1,0,0,0,2689,2690,5,89,0,0,2690,2691,5,310,
        0,0,2691,2692,3,626,313,0,2692,2693,3,440,220,0,2693,2694,5,54,0,
        0,2694,2695,3,232,116,0,2695,387,1,0,0,0,2696,2697,5,114,0,0,2697,
        2698,5,310,0,0,2698,2699,3,626,313,0,2699,389,1,0,0,0,2700,2701,
        5,303,0,0,2701,2702,5,202,0,0,2702,2703,3,626,313,0,2703,2704,5,
        26,0,0,2704,2705,5,295,0,0,2705,2706,3,414,207,0,2706,2708,5,27,
        0,0,2707,2709,3,394,197,0,2708,2707,1,0,0,0,2708,2709,1,0,0,0,2709,
        391,1,0,0,0,2710,2711,5,89,0,0,2711,2715,5,202,0,0,2712,2713,5,156,
        0,0,2713,2714,5,198,0,0,2714,2716,5,130,0,0,2715,2712,1,0,0,0,2715,
        2716,1,0,0,0,2716,2717,1,0,0,0,2717,2718,3,626,313,0,2718,2719,5,
        26,0,0,2719,2720,5,295,0,0,2720,2721,3,414,207,0,2721,2723,5,27,
        0,0,2722,2724,3,394,197,0,2723,2722,1,0,0,0,2723,2724,1,0,0,0,2724,
        393,1,0,0,0,2725,2726,5,315,0,0,2726,2727,3,412,206,0,2727,395,1,
        0,0,0,2728,2729,5,48,0,0,2729,2730,5,202,0,0,2730,2731,3,626,313,
        0,2731,2732,5,26,0,0,2732,2733,5,295,0,0,2733,2734,3,414,207,0,2734,
        2735,5,27,0,0,2735,2736,3,398,199,0,2736,397,1,0,0,0,2737,2738,5,
        267,0,0,2738,2739,3,412,206,0,2739,399,1,0,0,0,2740,2741,5,114,0,
        0,2741,2744,5,202,0,0,2742,2743,5,156,0,0,2743,2745,5,130,0,0,2744,
        2742,1,0,0,0,2744,2745,1,0,0,0,2745,2746,1,0,0,0,2746,2747,3,626,
        313,0,2747,2748,5,26,0,0,2748,2749,5,295,0,0,2749,2750,3,414,207,
        0,2750,2752,5,27,0,0,2751,2753,3,402,201,0,2752,2751,1,0,0,0,2752,
        2753,1,0,0,0,2753,401,1,0,0,0,2754,2755,5,315,0,0,2755,2756,3,412,
        206,0,2756,403,1,0,0,0,2757,2761,3,802,401,0,2758,2761,3,144,72,
        0,2759,2761,5,319,0,0,2760,2757,1,0,0,0,2760,2758,1,0,0,0,2760,2759,
        1,0,0,0,2761,405,1,0,0,0,2762,2763,3,776,388,0,2763,2764,5,1,0,0,
        2764,2765,3,404,202,0,2765,407,1,0,0,0,2766,2767,3,776,388,0,2767,
        409,1,0,0,0,2768,2771,3,406,203,0,2769,2771,3,408,204,0,2770,2768,
        1,0,0,0,2770,2769,1,0,0,0,2771,411,1,0,0,0,2772,2785,3,410,205,0,
        2773,2774,5,26,0,0,2774,2779,3,410,205,0,2775,2776,5,25,0,0,2776,
        2778,3,410,205,0,2777,2775,1,0,0,0,2778,2781,1,0,0,0,2779,2777,1,
        0,0,0,2779,2780,1,0,0,0,2780,2782,1,0,0,0,2781,2779,1,0,0,0,2782,
        2783,5,27,0,0,2783,2785,1,0,0,0,2784,2772,1,0,0,0,2784,2773,1,0,
        0,0,2785,413,1,0,0,0,2786,2787,3,776,388,0,2787,415,1,0,0,0,2788,
        2791,5,89,0,0,2789,2790,5,211,0,0,2790,2792,5,243,0,0,2791,2789,
        1,0,0,0,2791,2792,1,0,0,0,2792,2801,1,0,0,0,2793,2802,5,280,0,0,
        2794,2802,5,283,0,0,2795,2796,5,133,0,0,2796,2802,5,280,0,0,2797,
        2798,5,285,0,0,2798,2802,5,280,0,0,2799,2800,5,286,0,0,2800,2802,
        5,280,0,0,2801,2793,1,0,0,0,2801,2794,1,0,0,0,2801,2795,1,0,0,0,
        2801,2797,1,0,0,0,2801,2799,1,0,0,0,2802,2806,1,0,0,0,2803,2804,
        5,156,0,0,2804,2805,5,198,0,0,2805,2807,5,130,0,0,2806,2803,1,0,
        0,0,2806,2807,1,0,0,0,2807,2808,1,0,0,0,2808,2809,3,630,315,0,2809,
        2810,5,26,0,0,2810,2815,3,418,209,0,2811,2812,5,25,0,0,2812,2814,
        3,418,209,0,2813,2811,1,0,0,0,2814,2817,1,0,0,0,2815,2813,1,0,0,
        0,2815,2816,1,0,0,0,2816,2819,1,0,0,0,2817,2815,1,0,0,0,2818,2820,
        5,25,0,0,2819,2818,1,0,0,0,2819,2820,1,0,0,0,2820,2821,1,0,0,0,2821,
        2823,5,27,0,0,2822,2824,3,436,218,0,2823,2822,1,0,0,0,2823,2824,
        1,0,0,0,2824,2826,1,0,0,0,2825,2827,3,438,219,0,2826,2825,1,0,0,
        0,2826,2827,1,0,0,0,2827,2829,1,0,0,0,2828,2830,3,440,220,0,2829,
        2828,1,0,0,0,2829,2830,1,0,0,0,2830,2832,1,0,0,0,2831,2833,3,442,
        221,0,2832,2831,1,0,0,0,2832,2833,1,0,0,0,2833,2835,1,0,0,0,2834,
        2836,3,446,223,0,2835,2834,1,0,0,0,2835,2836,1,0,0,0,2836,417,1,
        0,0,0,2837,2844,3,494,247,0,2838,2844,3,502,251,0,2839,2844,3,504,
        252,0,2840,2844,3,534,267,0,2841,2844,3,520,260,0,2842,2844,3,778,
        389,0,2843,2837,1,0,0,0,2843,2838,1,0,0,0,2843,2839,1,0,0,0,2843,
        2840,1,0,0,0,2843,2841,1,0,0,0,2843,2842,1,0,0,0,2844,419,1,0,0,
        0,2845,2846,5,89,0,0,2846,2847,3,430,215,0,2847,2848,5,315,0,0,2848,
        2849,5,26,0,0,2849,2850,3,432,216,0,2850,2851,5,27,0,0,2851,421,
        1,0,0,0,2852,2853,5,48,0,0,2853,2854,3,430,215,0,2854,2855,3,426,
        213,0,2855,423,1,0,0,0,2856,2857,5,114,0,0,2857,2858,3,430,215,0,
        2858,425,1,0,0,0,2859,2864,3,428,214,0,2860,2861,5,25,0,0,2861,2863,
        3,428,214,0,2862,2860,1,0,0,0,2863,2866,1,0,0,0,2864,2862,1,0,0,
        0,2864,2865,1,0,0,0,2865,427,1,0,0,0,2866,2864,1,0,0,0,2867,2870,
        3,474,237,0,2868,2870,3,476,238,0,2869,2867,1,0,0,0,2869,2868,1,
        0,0,0,2870,429,1,0,0,0,2871,2872,5,63,0,0,2872,2873,5,64,0,0,2873,
        2874,3,626,313,0,2874,431,1,0,0,0,2875,2880,3,434,217,0,2876,2877,
        5,25,0,0,2877,2879,3,434,217,0,2878,2876,1,0,0,0,2879,2882,1,0,0,
        0,2880,2878,1,0,0,0,2880,2881,1,0,0,0,2881,433,1,0,0,0,2882,2880,
        1,0,0,0,2883,2884,3,774,387,0,2884,2885,5,1,0,0,2885,2886,3,532,
        266,0,2886,435,1,0,0,0,2887,2888,5,164,0,0,2888,2889,5,26,0,0,2889,
        2894,3,628,314,0,2890,2891,5,25,0,0,2891,2893,3,628,314,0,2892,2890,
        1,0,0,0,2893,2896,1,0,0,0,2894,2892,1,0,0,0,2894,2895,1,0,0,0,2895,
        2897,1,0,0,0,2896,2894,1,0,0,0,2897,2898,5,27,0,0,2898,437,1,0,0,
        0,2899,2900,5,217,0,0,2900,2901,5,70,0,0,2901,2902,5,153,0,0,2902,
        2903,3,114,57,0,2903,439,1,0,0,0,2904,2905,5,315,0,0,2905,2906,5,
        26,0,0,2906,2911,3,444,222,0,2907,2908,5,25,0,0,2908,2910,3,444,
        222,0,2909,2907,1,0,0,0,2910,2913,1,0,0,0,2911,2909,1,0,0,0,2911,
        2912,1,0,0,0,2912,2914,1,0,0,0,2913,2911,1,0,0,0,2914,2915,5,27,
        0,0,2915,441,1,0,0,0,2916,2917,5,283,0,0,2917,2918,3,628,314,0,2918,
        443,1,0,0,0,2919,2920,3,774,387,0,2920,2921,5,1,0,0,2921,2922,3,
        532,266,0,2922,445,1,0,0,0,2923,2924,5,54,0,0,2924,2925,3,370,185,
        0,2925,447,1,0,0,0,2926,2927,5,48,0,0,2927,2928,5,280,0,0,2928,2929,
        3,630,315,0,2929,2934,3,450,225,0,2930,2931,5,25,0,0,2931,2933,3,
        450,225,0,2932,2930,1,0,0,0,2933,2936,1,0,0,0,2934,2932,1,0,0,0,
        2934,2935,1,0,0,0,2935,449,1,0,0,0,2936,2934,1,0,0,0,2937,2955,3,
        460,230,0,2938,2955,3,462,231,0,2939,2955,3,464,232,0,2940,2955,
        3,468,234,0,2941,2955,3,470,235,0,2942,2955,3,472,236,0,2943,2955,
        3,474,237,0,2944,2955,3,476,238,0,2945,2955,3,478,239,0,2946,2955,
        3,480,240,0,2947,2955,3,482,241,0,2948,2955,3,486,243,0,2949,2955,
        3,488,244,0,2950,2955,3,490,245,0,2951,2955,3,484,242,0,2952,2955,
        3,492,246,0,2953,2955,3,466,233,0,2954,2937,1,0,0,0,2954,2938,1,
        0,0,0,2954,2939,1,0,0,0,2954,2940,1,0,0,0,2954,2941,1,0,0,0,2954,
        2942,1,0,0,0,2954,2943,1,0,0,0,2954,2944,1,0,0,0,2954,2945,1,0,0,
        0,2954,2946,1,0,0,0,2954,2947,1,0,0,0,2954,2948,1,0,0,0,2954,2949,
        1,0,0,0,2954,2950,1,0,0,0,2954,2951,1,0,0,0,2954,2952,1,0,0,0,2954,
        2953,1,0,0,0,2955,451,1,0,0,0,2956,2957,5,48,0,0,2957,2958,5,133,
        0,0,2958,2959,5,280,0,0,2959,2960,3,630,315,0,2960,2965,3,454,227,
        0,2961,2962,5,25,0,0,2962,2964,3,454,227,0,2963,2961,1,0,0,0,2964,
        2967,1,0,0,0,2965,2963,1,0,0,0,2965,2966,1,0,0,0,2966,453,1,0,0,
        0,2967,2965,1,0,0,0,2968,2974,3,460,230,0,2969,2974,3,462,231,0,
        2970,2974,3,472,236,0,2971,2974,3,474,237,0,2972,2974,3,476,238,
        0,2973,2968,1,0,0,0,2973,2969,1,0,0,0,2973,2970,1,0,0,0,2973,2971,
        1,0,0,0,2973,2972,1,0,0,0,2974,455,1,0,0,0,2975,2976,5,48,0,0,2976,
        2977,5,283,0,0,2977,2978,3,626,313,0,2978,2983,3,458,229,0,2979,
        2980,5,25,0,0,2980,2982,3,458,229,0,2981,2979,1,0,0,0,2982,2985,
        1,0,0,0,2983,2981,1,0,0,0,2983,2984,1,0,0,0,2984,457,1,0,0,0,2985,
        2983,1,0,0,0,2986,2989,3,460,230,0,2987,2989,3,462,231,0,2988,2986,
        1,0,0,0,2988,2987,1,0,0,0,2989,459,1,0,0,0,2990,2992,5,45,0,0,2991,
        2993,5,79,0,0,2992,2991,1,0,0,0,2992,2993,1,0,0,0,2993,2994,1,0,
        0,0,2994,2995,3,494,247,0,2995,461,1,0,0,0,2996,2998,5,114,0,0,2997,
        2999,5,79,0,0,2998,2997,1,0,0,0,2998,2999,1,0,0,0,2999,3000,1,0,
        0,0,3000,3001,3,774,387,0,3001,463,1,0,0,0,3002,3003,5,48,0,0,3003,
        3004,5,79,0,0,3004,3005,3,774,387,0,3005,3006,5,267,0,0,3006,3007,
        3,496,248,0,3007,465,1,0,0,0,3008,3009,5,48,0,0,3009,3010,5,79,0,
        0,3010,3011,3,774,387,0,3011,3012,5,114,0,0,3012,3013,5,198,0,0,
        3013,3014,5,200,0,0,3014,467,1,0,0,0,3015,3016,5,45,0,0,3016,3017,
        3,534,267,0,3017,469,1,0,0,0,3018,3019,5,48,0,0,3019,3020,5,136,
        0,0,3020,3021,3,774,387,0,3021,3022,5,267,0,0,3022,3023,3,774,387,
        0,3023,3024,3,540,270,0,3024,471,1,0,0,0,3025,3026,5,267,0,0,3026,
        3027,3,774,387,0,3027,3028,3,532,266,0,3028,473,1,0,0,0,3029,3030,
        5,267,0,0,3030,3031,5,26,0,0,3031,3036,3,530,265,0,3032,3033,5,25,
        0,0,3033,3035,3,530,265,0,3034,3032,1,0,0,0,3035,3038,1,0,0,0,3036,
        3034,1,0,0,0,3036,3037,1,0,0,0,3037,3039,1,0,0,0,3038,3036,1,0,0,
        0,3039,3040,5,27,0,0,3040,475,1,0,0,0,3041,3042,5,245,0,0,3042,3043,
        5,26,0,0,3043,3048,3,774,387,0,3044,3045,5,25,0,0,3045,3047,3,774,
        387,0,3046,3044,1,0,0,0,3047,3050,1,0,0,0,3048,3046,1,0,0,0,3048,
        3049,1,0,0,0,3049,3051,1,0,0,0,3050,3048,1,0,0,0,3051,3052,5,27,
        0,0,3052,477,1,0,0,0,3053,3054,5,45,0,0,3054,3055,3,504,252,0,3055,
        479,1,0,0,0,3056,3057,5,114,0,0,3057,3058,5,162,0,0,3058,3059,3,
        774,387,0,3059,481,1,0,0,0,3060,3061,5,241,0,0,3061,3062,5,289,0,
        0,3062,3063,3,786,393,0,3063,483,1,0,0,0,3064,3065,5,241,0,0,3065,
        3066,5,162,0,0,3066,3067,3,774,387,0,3067,3068,5,289,0,0,3068,3069,
        3,774,387,0,3069,485,1,0,0,0,3070,3071,5,45,0,0,3071,3072,3,520,
        260,0,3072,487,1,0,0,0,3073,3074,5,48,0,0,3074,3075,5,75,0,0,3075,
        3076,3,774,387,0,3076,3077,3,528,264,0,3077,489,1,0,0,0,3078,3079,
        5,114,0,0,3079,3080,5,75,0,0,3080,3081,3,774,387,0,3081,491,1,0,
        0,0,3082,3083,5,48,0,0,3083,3084,5,162,0,0,3084,3085,3,774,387,0,
        3085,3086,3,546,273,0,3086,493,1,0,0,0,3087,3088,3,778,389,0,3088,
        3090,3,204,102,0,3089,3091,3,496,248,0,3090,3089,1,0,0,0,3090,3091,
        1,0,0,0,3091,3092,1,0,0,0,3092,3093,3,498,249,0,3093,495,1,0,0,0,
        3094,3095,5,136,0,0,3095,3096,3,774,387,0,3096,497,1,0,0,0,3097,
        3099,5,198,0,0,3098,3097,1,0,0,0,3098,3099,1,0,0,0,3099,3100,1,0,
        0,0,3100,3102,5,200,0,0,3101,3098,1,0,0,0,3101,3102,1,0,0,0,3102,
        3105,1,0,0,0,3103,3104,5,100,0,0,3104,3106,3,14,7,0,3105,3103,1,
        0,0,0,3105,3106,1,0,0,0,3106,499,1,0,0,0,3107,3109,3,774,387,0,3108,
        3110,7,9,0,0,3109,3108,1,0,0,0,3109,3110,1,0,0,0,3110,501,1,0,0,
        0,3111,3112,5,229,0,0,3112,3113,5,178,0,0,3113,3114,5,26,0,0,3114,
        3119,3,774,387,0,3115,3116,5,25,0,0,3116,3118,3,774,387,0,3117,3115,
        1,0,0,0,3118,3121,1,0,0,0,3119,3117,1,0,0,0,3119,3120,1,0,0,0,3120,
        3122,1,0,0,0,3121,3119,1,0,0,0,3122,3123,5,27,0,0,3123,3151,1,0,
        0,0,3124,3125,5,217,0,0,3125,3126,5,70,0,0,3126,3127,5,26,0,0,3127,
        3132,3,774,387,0,3128,3129,5,25,0,0,3129,3131,3,774,387,0,3130,3128,
        1,0,0,0,3131,3134,1,0,0,0,3132,3130,1,0,0,0,3132,3133,1,0,0,0,3133,
        3135,1,0,0,0,3134,3132,1,0,0,0,3135,3136,5,27,0,0,3136,3151,1,0,
        0,0,3137,3138,5,212,0,0,3138,3139,5,70,0,0,3139,3140,5,26,0,0,3140,
        3145,3,500,250,0,3141,3142,5,25,0,0,3142,3144,3,500,250,0,3143,3141,
        1,0,0,0,3144,3147,1,0,0,0,3145,3143,1,0,0,0,3145,3146,1,0,0,0,3146,
        3148,1,0,0,0,3147,3145,1,0,0,0,3148,3149,5,27,0,0,3149,3151,1,0,
        0,0,3150,3111,1,0,0,0,3150,3124,1,0,0,0,3150,3137,1,0,0,0,3151,503,
        1,0,0,0,3152,3153,5,162,0,0,3153,3154,3,774,387,0,3154,3155,3,506,
        253,0,3155,3156,5,206,0,0,3156,3157,5,26,0,0,3157,3162,3,778,389,
        0,3158,3159,5,25,0,0,3159,3161,3,778,389,0,3160,3158,1,0,0,0,3161,
        3164,1,0,0,0,3162,3160,1,0,0,0,3162,3163,1,0,0,0,3163,3165,1,0,0,
        0,3164,3162,1,0,0,0,3165,3178,5,27,0,0,3166,3167,5,88,0,0,3167,3168,
        5,26,0,0,3168,3173,3,778,389,0,3169,3170,5,25,0,0,3170,3172,3,778,
        389,0,3171,3169,1,0,0,0,3172,3175,1,0,0,0,3173,3171,1,0,0,0,3173,
        3174,1,0,0,0,3174,3176,1,0,0,0,3175,3173,1,0,0,0,3176,3177,5,27,
        0,0,3177,3179,1,0,0,0,3178,3166,1,0,0,0,3178,3179,1,0,0,0,3179,3181,
        1,0,0,0,3180,3182,3,514,257,0,3181,3180,1,0,0,0,3181,3182,1,0,0,
        0,3182,505,1,0,0,0,3183,3186,3,508,254,0,3184,3186,3,510,255,0,3185,
        3183,1,0,0,0,3185,3184,1,0,0,0,3186,3189,1,0,0,0,3187,3188,5,306,
        0,0,3188,3190,3,512,256,0,3189,3187,1,0,0,0,3189,3190,1,0,0,0,3190,
        507,1,0,0,0,3191,3193,5,148,0,0,3192,3194,5,299,0,0,3193,3192,1,
        0,0,0,3193,3194,1,0,0,0,3194,3196,1,0,0,0,3195,3197,7,16,0,0,3196,
        3195,1,0,0,0,3196,3197,1,0,0,0,3197,509,1,0,0,0,3198,3199,5,185,
        0,0,3199,511,1,0,0,0,3200,3201,3,774,387,0,3201,513,1,0,0,0,3202,
        3203,5,315,0,0,3203,3204,5,26,0,0,3204,3209,3,516,258,0,3205,3206,
        5,25,0,0,3206,3208,3,516,258,0,3207,3205,1,0,0,0,3208,3211,1,0,0,
        0,3209,3207,1,0,0,0,3209,3210,1,0,0,0,3210,3213,1,0,0,0,3211,3209,
        1,0,0,0,3212,3214,5,25,0,0,3213,3212,1,0,0,0,3213,3214,1,0,0,0,3214,
        3215,1,0,0,0,3215,3216,5,27,0,0,3216,515,1,0,0,0,3217,3218,3,774,
        387,0,3218,3219,5,1,0,0,3219,3220,3,518,259,0,3220,517,1,0,0,0,3221,
        3226,3,802,401,0,3222,3226,5,319,0,0,3223,3226,3,838,419,0,3224,
        3226,3,834,417,0,3225,3221,1,0,0,0,3225,3222,1,0,0,0,3225,3223,1,
        0,0,0,3225,3224,1,0,0,0,3226,519,1,0,0,0,3227,3228,5,75,0,0,3228,
        3229,3,774,387,0,3229,3230,5,315,0,0,3230,3231,5,26,0,0,3231,3232,
        3,522,261,0,3232,3233,5,27,0,0,3233,521,1,0,0,0,3234,3239,3,524,
        262,0,3235,3236,5,25,0,0,3236,3238,3,524,262,0,3237,3235,1,0,0,0,
        3238,3241,1,0,0,0,3239,3237,1,0,0,0,3239,3240,1,0,0,0,3240,523,1,
        0,0,0,3241,3239,1,0,0,0,3242,3243,3,774,387,0,3243,3244,5,1,0,0,
        3244,3245,3,526,263,0,3245,525,1,0,0,0,3246,3247,3,14,7,0,3247,527,
        1,0,0,0,3248,3255,5,110,0,0,3249,3250,5,267,0,0,3250,3251,5,26,0,
        0,3251,3252,3,522,261,0,3252,3253,5,27,0,0,3253,3255,1,0,0,0,3254,
        3248,1,0,0,0,3254,3249,1,0,0,0,3255,529,1,0,0,0,3256,3257,3,774,
        387,0,3257,3258,5,1,0,0,3258,3259,3,532,266,0,3259,531,1,0,0,0,3260,
        3273,3,756,378,0,3261,3273,5,319,0,0,3262,3273,3,838,419,0,3263,
        3273,3,542,271,0,3264,3265,3,14,7,0,3265,3266,5,206,0,0,3266,3269,
        3,774,387,0,3267,3268,5,54,0,0,3268,3270,7,17,0,0,3269,3267,1,0,
        0,0,3269,3270,1,0,0,0,3270,3273,1,0,0,0,3271,3273,3,834,417,0,3272,
        3260,1,0,0,0,3272,3261,1,0,0,0,3272,3262,1,0,0,0,3272,3263,1,0,0,
        0,3272,3264,1,0,0,0,3272,3271,1,0,0,0,3273,533,1,0,0,0,3274,3275,
        5,136,0,0,3275,3276,3,774,387,0,3276,3277,3,536,268,0,3277,535,1,
        0,0,0,3278,3287,5,26,0,0,3279,3284,3,538,269,0,3280,3281,5,25,0,
        0,3281,3283,3,538,269,0,3282,3280,1,0,0,0,3283,3286,1,0,0,0,3284,
        3282,1,0,0,0,3284,3285,1,0,0,0,3285,3288,1,0,0,0,3286,3284,1,0,0,
        0,3287,3279,1,0,0,0,3287,3288,1,0,0,0,3288,3289,1,0,0,0,3289,3290,
        5,27,0,0,3290,537,1,0,0,0,3291,3292,3,774,387,0,3292,3293,5,1,0,
        0,3293,3294,3,540,270,0,3294,539,1,0,0,0,3295,3296,5,319,0,0,3296,
        541,1,0,0,0,3297,3298,5,26,0,0,3298,3303,3,544,272,0,3299,3300,5,
        25,0,0,3300,3302,3,544,272,0,3301,3299,1,0,0,0,3302,3305,1,0,0,0,
        3303,3301,1,0,0,0,3303,3304,1,0,0,0,3304,3306,1,0,0,0,3305,3303,
        1,0,0,0,3306,3307,5,27,0,0,3307,3310,1,0,0,0,3308,3310,3,544,272,
        0,3309,3297,1,0,0,0,3309,3308,1,0,0,0,3310,543,1,0,0,0,3311,3312,
        5,26,0,0,3312,3317,3,142,71,0,3313,3314,5,25,0,0,3314,3316,3,142,
        71,0,3315,3313,1,0,0,0,3316,3319,1,0,0,0,3317,3315,1,0,0,0,3317,
        3318,1,0,0,0,3318,3320,1,0,0,0,3319,3317,1,0,0,0,3320,3321,5,27,
        0,0,3321,545,1,0,0,0,3322,3326,3,472,236,0,3323,3326,3,474,237,0,
        3324,3326,3,476,238,0,3325,3322,1,0,0,0,3325,3323,1,0,0,0,3325,3324,
        1,0,0,0,3326,547,1,0,0,0,3327,3332,5,114,0,0,3328,3333,5,280,0,0,
        3329,3333,5,283,0,0,3330,3331,5,133,0,0,3331,3333,5,280,0,0,3332,
        3328,1,0,0,0,3332,3329,1,0,0,0,3332,3330,1,0,0,0,3333,3336,1,0,0,
        0,3334,3335,5,156,0,0,3335,3337,5,130,0,0,3336,3334,1,0,0,0,3336,
        3337,1,0,0,0,3337,3338,1,0,0,0,3338,3339,3,630,315,0,3339,549,1,
        0,0,0,3340,3341,5,89,0,0,3341,3342,5,305,0,0,3342,3344,3,560,280,
        0,3343,3345,3,562,281,0,3344,3343,1,0,0,0,3344,3345,1,0,0,0,3345,
        551,1,0,0,0,3346,3347,5,48,0,0,3347,3348,5,305,0,0,3348,3356,3,560,
        280,0,3349,3351,5,315,0,0,3350,3349,1,0,0,0,3350,3351,1,0,0,0,3351,
        3352,1,0,0,0,3352,3357,3,562,281,0,3353,3354,5,241,0,0,3354,3355,
        5,289,0,0,3355,3357,3,560,280,0,3356,3350,1,0,0,0,3356,3353,1,0,
        0,0,3357,553,1,0,0,0,3358,3359,5,89,0,0,3359,3360,5,150,0,0,3360,
        3374,3,560,280,0,3361,3362,5,315,0,0,3362,3363,5,305,0,0,3363,3368,
        3,560,280,0,3364,3365,5,25,0,0,3365,3367,3,560,280,0,3366,3364,1,
        0,0,0,3367,3370,1,0,0,0,3368,3366,1,0,0,0,3368,3369,1,0,0,0,3369,
        3372,1,0,0,0,3370,3368,1,0,0,0,3371,3373,5,25,0,0,3372,3371,1,0,
        0,0,3372,3373,1,0,0,0,3373,3375,1,0,0,0,3374,3361,1,0,0,0,3374,3375,
        1,0,0,0,3375,555,1,0,0,0,3376,3377,5,48,0,0,3377,3378,5,150,0,0,
        3378,3395,3,560,280,0,3379,3380,7,18,0,0,3380,3381,5,305,0,0,3381,
        3386,3,560,280,0,3382,3383,5,25,0,0,3383,3385,3,560,280,0,3384,3382,
        1,0,0,0,3385,3388,1,0,0,0,3386,3384,1,0,0,0,3386,3387,1,0,0,0,3387,
        3390,1,0,0,0,3388,3386,1,0,0,0,3389,3391,5,25,0,0,3390,3389,1,0,
        0,0,3390,3391,1,0,0,0,3391,3396,1,0,0,0,3392,3393,5,241,0,0,3393,
        3394,5,289,0,0,3394,3396,3,560,280,0,3395,3379,1,0,0,0,3395,3392,
        1,0,0,0,3396,557,1,0,0,0,3397,3398,5,114,0,0,3398,3401,7,19,0,0,
        3399,3400,5,156,0,0,3400,3402,5,130,0,0,3401,3399,1,0,0,0,3401,3402,
        1,0,0,0,3402,3403,1,0,0,0,3403,3408,3,560,280,0,3404,3405,5,25,0,
        0,3405,3407,3,560,280,0,3406,3404,1,0,0,0,3407,3410,1,0,0,0,3408,
        3406,1,0,0,0,3408,3409,1,0,0,0,3409,3412,1,0,0,0,3410,3408,1,0,0,
        0,3411,3413,5,25,0,0,3412,3411,1,0,0,0,3412,3413,1,0,0,0,3413,559,
        1,0,0,0,3414,3417,3,776,388,0,3415,3417,3,144,72,0,3416,3414,1,0,
        0,0,3416,3415,1,0,0,0,3417,561,1,0,0,0,3418,3420,5,119,0,0,3419,
        3418,1,0,0,0,3419,3420,1,0,0,0,3420,3421,1,0,0,0,3421,3422,5,219,
        0,0,3422,3423,3,14,7,0,3423,563,1,0,0,0,3424,3425,5,149,0,0,3425,
        3426,3,572,286,0,3426,3427,5,206,0,0,3427,3432,3,778,389,0,3428,
        3429,5,25,0,0,3429,3431,3,778,389,0,3430,3428,1,0,0,0,3431,3434,
        1,0,0,0,3432,3430,1,0,0,0,3432,3433,1,0,0,0,3433,3435,1,0,0,0,3434,
        3432,1,0,0,0,3435,3436,5,289,0,0,3436,3441,3,560,280,0,3437,3438,
        5,25,0,0,3438,3440,3,560,280,0,3439,3437,1,0,0,0,3440,3443,1,0,0,
        0,3441,3439,1,0,0,0,3441,3442,1,0,0,0,3442,3445,1,0,0,0,3443,3441,
        1,0,0,0,3444,3446,5,25,0,0,3445,3444,1,0,0,0,3445,3446,1,0,0,0,3446,
        3450,1,0,0,0,3447,3448,5,315,0,0,3448,3449,5,149,0,0,3449,3451,5,
        209,0,0,3450,3447,1,0,0,0,3450,3451,1,0,0,0,3451,565,1,0,0,0,3452,
        3456,5,253,0,0,3453,3454,5,149,0,0,3454,3455,5,209,0,0,3455,3457,
        5,142,0,0,3456,3453,1,0,0,0,3456,3457,1,0,0,0,3457,3458,1,0,0,0,
        3458,3459,3,572,286,0,3459,3460,5,206,0,0,3460,3465,3,778,389,0,
        3461,3462,5,25,0,0,3462,3464,3,778,389,0,3463,3461,1,0,0,0,3464,
        3467,1,0,0,0,3465,3463,1,0,0,0,3465,3466,1,0,0,0,3466,3468,1,0,0,
        0,3467,3465,1,0,0,0,3468,3469,5,144,0,0,3469,3474,3,560,280,0,3470,
        3471,5,25,0,0,3471,3473,3,560,280,0,3472,3470,1,0,0,0,3473,3476,
        1,0,0,0,3474,3472,1,0,0,0,3474,3475,1,0,0,0,3475,567,1,0,0,0,3476,
        3474,1,0,0,0,3477,3502,5,85,0,0,3478,3502,5,184,0,0,3479,3502,5,
        168,0,0,3480,3502,5,186,0,0,3481,3502,5,114,0,0,3482,3502,5,149,
        0,0,3483,3484,5,193,0,0,3484,3502,7,20,0,0,3485,3486,7,21,0,0,3486,
        3502,5,258,0,0,3487,3488,7,22,0,0,3488,3502,5,262,0,0,3489,3491,
        5,265,0,0,3490,3492,7,23,0,0,3491,3490,1,0,0,0,3491,3492,1,0,0,0,
        3492,3502,1,0,0,0,3493,3495,7,24,0,0,3494,3496,5,181,0,0,3495,3494,
        1,0,0,0,3495,3496,1,0,0,0,3496,3502,1,0,0,0,3497,3499,5,89,0,0,3498,
        3500,7,25,0,0,3499,3498,1,0,0,0,3499,3500,1,0,0,0,3500,3502,1,0,
        0,0,3501,3477,1,0,0,0,3501,3478,1,0,0,0,3501,3479,1,0,0,0,3501,3480,
        1,0,0,0,3501,3481,1,0,0,0,3501,3482,1,0,0,0,3501,3483,1,0,0,0,3501,
        3485,1,0,0,0,3501,3487,1,0,0,0,3501,3489,1,0,0,0,3501,3493,1,0,0,
        0,3501,3497,1,0,0,0,3502,569,1,0,0,0,3503,3506,3,568,284,0,3504,
        3506,5,319,0,0,3505,3503,1,0,0,0,3505,3504,1,0,0,0,3506,571,1,0,
        0,0,3507,3512,3,570,285,0,3508,3509,5,25,0,0,3509,3511,3,570,285,
        0,3510,3508,1,0,0,0,3511,3514,1,0,0,0,3512,3510,1,0,0,0,3512,3513,
        1,0,0,0,3513,3516,1,0,0,0,3514,3512,1,0,0,0,3515,3517,5,25,0,0,3516,
        3515,1,0,0,0,3516,3517,1,0,0,0,3517,3523,1,0,0,0,3518,3520,5,47,
        0,0,3519,3521,5,230,0,0,3520,3519,1,0,0,0,3520,3521,1,0,0,0,3521,
        3523,1,0,0,0,3522,3507,1,0,0,0,3522,3518,1,0,0,0,3523,573,1,0,0,
        0,3524,3525,5,89,0,0,3525,3526,5,246,0,0,3526,3527,5,225,0,0,3527,
        3528,3,626,313,0,3528,3529,3,440,220,0,3529,575,1,0,0,0,3530,3531,
        5,48,0,0,3531,3532,5,246,0,0,3532,3533,5,225,0,0,3533,3534,3,626,
        313,0,3534,3539,3,578,289,0,3535,3536,5,25,0,0,3536,3538,3,578,289,
        0,3537,3535,1,0,0,0,3538,3541,1,0,0,0,3539,3537,1,0,0,0,3539,3540,
        1,0,0,0,3540,577,1,0,0,0,3541,3539,1,0,0,0,3542,3545,3,474,237,0,
        3543,3545,3,476,238,0,3544,3542,1,0,0,0,3544,3543,1,0,0,0,3545,579,
        1,0,0,0,3546,3547,5,114,0,0,3547,3548,5,246,0,0,3548,3549,5,225,
        0,0,3549,3550,3,626,313,0,3550,581,1,0,0,0,3551,3552,5,89,0,0,3552,
        3553,5,246,0,0,3553,3554,5,225,0,0,3554,3555,5,77,0,0,3555,3556,
        3,626,313,0,3556,3557,3,440,220,0,3557,583,1,0,0,0,3558,3559,5,48,
        0,0,3559,3560,5,246,0,0,3560,3561,5,225,0,0,3561,3562,5,77,0,0,3562,
        3563,3,626,313,0,3563,3568,3,586,293,0,3564,3565,5,25,0,0,3565,3567,
        3,586,293,0,3566,3564,1,0,0,0,3567,3570,1,0,0,0,3568,3566,1,0,0,
        0,3568,3569,1,0,0,0,3569,585,1,0,0,0,3570,3568,1,0,0,0,3571,3574,
        3,474,237,0,3572,3574,3,476,238,0,3573,3571,1,0,0,0,3573,3572,1,
        0,0,0,3574,587,1,0,0,0,3575,3576,5,114,0,0,3576,3577,5,246,0,0,3577,
        3578,5,225,0,0,3578,3579,5,77,0,0,3579,3580,3,626,313,0,3580,589,
        1,0,0,0,3581,3582,5,89,0,0,3582,3583,5,58,0,0,3583,3584,5,244,0,
        0,3584,3585,3,626,313,0,3585,3586,5,142,0,0,3586,3591,3,592,296,
        0,3587,3588,5,25,0,0,3588,3590,3,592,296,0,3589,3587,1,0,0,0,3590,
        3593,1,0,0,0,3591,3589,1,0,0,0,3591,3592,1,0,0,0,3592,3594,1,0,0,
        0,3593,3591,1,0,0,0,3594,3595,5,315,0,0,3595,3596,5,26,0,0,3596,
        3597,3,594,297,0,3597,3598,5,27,0,0,3598,591,1,0,0,0,3599,3600,3,
        626,313,0,3600,3601,5,54,0,0,3601,3602,3,626,313,0,3602,593,1,0,
        0,0,3603,3608,3,596,298,0,3604,3605,5,25,0,0,3605,3607,3,596,298,
        0,3606,3604,1,0,0,0,3607,3610,1,0,0,0,3608,3606,1,0,0,0,3608,3609,
        1,0,0,0,3609,595,1,0,0,0,3610,3608,1,0,0,0,3611,3612,3,774,387,0,
        3612,3613,5,1,0,0,3613,3614,5,319,0,0,3614,597,1,0,0,0,3615,3616,
        5,48,0,0,3616,3617,5,58,0,0,3617,3618,5,244,0,0,3618,3619,3,626,
        313,0,3619,3624,3,600,300,0,3620,3621,5,25,0,0,3621,3623,3,600,300,
        0,3622,3620,1,0,0,0,3623,3626,1,0,0,0,3624,3622,1,0,0,0,3624,3625,
        1,0,0,0,3625,599,1,0,0,0,3626,3624,1,0,0,0,3627,3628,3,602,301,0,
        3628,601,1,0,0,0,3629,3630,5,267,0,0,3630,3631,5,26,0,0,3631,3632,
        3,594,297,0,3632,3633,5,27,0,0,3633,603,1,0,0,0,3634,3635,5,114,
        0,0,3635,3636,5,58,0,0,3636,3637,5,244,0,0,3637,3639,3,626,313,0,
        3638,3640,5,72,0,0,3639,3638,1,0,0,0,3639,3640,1,0,0,0,3640,605,
        1,0,0,0,3641,3646,3,146,73,0,3642,3643,5,25,0,0,3643,3645,3,146,
        73,0,3644,3642,1,0,0,0,3645,3648,1,0,0,0,3646,3644,1,0,0,0,3646,
        3647,1,0,0,0,3647,607,1,0,0,0,3648,3646,1,0,0,0,3649,3650,5,103,
        0,0,3650,3651,7,26,0,0,3651,3652,3,144,72,0,3652,3654,5,26,0,0,3653,
        3655,3,606,303,0,3654,3653,1,0,0,0,3654,3655,1,0,0,0,3655,3656,1,
        0,0,0,3656,3657,5,27,0,0,3657,3658,5,54,0,0,3658,3659,3,610,305,
        0,3659,3660,5,120,0,0,3660,3661,5,103,0,0,3661,609,1,0,0,0,3662,
        3664,5,23,0,0,3663,3662,1,0,0,0,3664,3667,1,0,0,0,3665,3663,1,0,
        0,0,3665,3666,1,0,0,0,3666,3686,1,0,0,0,3667,3665,1,0,0,0,3668,3677,
        3,12,6,0,3669,3671,5,23,0,0,3670,3669,1,0,0,0,3671,3672,1,0,0,0,
        3672,3670,1,0,0,0,3672,3673,1,0,0,0,3673,3674,1,0,0,0,3674,3676,
        3,12,6,0,3675,3670,1,0,0,0,3676,3679,1,0,0,0,3677,3675,1,0,0,0,3677,
        3678,1,0,0,0,3678,3683,1,0,0,0,3679,3677,1,0,0,0,3680,3682,5,23,
        0,0,3681,3680,1,0,0,0,3682,3685,1,0,0,0,3683,3681,1,0,0,0,3683,3684,
        1,0,0,0,3684,3687,1,0,0,0,3685,3683,1,0,0,0,3686,3668,1,0,0,0,3686,
        3687,1,0,0,0,3687,611,1,0,0,0,3688,3690,5,125,0,0,3689,3688,1,0,
        0,0,3689,3690,1,0,0,0,3690,3691,1,0,0,0,3691,3692,5,156,0,0,3692,
        3693,3,14,7,0,3693,3696,3,222,111,0,3694,3695,5,116,0,0,3695,3697,
        3,222,111,0,3696,3694,1,0,0,0,3696,3697,1,0,0,0,3697,613,1,0,0,0,
        3698,3700,5,125,0,0,3699,3698,1,0,0,0,3699,3700,1,0,0,0,3700,3702,
        1,0,0,0,3701,3703,5,216,0,0,3702,3701,1,0,0,0,3702,3703,1,0,0,0,
        3703,3704,1,0,0,0,3704,3705,5,142,0,0,3705,3706,3,144,72,0,3706,
        3707,5,161,0,0,3707,3708,3,14,7,0,3708,3711,3,222,111,0,3709,3710,
        5,116,0,0,3710,3712,3,222,111,0,3711,3709,1,0,0,0,3711,3712,1,0,
        0,0,3712,615,1,0,0,0,3713,3714,3,800,400,0,3714,3715,5,24,0,0,3715,
        3717,1,0,0,0,3716,3713,1,0,0,0,3716,3717,1,0,0,0,3717,3719,1,0,0,
        0,3718,3720,5,30,0,0,3719,3718,1,0,0,0,3719,3720,1,0,0,0,3720,3751,
        1,0,0,0,3721,3752,3,618,309,0,3722,3723,3,780,390,0,3723,3735,5,
        26,0,0,3724,3729,3,620,310,0,3725,3726,5,25,0,0,3726,3728,3,620,
        310,0,3727,3725,1,0,0,0,3728,3731,1,0,0,0,3729,3727,1,0,0,0,3729,
        3730,1,0,0,0,3730,3733,1,0,0,0,3731,3729,1,0,0,0,3732,3734,5,25,
        0,0,3733,3732,1,0,0,0,3733,3734,1,0,0,0,3734,3736,1,0,0,0,3735,3724,
        1,0,0,0,3735,3736,1,0,0,0,3736,3737,1,0,0,0,3737,3738,5,27,0,0,3738,
        3752,1,0,0,0,3739,3745,3,144,72,0,3740,3742,5,26,0,0,3741,3743,3,
        112,56,0,3742,3741,1,0,0,0,3742,3743,1,0,0,0,3743,3744,1,0,0,0,3744,
        3746,5,27,0,0,3745,3740,1,0,0,0,3745,3746,1,0,0,0,3746,3749,1,0,
        0,0,3747,3748,5,310,0,0,3748,3750,3,796,398,0,3749,3747,1,0,0,0,
        3749,3750,1,0,0,0,3750,3752,1,0,0,0,3751,3721,1,0,0,0,3751,3722,
        1,0,0,0,3751,3739,1,0,0,0,3752,3754,1,0,0,0,3753,3755,3,622,311,
        0,3754,3753,1,0,0,0,3754,3755,1,0,0,0,3755,617,1,0,0,0,3756,3759,
        3,808,404,0,3757,3758,5,310,0,0,3758,3760,3,796,398,0,3759,3757,
        1,0,0,0,3759,3760,1,0,0,0,3760,619,1,0,0,0,3761,3763,5,30,0,0,3762,
        3761,1,0,0,0,3762,3763,1,0,0,0,3763,3764,1,0,0,0,3764,3767,3,128,
        64,0,3765,3766,5,310,0,0,3766,3768,3,796,398,0,3767,3765,1,0,0,0,
        3767,3768,1,0,0,0,3768,621,1,0,0,0,3769,3782,5,315,0,0,3770,3783,
        3,624,312,0,3771,3772,5,26,0,0,3772,3777,3,624,312,0,3773,3774,5,
        25,0,0,3774,3776,3,624,312,0,3775,3773,1,0,0,0,3776,3779,1,0,0,0,
        3777,3775,1,0,0,0,3777,3778,1,0,0,0,3778,3780,1,0,0,0,3779,3777,
        1,0,0,0,3780,3781,5,27,0,0,3781,3783,1,0,0,0,3782,3770,1,0,0,0,3782,
        3771,1,0,0,0,3783,623,1,0,0,0,3784,3803,3,790,395,0,3785,3801,5,
        1,0,0,3786,3802,3,160,80,0,3787,3788,5,26,0,0,3788,3793,3,160,80,
        0,3789,3790,5,25,0,0,3790,3792,3,160,80,0,3791,3789,1,0,0,0,3792,
        3795,1,0,0,0,3793,3791,1,0,0,0,3793,3794,1,0,0,0,3794,3797,1,0,0,
        0,3795,3793,1,0,0,0,3796,3798,5,25,0,0,3797,3796,1,0,0,0,3797,3798,
        1,0,0,0,3798,3799,1,0,0,0,3799,3800,5,27,0,0,3800,3802,1,0,0,0,3801,
        3786,1,0,0,0,3801,3787,1,0,0,0,3802,3804,1,0,0,0,3803,3785,1,0,0,
        0,3803,3804,1,0,0,0,3804,3830,1,0,0,0,3805,3807,7,27,0,0,3806,3808,
        5,1,0,0,3807,3806,1,0,0,0,3807,3808,1,0,0,0,3808,3809,1,0,0,0,3809,
        3830,3,204,102,0,3810,3812,5,262,0,0,3811,3813,5,1,0,0,3812,3811,
        1,0,0,0,3812,3813,1,0,0,0,3813,3814,1,0,0,0,3814,3823,5,26,0,0,3815,
        3820,3,164,82,0,3816,3817,5,25,0,0,3817,3819,3,164,82,0,3818,3816,
        1,0,0,0,3819,3822,1,0,0,0,3820,3818,1,0,0,0,3820,3821,1,0,0,0,3821,
        3824,1,0,0,0,3822,3820,1,0,0,0,3823,3815,1,0,0,0,3823,3824,1,0,0,
        0,3824,3826,1,0,0,0,3825,3827,5,25,0,0,3826,3825,1,0,0,0,3826,3827,
        1,0,0,0,3827,3828,1,0,0,0,3828,3830,5,27,0,0,3829,3784,1,0,0,0,3829,
        3805,1,0,0,0,3829,3810,1,0,0,0,3830,625,1,0,0,0,3831,3832,3,800,
        400,0,3832,3833,5,24,0,0,3833,3835,1,0,0,0,3834,3831,1,0,0,0,3834,
        3835,1,0,0,0,3835,3836,1,0,0,0,3836,3837,3,806,403,0,3837,627,1,
        0,0,0,3838,3844,3,626,313,0,3839,3841,5,30,0,0,3840,3839,1,0,0,0,
        3840,3841,1,0,0,0,3841,3842,1,0,0,0,3842,3844,3,144,72,0,3843,3838,
        1,0,0,0,3843,3840,1,0,0,0,3844,629,1,0,0,0,3845,3847,3,628,314,0,
        3846,3848,3,622,311,0,3847,3846,1,0,0,0,3847,3848,1,0,0,0,3848,631,
        1,0,0,0,3849,3853,3,630,315,0,3850,3851,5,122,0,0,3851,3852,5,70,
        0,0,3852,3854,3,114,57,0,3853,3850,1,0,0,0,3853,3854,1,0,0,0,3854,
        633,1,0,0,0,3855,3856,5,104,0,0,3856,3857,5,144,0,0,3857,3862,3,
        630,315,0,3858,3859,5,313,0,0,3859,3863,3,14,7,0,3860,3861,5,206,
        0,0,3861,3863,3,366,183,0,3862,3858,1,0,0,0,3862,3860,1,0,0,0,3862,
        3863,1,0,0,0,3863,3865,1,0,0,0,3864,3866,3,362,181,0,3865,3864,1,
        0,0,0,3865,3866,1,0,0,0,3866,635,1,0,0,0,3867,3868,5,302,0,0,3868,
        3877,3,630,315,0,3869,3870,5,267,0,0,3870,3873,3,638,319,0,3871,
        3872,5,313,0,0,3872,3874,3,14,7,0,3873,3871,1,0,0,0,3873,3874,1,
        0,0,0,3874,3878,1,0,0,0,3875,3876,5,206,0,0,3876,3878,3,366,183,
        0,3877,3869,1,0,0,0,3877,3875,1,0,0,0,3878,3880,1,0,0,0,3879,3881,
        3,362,181,0,3880,3879,1,0,0,0,3880,3881,1,0,0,0,3881,637,1,0,0,0,
        3882,3885,3,640,320,0,3883,3885,3,646,323,0,3884,3882,1,0,0,0,3884,
        3883,1,0,0,0,3885,639,1,0,0,0,3886,3891,3,642,321,0,3887,3888,5,
        25,0,0,3888,3890,3,642,321,0,3889,3887,1,0,0,0,3890,3893,1,0,0,0,
        3891,3889,1,0,0,0,3891,3892,1,0,0,0,3892,641,1,0,0,0,3893,3891,1,
        0,0,0,3894,3895,3,644,322,0,3895,3896,5,1,0,0,3896,3897,3,14,7,0,
        3897,643,1,0,0,0,3898,3899,3,120,60,0,3899,645,1,0,0,0,3900,3901,
        3,648,324,0,3901,3902,5,1,0,0,3902,3903,5,26,0,0,3903,3904,3,376,
        188,0,3904,3905,5,27,0,0,3905,647,1,0,0,0,3906,3907,5,26,0,0,3907,
        3912,3,644,322,0,3908,3909,5,25,0,0,3909,3911,3,644,322,0,3910,3908,
        1,0,0,0,3911,3914,1,0,0,0,3912,3910,1,0,0,0,3912,3913,1,0,0,0,3913,
        3915,1,0,0,0,3914,3912,1,0,0,0,3915,3916,5,27,0,0,3916,649,1,0,0,
        0,3917,3918,5,89,0,0,3918,3922,5,290,0,0,3919,3920,5,156,0,0,3920,
        3921,5,198,0,0,3921,3923,5,130,0,0,3922,3919,1,0,0,0,3922,3923,1,
        0,0,0,3923,3924,1,0,0,0,3924,3926,3,696,348,0,3925,3927,3,652,326,
        0,3926,3925,1,0,0,0,3926,3927,1,0,0,0,3927,3929,1,0,0,0,3928,3930,
        3,656,328,0,3929,3928,1,0,0,0,3929,3930,1,0,0,0,3930,651,1,0,0,0,
        3931,3932,5,26,0,0,3932,3937,3,654,327,0,3933,3934,5,25,0,0,3934,
        3936,3,654,327,0,3935,3933,1,0,0,0,3936,3939,1,0,0,0,3937,3935,1,
        0,0,0,3937,3938,1,0,0,0,3938,3940,1,0,0,0,3939,3937,1,0,0,0,3940,
        3941,5,27,0,0,3941,653,1,0,0,0,3942,3943,3,664,332,0,3943,655,1,
        0,0,0,3944,3945,5,315,0,0,3945,3946,5,26,0,0,3946,3947,3,682,341,
        0,3947,3948,5,27,0,0,3948,657,1,0,0,0,3949,3950,5,48,0,0,3950,3953,
        5,290,0,0,3951,3952,5,156,0,0,3952,3954,5,130,0,0,3953,3951,1,0,
        0,0,3953,3954,1,0,0,0,3954,3955,1,0,0,0,3955,3956,3,696,348,0,3956,
        3961,3,660,330,0,3957,3958,5,25,0,0,3958,3960,3,660,330,0,3959,3957,
        1,0,0,0,3960,3963,1,0,0,0,3961,3959,1,0,0,0,3961,3962,1,0,0,0,3962,
        659,1,0,0,0,3963,3961,1,0,0,0,3964,3970,3,662,331,0,3965,3970,3,
        666,333,0,3966,3970,3,670,335,0,3967,3970,3,676,338,0,3968,3970,
        3,678,339,0,3969,3964,1,0,0,0,3969,3965,1,0,0,0,3969,3966,1,0,0,
        0,3969,3967,1,0,0,0,3969,3968,1,0,0,0,3970,661,1,0,0,0,3971,3972,
        5,45,0,0,3972,3973,3,664,332,0,3973,663,1,0,0,0,3974,3975,5,87,0,
        0,3975,3977,3,774,387,0,3976,3978,3,688,344,0,3977,3976,1,0,0,0,
        3977,3978,1,0,0,0,3978,665,1,0,0,0,3979,3980,5,48,0,0,3980,3981,
        5,87,0,0,3981,3982,3,698,349,0,3982,3983,3,668,334,0,3983,667,1,
        0,0,0,3984,3987,3,672,336,0,3985,3987,3,674,337,0,3986,3984,1,0,
        0,0,3986,3985,1,0,0,0,3987,669,1,0,0,0,3988,3989,5,114,0,0,3989,
        3990,5,87,0,0,3990,3991,3,698,349,0,3991,671,1,0,0,0,3992,3993,5,
        267,0,0,3993,3994,5,26,0,0,3994,3995,3,690,345,0,3995,3996,5,27,
        0,0,3996,673,1,0,0,0,3997,3998,5,245,0,0,3998,3999,5,26,0,0,3999,
        4004,3,774,387,0,4000,4001,5,25,0,0,4001,4003,3,774,387,0,4002,4000,
        1,0,0,0,4003,4006,1,0,0,0,4004,4002,1,0,0,0,4004,4005,1,0,0,0,4005,
        4007,1,0,0,0,4006,4004,1,0,0,0,4007,4008,5,27,0,0,4008,675,1,0,0,
        0,4009,4010,5,267,0,0,4010,4011,5,26,0,0,4011,4012,3,682,341,0,4012,
        4013,5,27,0,0,4013,677,1,0,0,0,4014,4015,5,245,0,0,4015,4016,5,26,
        0,0,4016,4021,3,774,387,0,4017,4018,5,25,0,0,4018,4020,3,792,396,
        0,4019,4017,1,0,0,0,4020,4023,1,0,0,0,4021,4019,1,0,0,0,4021,4022,
        1,0,0,0,4022,4024,1,0,0,0,4023,4021,1,0,0,0,4024,4025,5,27,0,0,4025,
        679,1,0,0,0,4026,4027,5,114,0,0,4027,4030,5,290,0,0,4028,4029,5,
        156,0,0,4029,4031,5,130,0,0,4030,4028,1,0,0,0,4030,4031,1,0,0,0,
        4031,4032,1,0,0,0,4032,4033,3,696,348,0,4033,681,1,0,0,0,4034,4039,
        3,684,342,0,4035,4036,5,25,0,0,4036,4038,3,684,342,0,4037,4035,1,
        0,0,0,4038,4041,1,0,0,0,4039,4037,1,0,0,0,4039,4040,1,0,0,0,4040,
        683,1,0,0,0,4041,4039,1,0,0,0,4042,4043,3,774,387,0,4043,4044,5,
        1,0,0,4044,4045,3,686,343,0,4045,685,1,0,0,0,4046,4047,3,14,7,0,
        4047,687,1,0,0,0,4048,4049,5,315,0,0,4049,4050,5,26,0,0,4050,4051,
        3,690,345,0,4051,4052,5,27,0,0,4052,689,1,0,0,0,4053,4058,3,692,
        346,0,4054,4055,5,25,0,0,4055,4057,3,692,346,0,4056,4054,1,0,0,0,
        4057,4060,1,0,0,0,4058,4056,1,0,0,0,4058,4059,1,0,0,0,4059,691,1,
        0,0,0,4060,4058,1,0,0,0,4061,4062,3,774,387,0,4062,4063,5,1,0,0,
        4063,4064,3,694,347,0,4064,693,1,0,0,0,4065,4066,3,14,7,0,4066,695,
        1,0,0,0,4067,4068,3,800,400,0,4068,4069,5,24,0,0,4069,4071,1,0,0,
        0,4070,4067,1,0,0,0,4070,4071,1,0,0,0,4071,4072,1,0,0,0,4072,4073,
        3,774,387,0,4073,697,1,0,0,0,4074,4075,3,792,396,0,4075,699,1,0,
        0,0,4076,4077,5,247,0,0,4077,4081,5,201,0,0,4078,4079,5,157,0,0,
        4079,4081,5,201,0,0,4080,4076,1,0,0,0,4080,4078,1,0,0,0,4081,701,
        1,0,0,0,4082,4083,5,137,0,0,4083,4084,5,26,0,0,4084,4085,5,313,0,
        0,4085,4086,3,14,7,0,4086,4087,5,27,0,0,4087,703,1,0,0,0,4088,4091,
        3,706,353,0,4089,4091,3,716,358,0,4090,4088,1,0,0,0,4090,4089,1,
        0,0,0,4091,705,1,0,0,0,4092,4093,3,784,392,0,4093,707,1,0,0,0,4094,
        4095,5,314,0,0,4095,4096,3,710,355,0,4096,709,1,0,0,0,4097,4102,
        3,712,356,0,4098,4099,5,25,0,0,4099,4101,3,712,356,0,4100,4098,1,
        0,0,0,4101,4104,1,0,0,0,4102,4100,1,0,0,0,4102,4103,1,0,0,0,4103,
        711,1,0,0,0,4104,4102,1,0,0,0,4105,4106,3,714,357,0,4106,4107,5,
        54,0,0,4107,4108,3,716,358,0,4108,713,1,0,0,0,4109,4110,3,706,353,
        0,4110,715,1,0,0,0,4111,4112,5,26,0,0,4112,4113,3,718,359,0,4113,
        4114,5,27,0,0,4114,717,1,0,0,0,4115,4117,3,720,360,0,4116,4115,1,
        0,0,0,4116,4117,1,0,0,0,4117,4119,1,0,0,0,4118,4120,3,722,361,0,
        4119,4118,1,0,0,0,4119,4120,1,0,0,0,4120,4122,1,0,0,0,4121,4123,
        3,724,362,0,4122,4121,1,0,0,0,4122,4123,1,0,0,0,4123,4125,1,0,0,
        0,4124,4126,3,726,363,0,4125,4124,1,0,0,0,4125,4126,1,0,0,0,4126,
        719,1,0,0,0,4127,4128,3,706,353,0,4128,721,1,0,0,0,4129,4131,5,217,
        0,0,4130,4132,5,82,0,0,4131,4130,1,0,0,0,4131,4132,1,0,0,0,4132,
        4133,1,0,0,0,4133,4134,5,70,0,0,4134,4135,3,130,65,0,4135,723,1,
        0,0,0,4136,4137,3,314,157,0,4137,725,1,0,0,0,4138,4139,3,728,364,
        0,4139,4141,3,730,365,0,4140,4142,3,736,368,0,4141,4140,1,0,0,0,
        4141,4142,1,0,0,0,4142,727,1,0,0,0,4143,4144,7,28,0,0,4144,729,1,
        0,0,0,4145,4148,3,734,367,0,4146,4148,3,732,366,0,4147,4145,1,0,
        0,0,4147,4146,1,0,0,0,4148,731,1,0,0,0,4149,4150,5,68,0,0,4150,4151,
        3,734,367,0,4151,4152,5,50,0,0,4152,4153,3,734,367,0,4153,733,1,
        0,0,0,4154,4155,5,92,0,0,4155,4162,5,258,0,0,4156,4159,3,14,7,0,
        4157,4159,5,296,0,0,4158,4156,1,0,0,0,4158,4157,1,0,0,0,4159,4160,
        1,0,0,0,4160,4162,7,29,0,0,4161,4154,1,0,0,0,4161,4158,1,0,0,0,4162,
        735,1,0,0,0,4163,4164,5,127,0,0,4164,4165,5,92,0,0,4165,4174,5,258,
        0,0,4166,4167,5,127,0,0,4167,4174,5,150,0,0,4168,4169,5,127,0,0,
        4169,4174,5,288,0,0,4170,4171,5,127,0,0,4171,4172,5,197,0,0,4172,
        4174,5,213,0,0,4173,4163,1,0,0,0,4173,4166,1,0,0,0,4173,4168,1,0,
        0,0,4173,4170,1,0,0,0,4174,737,1,0,0,0,4175,4176,5,304,0,0,4176,
        4177,3,800,400,0,4177,739,1,0,0,0,4178,4179,5,26,0,0,4179,4180,3,
        232,116,0,4180,4181,5,27,0,0,4181,4184,1,0,0,0,4182,4184,3,234,117,
        0,4183,4178,1,0,0,0,4183,4182,1,0,0,0,4184,741,1,0,0,0,4185,4186,
        3,148,74,0,4186,4189,5,1,0,0,4187,4190,3,14,7,0,4188,4190,3,740,
        370,0,4189,4187,1,0,0,0,4189,4188,1,0,0,0,4190,743,1,0,0,0,4191,
        4192,5,81,0,0,4192,745,1,0,0,0,4193,4194,5,256,0,0,4194,747,1,0,
        0,0,4195,4200,3,630,315,0,4196,4197,5,26,0,0,4197,4198,3,124,62,
        0,4198,4199,5,27,0,0,4199,4201,1,0,0,0,4200,4196,1,0,0,0,4200,4201,
        1,0,0,0,4201,749,1,0,0,0,4202,4207,3,748,374,0,4203,4204,5,25,0,
        0,4204,4206,3,748,374,0,4205,4203,1,0,0,0,4206,4209,1,0,0,0,4207,
        4205,1,0,0,0,4207,4208,1,0,0,0,4208,4211,1,0,0,0,4209,4207,1,0,0,
        0,4210,4212,5,25,0,0,4211,4210,1,0,0,0,4211,4212,1,0,0,0,4212,751,
        1,0,0,0,4213,4214,5,49,0,0,4214,4215,3,750,375,0,4215,753,1,0,0,
        0,4216,4217,7,30,0,0,4217,755,1,0,0,0,4218,4221,3,754,377,0,4219,
        4221,3,812,406,0,4220,4218,1,0,0,0,4220,4219,1,0,0,0,4221,757,1,
        0,0,0,4222,4230,3,754,377,0,4223,4230,3,830,415,0,4224,4230,3,814,
        407,0,4225,4230,3,818,409,0,4226,4230,3,822,411,0,4227,4230,3,824,
        412,0,4228,4230,3,826,413,0,4229,4222,1,0,0,0,4229,4223,1,0,0,0,
        4229,4224,1,0,0,0,4229,4225,1,0,0,0,4229,4226,1,0,0,0,4229,4227,
        1,0,0,0,4229,4228,1,0,0,0,4230,759,1,0,0,0,4231,4238,3,754,377,0,
        4232,4238,3,830,415,0,4233,4238,3,820,410,0,4234,4238,3,822,411,
        0,4235,4238,3,824,412,0,4236,4238,3,826,413,0,4237,4231,1,0,0,0,
        4237,4232,1,0,0,0,4237,4233,1,0,0,0,4237,4234,1,0,0,0,4237,4235,
        1,0,0,0,4237,4236,1,0,0,0,4238,761,1,0,0,0,4239,4245,3,754,377,0,
        4240,4245,3,830,415,0,4241,4245,3,820,410,0,4242,4245,3,824,412,
        0,4243,4245,3,826,413,0,4244,4239,1,0,0,0,4244,4240,1,0,0,0,4244,
        4241,1,0,0,0,4244,4242,1,0,0,0,4244,4243,1,0,0,0,4245,763,1,0,0,
        0,4246,4255,3,754,377,0,4247,4255,3,830,415,0,4248,4255,3,814,407,
        0,4249,4255,3,816,408,0,4250,4255,3,818,409,0,4251,4255,3,820,410,
        0,4252,4255,3,822,411,0,4253,4255,3,826,413,0,4254,4246,1,0,0,0,
        4254,4247,1,0,0,0,4254,4248,1,0,0,0,4254,4249,1,0,0,0,4254,4250,
        1,0,0,0,4254,4251,1,0,0,0,4254,4252,1,0,0,0,4254,4253,1,0,0,0,4255,
        765,1,0,0,0,4256,4264,3,754,377,0,4257,4264,3,830,415,0,4258,4264,
        3,814,407,0,4259,4264,3,818,409,0,4260,4264,3,822,411,0,4261,4264,
        3,824,412,0,4262,4264,3,826,413,0,4263,4256,1,0,0,0,4263,4257,1,
        0,0,0,4263,4258,1,0,0,0,4263,4259,1,0,0,0,4263,4260,1,0,0,0,4263,
        4261,1,0,0,0,4263,4262,1,0,0,0,4264,767,1,0,0,0,4265,4273,3,754,
        377,0,4266,4273,3,830,415,0,4267,4273,3,816,408,0,4268,4273,3,820,
        410,0,4269,4273,3,822,411,0,4270,4273,3,824,412,0,4271,4273,3,826,
        413,0,4272,4265,1,0,0,0,4272,4266,1,0,0,0,4272,4267,1,0,0,0,4272,
        4268,1,0,0,0,4272,4269,1,0,0,0,4272,4270,1,0,0,0,4272,4271,1,0,0,
        0,4273,769,1,0,0,0,4274,4283,3,754,377,0,4275,4283,3,830,415,0,4276,
        4283,3,814,407,0,4277,4283,3,816,408,0,4278,4283,3,818,409,0,4279,
        4283,3,820,410,0,4280,4283,3,822,411,0,4281,4283,3,824,412,0,4282,
        4274,1,0,0,0,4282,4275,1,0,0,0,4282,4276,1,0,0,0,4282,4277,1,0,0,
        0,4282,4278,1,0,0,0,4282,4279,1,0,0,0,4282,4280,1,0,0,0,4282,4281,
        1,0,0,0,4283,771,1,0,0,0,4284,4287,3,754,377,0,4285,4287,3,828,414,
        0,4286,4284,1,0,0,0,4286,4285,1,0,0,0,4287,773,1,0,0,0,4288,4291,
        3,756,378,0,4289,4291,5,319,0,0,4290,4288,1,0,0,0,4290,4289,1,0,
        0,0,4291,775,1,0,0,0,4292,4295,3,802,401,0,4293,4295,5,319,0,0,4294,
        4292,1,0,0,0,4294,4293,1,0,0,0,4295,777,1,0,0,0,4296,4299,3,758,
        379,0,4297,4299,5,319,0,0,4298,4296,1,0,0,0,4298,4297,1,0,0,0,4299,
        779,1,0,0,0,4300,4303,3,760,380,0,4301,4303,5,319,0,0,4302,4300,
        1,0,0,0,4302,4301,1,0,0,0,4303,781,1,0,0,0,4304,4307,3,762,381,0,
        4305,4307,5,319,0,0,4306,4304,1,0,0,0,4306,4305,1,0,0,0,4307,783,
        1,0,0,0,4308,4311,3,764,382,0,4309,4311,5,319,0,0,4310,4308,1,0,
        0,0,4310,4309,1,0,0,0,4311,785,1,0,0,0,4312,4315,3,766,383,0,4313,
        4315,5,319,0,0,4314,4312,1,0,0,0,4314,4313,1,0,0,0,4315,787,1,0,
        0,0,4316,4319,3,768,384,0,4317,4319,5,319,0,0,4318,4316,1,0,0,0,
        4318,4317,1,0,0,0,4319,789,1,0,0,0,4320,4323,3,770,385,0,4321,4323,
        5,319,0,0,4322,4320,1,0,0,0,4322,4321,1,0,0,0,4323,791,1,0,0,0,4324,
        4327,3,754,377,0,4325,4327,5,319,0,0,4326,4324,1,0,0,0,4326,4325,
        1,0,0,0,4327,793,1,0,0,0,4328,4331,3,772,386,0,4329,4331,5,319,0,
        0,4330,4328,1,0,0,0,4330,4329,1,0,0,0,4331,795,1,0,0,0,4332,4336,
        3,774,387,0,4333,4334,5,229,0,0,4334,4336,5,178,0,0,4335,4332,1,
        0,0,0,4335,4333,1,0,0,0,4336,797,1,0,0,0,4337,4338,3,774,387,0,4338,
        4339,5,24,0,0,4339,4341,1,0,0,0,4340,4337,1,0,0,0,4340,4341,1,0,
        0,0,4341,799,1,0,0,0,4342,4343,3,774,387,0,4343,4344,5,29,0,0,4344,
        4346,1,0,0,0,4345,4342,1,0,0,0,4345,4346,1,0,0,0,4346,4349,1,0,0,
        0,4347,4350,3,116,58,0,4348,4350,5,19,0,0,4349,4347,1,0,0,0,4349,
        4348,1,0,0,0,4350,801,1,0,0,0,4351,4354,3,756,378,0,4352,4354,3,
        832,416,0,4353,4351,1,0,0,0,4353,4352,1,0,0,0,4354,803,1,0,0,0,4355,
        4356,3,776,388,0,4356,4357,5,24,0,0,4357,4359,1,0,0,0,4358,4355,
        1,0,0,0,4358,4359,1,0,0,0,4359,805,1,0,0,0,4360,4362,5,30,0,0,4361,
        4360,1,0,0,0,4361,4362,1,0,0,0,4362,4363,1,0,0,0,4363,4364,3,776,
        388,0,4364,807,1,0,0,0,4365,4368,3,786,393,0,4366,4368,3,832,416,
        0,4367,4365,1,0,0,0,4367,4366,1,0,0,0,4368,809,1,0,0,0,4369,4371,
        5,30,0,0,4370,4369,1,0,0,0,4370,4371,1,0,0,0,4371,4372,1,0,0,0,4372,
        4373,3,808,404,0,4373,811,1,0,0,0,4374,4383,3,830,415,0,4375,4383,
        3,814,407,0,4376,4383,3,816,408,0,4377,4383,3,818,409,0,4378,4383,
        3,820,410,0,4379,4383,3,822,411,0,4380,4383,3,824,412,0,4381,4383,
        3,826,413,0,4382,4374,1,0,0,0,4382,4375,1,0,0,0,4382,4376,1,0,0,
        0,4382,4377,1,0,0,0,4382,4378,1,0,0,0,4382,4379,1,0,0,0,4382,4380,
        1,0,0,0,4382,4381,1,0,0,0,4383,813,1,0,0,0,4384,4385,7,31,0,0,4385,
        815,1,0,0,0,4386,4387,7,32,0,0,4387,817,1,0,0,0,4388,4389,7,33,0,
        0,4389,819,1,0,0,0,4390,4391,5,79,0,0,4391,821,1,0,0,0,4392,4393,
        5,82,0,0,4393,823,1,0,0,0,4394,4395,7,28,0,0,4395,825,1,0,0,0,4396,
        4397,7,27,0,0,4397,827,1,0,0,0,4398,4399,7,34,0,0,4399,829,1,0,0,
        0,4400,4401,7,35,0,0,4401,831,1,0,0,0,4402,4403,7,36,0,0,4403,833,
        1,0,0,0,4404,4405,7,37,0,0,4405,835,1,0,0,0,4406,4407,5,324,0,0,
        4407,837,1,0,0,0,4408,4409,7,38,0,0,4409,839,1,0,0,0,482,845,850,
        857,862,868,876,884,891,895,903,908,917,919,977,984,988,995,1003,
        1008,1012,1018,1024,1027,1031,1039,1043,1046,1050,1061,1066,1068,
        1077,1098,1103,1112,1114,1121,1129,1137,1144,1154,1156,1160,1165,
        1169,1175,1181,1185,1189,1192,1199,1205,1209,1214,1217,1231,1236,
        1239,1253,1260,1271,1282,1302,1308,1313,1317,1331,1333,1340,1346,
        1357,1365,1371,1378,1386,1399,1405,1409,1412,1414,1422,1430,1436,
        1442,1448,1451,1460,1469,1476,1484,1497,1504,1508,1515,1519,1524,
        1531,1538,1541,1548,1552,1562,1585,1591,1595,1602,1608,1615,1619,
        1623,1629,1634,1643,1646,1652,1657,1665,1672,1694,1698,1700,1704,
        1713,1717,1719,1723,1732,1736,1774,1778,1798,1801,1807,1827,1832,
        1838,1843,1846,1850,1877,1885,1888,1895,1908,1912,1924,1937,1942,
        1949,1953,1960,1969,1978,1986,1990,1994,2001,2003,2006,2011,2016,
        2020,2027,2034,2038,2042,2046,2050,2052,2063,2072,2077,2083,2088,
        2092,2096,2100,2103,2107,2111,2119,2123,2127,2131,2135,2138,2142,
        2145,2148,2153,2156,2159,2162,2176,2178,2189,2199,2209,2212,2219,
        2243,2254,2260,2264,2268,2272,2276,2280,2284,2288,2294,2301,2311,
        2322,2335,2351,2361,2381,2387,2394,2401,2409,2418,2455,2457,2460,
        2465,2469,2473,2479,2485,2489,2494,2499,2501,2505,2510,2513,2515,
        2519,2530,2541,2552,2556,2560,2564,2567,2571,2574,2580,2589,2592,
        2606,2612,2615,2620,2627,2634,2643,2648,2656,2671,2677,2685,2708,
        2715,2723,2744,2752,2760,2770,2779,2784,2791,2801,2806,2815,2819,
        2823,2826,2829,2832,2835,2843,2864,2869,2880,2894,2911,2934,2954,
        2965,2973,2983,2988,2992,2998,3036,3048,3090,3098,3101,3105,3109,
        3119,3132,3145,3150,3162,3173,3178,3181,3185,3189,3193,3196,3209,
        3213,3225,3239,3254,3269,3272,3284,3287,3303,3309,3317,3325,3332,
        3336,3344,3350,3356,3368,3372,3374,3386,3390,3395,3401,3408,3412,
        3416,3419,3432,3441,3445,3450,3456,3465,3474,3491,3495,3499,3501,
        3505,3512,3516,3520,3522,3539,3544,3568,3573,3591,3608,3624,3639,
        3646,3654,3665,3672,3677,3683,3686,3689,3696,3699,3702,3711,3716,
        3719,3729,3733,3735,3742,3745,3749,3751,3754,3759,3762,3767,3777,
        3782,3793,3797,3801,3803,3807,3812,3820,3823,3826,3829,3834,3840,
        3843,3847,3853,3862,3865,3873,3877,3880,3884,3891,3912,3922,3926,
        3929,3937,3953,3961,3969,3977,3986,4004,4021,4030,4039,4058,4070,
        4080,4090,4102,4116,4119,4122,4125,4131,4141,4147,4158,4161,4173,
        4183,4189,4200,4207,4211,4220,4229,4237,4244,4254,4263,4272,4282,
        4286,4290,4294,4298,4302,4306,4310,4314,4318,4322,4326,4330,4335,
        4340,4345,4349,4353,4358,4361,4367,4370,4382
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!YQLParser.__ATN) {
            YQLParser.__ATN = new antlr.ATNDeserializer().deserialize(YQLParser._serializedATN);
        }

        return YQLParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(YQLParser.literalNames, YQLParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return YQLParser.vocabulary;
    }

    private static readonly decisionsToDFA = YQLParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class Sql_queryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt_list(): Sql_stmt_listContext | null {
        return this.getRuleContext(0, Sql_stmt_listContext);
    }
    public PRAGMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRAGMA, 0);
    }
    public ANSI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANSI, 0);
    }
    public DIGITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIGITS, 0);
    }
    public ansi_sql_stmt_list(): Ansi_sql_stmt_listContext | null {
        return this.getRuleContext(0, Ansi_sql_stmt_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_query;
    }
}


export class Sql_stmt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt(): Sql_stmtContext[];
    public sql_stmt(i: number): Sql_stmtContext | null;
    public sql_stmt(i?: number): Sql_stmtContext[] | Sql_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sql_stmtContext);
        }

        return this.getRuleContext(i, Sql_stmtContext);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(YQLParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt_list;
    }
}


export class Ansi_sql_stmt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(YQLParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_ansi_sql_stmt_list;
    }
}


export class Lambda_bodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RETURN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public lambda_stmt(): Lambda_stmtContext[];
    public lambda_stmt(i: number): Lambda_stmtContext | null;
    public lambda_stmt(i?: number): Lambda_stmtContext[] | Lambda_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Lambda_stmtContext);
        }

        return this.getRuleContext(i, Lambda_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_lambda_body;
    }
}


export class Lambda_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_nodes_stmt(): Named_nodes_stmtContext | null {
        return this.getRuleContext(0, Named_nodes_stmtContext);
    }
    public import_stmt(): Import_stmtContext | null {
        return this.getRuleContext(0, Import_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_lambda_stmt;
    }
}


export class Sql_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sql_stmt_core(): Sql_stmt_coreContext {
        return this.getRuleContext(0, Sql_stmt_coreContext)!;
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPLAIN, 0);
    }
    public TQ(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TQ, 0);
    }
    public TU(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TU, 0);
    }
    public TE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TE, 0);
    }
    public TR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TR, 0);
    }
    public TY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TY, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLAN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt;
    }
}


export class Sql_stmt_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pragma_stmt(): Pragma_stmtContext | null {
        return this.getRuleContext(0, Pragma_stmtContext);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public named_nodes_stmt(): Named_nodes_stmtContext | null {
        return this.getRuleContext(0, Named_nodes_stmtContext);
    }
    public create_table_stmt(): Create_table_stmtContext | null {
        return this.getRuleContext(0, Create_table_stmtContext);
    }
    public drop_table_stmt(): Drop_table_stmtContext | null {
        return this.getRuleContext(0, Drop_table_stmtContext);
    }
    public use_stmt(): Use_stmtContext | null {
        return this.getRuleContext(0, Use_stmtContext);
    }
    public into_table_stmt(): Into_table_stmtContext | null {
        return this.getRuleContext(0, Into_table_stmtContext);
    }
    public commit_stmt(): Commit_stmtContext | null {
        return this.getRuleContext(0, Commit_stmtContext);
    }
    public update_stmt(): Update_stmtContext | null {
        return this.getRuleContext(0, Update_stmtContext);
    }
    public delete_stmt(): Delete_stmtContext | null {
        return this.getRuleContext(0, Delete_stmtContext);
    }
    public rollback_stmt(): Rollback_stmtContext | null {
        return this.getRuleContext(0, Rollback_stmtContext);
    }
    public declare_stmt(): Declare_stmtContext | null {
        return this.getRuleContext(0, Declare_stmtContext);
    }
    public import_stmt(): Import_stmtContext | null {
        return this.getRuleContext(0, Import_stmtContext);
    }
    public export_stmt(): Export_stmtContext | null {
        return this.getRuleContext(0, Export_stmtContext);
    }
    public alter_table_stmt(): Alter_table_stmtContext | null {
        return this.getRuleContext(0, Alter_table_stmtContext);
    }
    public alter_external_table_stmt(): Alter_external_table_stmtContext | null {
        return this.getRuleContext(0, Alter_external_table_stmtContext);
    }
    public do_stmt(): Do_stmtContext | null {
        return this.getRuleContext(0, Do_stmtContext);
    }
    public define_action_or_subquery_stmt(): Define_action_or_subquery_stmtContext | null {
        return this.getRuleContext(0, Define_action_or_subquery_stmtContext);
    }
    public if_stmt(): If_stmtContext | null {
        return this.getRuleContext(0, If_stmtContext);
    }
    public for_stmt(): For_stmtContext | null {
        return this.getRuleContext(0, For_stmtContext);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public create_user_stmt(): Create_user_stmtContext | null {
        return this.getRuleContext(0, Create_user_stmtContext);
    }
    public alter_user_stmt(): Alter_user_stmtContext | null {
        return this.getRuleContext(0, Alter_user_stmtContext);
    }
    public create_group_stmt(): Create_group_stmtContext | null {
        return this.getRuleContext(0, Create_group_stmtContext);
    }
    public alter_group_stmt(): Alter_group_stmtContext | null {
        return this.getRuleContext(0, Alter_group_stmtContext);
    }
    public drop_role_stmt(): Drop_role_stmtContext | null {
        return this.getRuleContext(0, Drop_role_stmtContext);
    }
    public create_object_stmt(): Create_object_stmtContext | null {
        return this.getRuleContext(0, Create_object_stmtContext);
    }
    public alter_object_stmt(): Alter_object_stmtContext | null {
        return this.getRuleContext(0, Alter_object_stmtContext);
    }
    public drop_object_stmt(): Drop_object_stmtContext | null {
        return this.getRuleContext(0, Drop_object_stmtContext);
    }
    public create_external_data_source_stmt(): Create_external_data_source_stmtContext | null {
        return this.getRuleContext(0, Create_external_data_source_stmtContext);
    }
    public alter_external_data_source_stmt(): Alter_external_data_source_stmtContext | null {
        return this.getRuleContext(0, Alter_external_data_source_stmtContext);
    }
    public drop_external_data_source_stmt(): Drop_external_data_source_stmtContext | null {
        return this.getRuleContext(0, Drop_external_data_source_stmtContext);
    }
    public create_replication_stmt(): Create_replication_stmtContext | null {
        return this.getRuleContext(0, Create_replication_stmtContext);
    }
    public drop_replication_stmt(): Drop_replication_stmtContext | null {
        return this.getRuleContext(0, Drop_replication_stmtContext);
    }
    public create_topic_stmt(): Create_topic_stmtContext | null {
        return this.getRuleContext(0, Create_topic_stmtContext);
    }
    public alter_topic_stmt(): Alter_topic_stmtContext | null {
        return this.getRuleContext(0, Alter_topic_stmtContext);
    }
    public drop_topic_stmt(): Drop_topic_stmtContext | null {
        return this.getRuleContext(0, Drop_topic_stmtContext);
    }
    public grant_permissions_stmt(): Grant_permissions_stmtContext | null {
        return this.getRuleContext(0, Grant_permissions_stmtContext);
    }
    public revoke_permissions_stmt(): Revoke_permissions_stmtContext | null {
        return this.getRuleContext(0, Revoke_permissions_stmtContext);
    }
    public alter_table_store_stmt(): Alter_table_store_stmtContext | null {
        return this.getRuleContext(0, Alter_table_store_stmtContext);
    }
    public upsert_object_stmt(): Upsert_object_stmtContext | null {
        return this.getRuleContext(0, Upsert_object_stmtContext);
    }
    public create_view_stmt(): Create_view_stmtContext | null {
        return this.getRuleContext(0, Create_view_stmtContext);
    }
    public drop_view_stmt(): Drop_view_stmtContext | null {
        return this.getRuleContext(0, Drop_view_stmtContext);
    }
    public alter_replication_stmt(): Alter_replication_stmtContext | null {
        return this.getRuleContext(0, Alter_replication_stmtContext);
    }
    public create_resource_pool_stmt(): Create_resource_pool_stmtContext | null {
        return this.getRuleContext(0, Create_resource_pool_stmtContext);
    }
    public alter_resource_pool_stmt(): Alter_resource_pool_stmtContext | null {
        return this.getRuleContext(0, Alter_resource_pool_stmtContext);
    }
    public drop_resource_pool_stmt(): Drop_resource_pool_stmtContext | null {
        return this.getRuleContext(0, Drop_resource_pool_stmtContext);
    }
    public create_backup_collection_stmt(): Create_backup_collection_stmtContext | null {
        return this.getRuleContext(0, Create_backup_collection_stmtContext);
    }
    public alter_backup_collection_stmt(): Alter_backup_collection_stmtContext | null {
        return this.getRuleContext(0, Alter_backup_collection_stmtContext);
    }
    public drop_backup_collection_stmt(): Drop_backup_collection_stmtContext | null {
        return this.getRuleContext(0, Drop_backup_collection_stmtContext);
    }
    public analyze_stmt(): Analyze_stmtContext | null {
        return this.getRuleContext(0, Analyze_stmtContext);
    }
    public create_resource_pool_classifier_stmt(): Create_resource_pool_classifier_stmtContext | null {
        return this.getRuleContext(0, Create_resource_pool_classifier_stmtContext);
    }
    public alter_resource_pool_classifier_stmt(): Alter_resource_pool_classifier_stmtContext | null {
        return this.getRuleContext(0, Alter_resource_pool_classifier_stmtContext);
    }
    public drop_resource_pool_classifier_stmt(): Drop_resource_pool_classifier_stmtContext | null {
        return this.getRuleContext(0, Drop_resource_pool_classifier_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sql_stmt_core;
    }
}


export class ExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public or_subexpr(): Or_subexprContext[];
    public or_subexpr(i: number): Or_subexprContext | null;
    public or_subexpr(i?: number): Or_subexprContext[] | Or_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Or_subexprContext);
        }

        return this.getRuleContext(i, Or_subexprContext);
    }
    public OR(): antlr.TerminalNode[];
    public OR(i: number): antlr.TerminalNode | null;
    public OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.OR);
    	} else {
    		return this.getToken(YQLParser.OR, i);
    	}
    }
    public type_name_composite(): Type_name_compositeContext | null {
        return this.getRuleContext(0, Type_name_compositeContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_expr;
    }
}


export class Or_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public and_subexpr(): And_subexprContext[];
    public and_subexpr(i: number): And_subexprContext | null;
    public and_subexpr(i?: number): And_subexprContext[] | And_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(And_subexprContext);
        }

        return this.getRuleContext(i, And_subexprContext);
    }
    public AND(): antlr.TerminalNode[];
    public AND(i: number): antlr.TerminalNode | null;
    public AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.AND);
    	} else {
    		return this.getToken(YQLParser.AND, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_or_subexpr;
    }
}


export class And_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xor_subexpr(): Xor_subexprContext[];
    public xor_subexpr(i: number): Xor_subexprContext | null;
    public xor_subexpr(i?: number): Xor_subexprContext[] | Xor_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xor_subexprContext);
        }

        return this.getRuleContext(i, Xor_subexprContext);
    }
    public XOR(): antlr.TerminalNode[];
    public XOR(i: number): antlr.TerminalNode | null;
    public XOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.XOR);
    	} else {
    		return this.getToken(YQLParser.XOR, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_and_subexpr;
    }
}


export class Xor_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public eq_subexpr(): Eq_subexprContext {
        return this.getRuleContext(0, Eq_subexprContext)!;
    }
    public cond_expr(): Cond_exprContext | null {
        return this.getRuleContext(0, Cond_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_xor_subexpr;
    }
}


export class Distinct_from_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(YQLParser.IS, 0)!;
    }
    public DISTINCT(): antlr.TerminalNode {
        return this.getToken(YQLParser.DISTINCT, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(YQLParser.FROM, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_distinct_from_op;
    }
}


export class Cond_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public match_op(): Match_opContext | null {
        return this.getRuleContext(0, Match_opContext);
    }
    public eq_subexpr(): Eq_subexprContext[];
    public eq_subexpr(i: number): Eq_subexprContext | null;
    public eq_subexpr(i?: number): Eq_subexprContext[] | Eq_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Eq_subexprContext);
        }

        return this.getRuleContext(i, Eq_subexprContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ESCAPE, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IN, 0);
    }
    public in_expr(): In_exprContext | null {
        return this.getRuleContext(0, In_exprContext);
    }
    public COMPACT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMPACT, 0);
    }
    public ISNULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ISNULL, 0);
    }
    public NOTNULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOTNULL, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IS, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BETWEEN, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AND, 0);
    }
    public SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYMMETRIC, 0);
    }
    public ASYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYMMETRIC, 0);
    }
    public EQUALS(): antlr.TerminalNode[];
    public EQUALS(i: number): antlr.TerminalNode | null;
    public EQUALS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.EQUALS);
    	} else {
    		return this.getToken(YQLParser.EQUALS, i);
    	}
    }
    public EQUALS2(): antlr.TerminalNode[];
    public EQUALS2(i: number): antlr.TerminalNode | null;
    public EQUALS2(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.EQUALS2);
    	} else {
    		return this.getToken(YQLParser.EQUALS2, i);
    	}
    }
    public NOT_EQUALS(): antlr.TerminalNode[];
    public NOT_EQUALS(i: number): antlr.TerminalNode | null;
    public NOT_EQUALS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.NOT_EQUALS);
    	} else {
    		return this.getToken(YQLParser.NOT_EQUALS, i);
    	}
    }
    public NOT_EQUALS2(): antlr.TerminalNode[];
    public NOT_EQUALS2(i: number): antlr.TerminalNode | null;
    public NOT_EQUALS2(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.NOT_EQUALS2);
    	} else {
    		return this.getToken(YQLParser.NOT_EQUALS2, i);
    	}
    }
    public distinct_from_op(): Distinct_from_opContext[];
    public distinct_from_op(i: number): Distinct_from_opContext | null;
    public distinct_from_op(i?: number): Distinct_from_opContext[] | Distinct_from_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Distinct_from_opContext);
        }

        return this.getRuleContext(i, Distinct_from_opContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_cond_expr;
    }
}


export class Match_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIKE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ILIKE, 0);
    }
    public GLOB(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GLOB, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REGEXP, 0);
    }
    public RLIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RLIKE, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_match_op;
    }
}


export class Eq_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public neq_subexpr(): Neq_subexprContext[];
    public neq_subexpr(i: number): Neq_subexprContext | null;
    public neq_subexpr(i?: number): Neq_subexprContext[] | Neq_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Neq_subexprContext);
        }

        return this.getRuleContext(i, Neq_subexprContext);
    }
    public LESS(): antlr.TerminalNode[];
    public LESS(i: number): antlr.TerminalNode | null;
    public LESS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.LESS);
    	} else {
    		return this.getToken(YQLParser.LESS, i);
    	}
    }
    public LESS_OR_EQ(): antlr.TerminalNode[];
    public LESS_OR_EQ(i: number): antlr.TerminalNode | null;
    public LESS_OR_EQ(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.LESS_OR_EQ);
    	} else {
    		return this.getToken(YQLParser.LESS_OR_EQ, i);
    	}
    }
    public GREATER(): antlr.TerminalNode[];
    public GREATER(i: number): antlr.TerminalNode | null;
    public GREATER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GREATER);
    	} else {
    		return this.getToken(YQLParser.GREATER, i);
    	}
    }
    public GREATER_OR_EQ(): antlr.TerminalNode[];
    public GREATER_OR_EQ(i: number): antlr.TerminalNode | null;
    public GREATER_OR_EQ(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GREATER_OR_EQ);
    	} else {
    		return this.getToken(YQLParser.GREATER_OR_EQ, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_eq_subexpr;
    }
}


export class Shift_rightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GREATER(): antlr.TerminalNode[];
    public GREATER(i: number): antlr.TerminalNode | null;
    public GREATER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GREATER);
    	} else {
    		return this.getToken(YQLParser.GREATER, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_shift_right;
    }
}


export class Rot_rightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GREATER(): antlr.TerminalNode[];
    public GREATER(i: number): antlr.TerminalNode | null;
    public GREATER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GREATER);
    	} else {
    		return this.getToken(YQLParser.GREATER, i);
    	}
    }
    public PIPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.PIPE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_rot_right;
    }
}


export class Double_questionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_double_question;
    }
}


export class Neq_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bit_subexpr(): Bit_subexprContext[];
    public bit_subexpr(i: number): Bit_subexprContext | null;
    public bit_subexpr(i?: number): Bit_subexprContext[] | Bit_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Bit_subexprContext);
        }

        return this.getRuleContext(i, Bit_subexprContext);
    }
    public double_question(): Double_questionContext | null {
        return this.getRuleContext(0, Double_questionContext);
    }
    public neq_subexpr(): Neq_subexprContext | null {
        return this.getRuleContext(0, Neq_subexprContext);
    }
    public SHIFT_LEFT(): antlr.TerminalNode[];
    public SHIFT_LEFT(i: number): antlr.TerminalNode | null;
    public SHIFT_LEFT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SHIFT_LEFT);
    	} else {
    		return this.getToken(YQLParser.SHIFT_LEFT, i);
    	}
    }
    public shift_right(): Shift_rightContext[];
    public shift_right(i: number): Shift_rightContext | null;
    public shift_right(i?: number): Shift_rightContext[] | Shift_rightContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Shift_rightContext);
        }

        return this.getRuleContext(i, Shift_rightContext);
    }
    public ROT_LEFT(): antlr.TerminalNode[];
    public ROT_LEFT(i: number): antlr.TerminalNode | null;
    public ROT_LEFT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ROT_LEFT);
    	} else {
    		return this.getToken(YQLParser.ROT_LEFT, i);
    	}
    }
    public rot_right(): Rot_rightContext[];
    public rot_right(i: number): Rot_rightContext | null;
    public rot_right(i?: number): Rot_rightContext[] | Rot_rightContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Rot_rightContext);
        }

        return this.getRuleContext(i, Rot_rightContext);
    }
    public AMPERSAND(): antlr.TerminalNode[];
    public AMPERSAND(i: number): antlr.TerminalNode | null;
    public AMPERSAND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.AMPERSAND);
    	} else {
    		return this.getToken(YQLParser.AMPERSAND, i);
    	}
    }
    public PIPE(): antlr.TerminalNode[];
    public PIPE(i: number): antlr.TerminalNode | null;
    public PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.PIPE);
    	} else {
    		return this.getToken(YQLParser.PIPE, i);
    	}
    }
    public CARET(): antlr.TerminalNode[];
    public CARET(i: number): antlr.TerminalNode | null;
    public CARET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.CARET);
    	} else {
    		return this.getToken(YQLParser.CARET, i);
    	}
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_neq_subexpr;
    }
}


export class Bit_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public add_subexpr(): Add_subexprContext[];
    public add_subexpr(i: number): Add_subexprContext | null;
    public add_subexpr(i?: number): Add_subexprContext[] | Add_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Add_subexprContext);
        }

        return this.getRuleContext(i, Add_subexprContext);
    }
    public PLUS(): antlr.TerminalNode[];
    public PLUS(i: number): antlr.TerminalNode | null;
    public PLUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.PLUS);
    	} else {
    		return this.getToken(YQLParser.PLUS, i);
    	}
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.MINUS);
    	} else {
    		return this.getToken(YQLParser.MINUS, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bit_subexpr;
    }
}


export class Add_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public mul_subexpr(): Mul_subexprContext[];
    public mul_subexpr(i: number): Mul_subexprContext | null;
    public mul_subexpr(i?: number): Mul_subexprContext[] | Mul_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Mul_subexprContext);
        }

        return this.getRuleContext(i, Mul_subexprContext);
    }
    public ASTERISK(): antlr.TerminalNode[];
    public ASTERISK(i: number): antlr.TerminalNode | null;
    public ASTERISK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ASTERISK);
    	} else {
    		return this.getToken(YQLParser.ASTERISK, i);
    	}
    }
    public SLASH(): antlr.TerminalNode[];
    public SLASH(i: number): antlr.TerminalNode | null;
    public SLASH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SLASH);
    	} else {
    		return this.getToken(YQLParser.SLASH, i);
    	}
    }
    public PERCENT(): antlr.TerminalNode[];
    public PERCENT(i: number): antlr.TerminalNode | null;
    public PERCENT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.PERCENT);
    	} else {
    		return this.getToken(YQLParser.PERCENT, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_add_subexpr;
    }
}


export class Mul_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public con_subexpr(): Con_subexprContext[];
    public con_subexpr(i: number): Con_subexprContext | null;
    public con_subexpr(i?: number): Con_subexprContext[] | Con_subexprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Con_subexprContext);
        }

        return this.getRuleContext(i, Con_subexprContext);
    }
    public DOUBLE_PIPE(): antlr.TerminalNode[];
    public DOUBLE_PIPE(i: number): antlr.TerminalNode | null;
    public DOUBLE_PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DOUBLE_PIPE);
    	} else {
    		return this.getToken(YQLParser.DOUBLE_PIPE, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_mul_subexpr;
    }
}


export class Con_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unary_subexpr(): Unary_subexprContext {
        return this.getRuleContext(0, Unary_subexprContext)!;
    }
    public unary_op(): Unary_opContext | null {
        return this.getRuleContext(0, Unary_opContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_con_subexpr;
    }
}


export class Unary_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MINUS, 0);
    }
    public TILDA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TILDA, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_unary_op;
    }
}


export class Unary_subexpr_suffixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLLATE, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public key_expr(): Key_exprContext[];
    public key_expr(i: number): Key_exprContext | null;
    public key_expr(i?: number): Key_exprContext[] | Key_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Key_exprContext);
        }

        return this.getRuleContext(i, Key_exprContext);
    }
    public invoke_expr(): Invoke_exprContext[];
    public invoke_expr(i: number): Invoke_exprContext | null;
    public invoke_expr(i?: number): Invoke_exprContext[] | Invoke_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Invoke_exprContext);
        }

        return this.getRuleContext(i, Invoke_exprContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DOT);
    	} else {
    		return this.getToken(YQLParser.DOT, i);
    	}
    }
    public bind_parameter(): Bind_parameterContext[];
    public bind_parameter(i: number): Bind_parameterContext | null;
    public bind_parameter(i?: number): Bind_parameterContext[] | Bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Bind_parameterContext);
        }

        return this.getRuleContext(i, Bind_parameterContext);
    }
    public DIGITS(): antlr.TerminalNode[];
    public DIGITS(i: number): antlr.TerminalNode | null;
    public DIGITS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DIGITS);
    	} else {
    		return this.getToken(YQLParser.DIGITS, i);
    	}
    }
    public an_id_or_type(): An_id_or_typeContext[];
    public an_id_or_type(i: number): An_id_or_typeContext | null;
    public an_id_or_type(i?: number): An_id_or_typeContext[] | An_id_or_typeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_or_typeContext);
        }

        return this.getRuleContext(i, An_id_or_typeContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_unary_subexpr_suffix;
    }
}


export class Unary_casual_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unary_subexpr_suffix(): Unary_subexpr_suffixContext {
        return this.getRuleContext(0, Unary_subexpr_suffixContext)!;
    }
    public id_expr(): Id_exprContext | null {
        return this.getRuleContext(0, Id_exprContext);
    }
    public atom_expr(): Atom_exprContext | null {
        return this.getRuleContext(0, Atom_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_unary_casual_subexpr;
    }
}


export class In_unary_casual_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unary_subexpr_suffix(): Unary_subexpr_suffixContext {
        return this.getRuleContext(0, Unary_subexpr_suffixContext)!;
    }
    public id_expr_in(): Id_expr_inContext | null {
        return this.getRuleContext(0, Id_expr_inContext);
    }
    public in_atom_expr(): In_atom_exprContext | null {
        return this.getRuleContext(0, In_atom_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_in_unary_casual_subexpr;
    }
}


export class Unary_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unary_casual_subexpr(): Unary_casual_subexprContext | null {
        return this.getRuleContext(0, Unary_casual_subexprContext);
    }
    public json_api_expr(): Json_api_exprContext | null {
        return this.getRuleContext(0, Json_api_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_unary_subexpr;
    }
}


export class In_unary_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public in_unary_casual_subexpr(): In_unary_casual_subexprContext | null {
        return this.getRuleContext(0, In_unary_casual_subexprContext);
    }
    public json_api_expr(): Json_api_exprContext | null {
        return this.getRuleContext(0, Json_api_exprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_in_unary_subexpr;
    }
}


export class List_literalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACE_SQUARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.LBRACE_SQUARE, 0)!;
    }
    public RBRACE_SQUARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RBRACE_SQUARE, 0)!;
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_list_literal;
    }
}


export class Expr_dict_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COLON(): antlr.TerminalNode[];
    public COLON(i: number): antlr.TerminalNode | null;
    public COLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COLON);
    	} else {
    		return this.getToken(YQLParser.COLON, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_expr_dict_list;
    }
}


export class Dict_literalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACE_CURLY(): antlr.TerminalNode {
        return this.getToken(YQLParser.LBRACE_CURLY, 0)!;
    }
    public RBRACE_CURLY(): antlr.TerminalNode {
        return this.getToken(YQLParser.RBRACE_CURLY, 0)!;
    }
    public expr_dict_list(): Expr_dict_listContext | null {
        return this.getRuleContext(0, Expr_dict_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_dict_literal;
    }
}


export class Expr_struct_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COLON(): antlr.TerminalNode[];
    public COLON(i: number): antlr.TerminalNode | null;
    public COLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COLON);
    	} else {
    		return this.getToken(YQLParser.COLON, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_expr_struct_list;
    }
}


export class Struct_literalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRUCT_OPEN(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRUCT_OPEN, 0)!;
    }
    public STRUCT_CLOSE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRUCT_CLOSE, 0)!;
    }
    public expr_struct_list(): Expr_struct_listContext | null {
        return this.getRuleContext(0, Expr_struct_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_struct_literal;
    }
}


export class Atom_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal_value(): Literal_valueContext | null {
        return this.getRuleContext(0, Literal_valueContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public lambda(): LambdaContext | null {
        return this.getRuleContext(0, LambdaContext);
    }
    public cast_expr(): Cast_exprContext | null {
        return this.getRuleContext(0, Cast_exprContext);
    }
    public exists_expr(): Exists_exprContext | null {
        return this.getRuleContext(0, Exists_exprContext);
    }
    public case_expr(): Case_exprContext | null {
        return this.getRuleContext(0, Case_exprContext);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NAMESPACE, 0);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public value_constructor(): Value_constructorContext | null {
        return this.getRuleContext(0, Value_constructorContext);
    }
    public bitcast_expr(): Bitcast_exprContext | null {
        return this.getRuleContext(0, Bitcast_exprContext);
    }
    public list_literal(): List_literalContext | null {
        return this.getRuleContext(0, List_literalContext);
    }
    public dict_literal(): Dict_literalContext | null {
        return this.getRuleContext(0, Dict_literalContext);
    }
    public struct_literal(): Struct_literalContext | null {
        return this.getRuleContext(0, Struct_literalContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_atom_expr;
    }
}


export class In_atom_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal_value(): Literal_valueContext | null {
        return this.getRuleContext(0, Literal_valueContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public lambda(): LambdaContext | null {
        return this.getRuleContext(0, LambdaContext);
    }
    public cast_expr(): Cast_exprContext | null {
        return this.getRuleContext(0, Cast_exprContext);
    }
    public case_expr(): Case_exprContext | null {
        return this.getRuleContext(0, Case_exprContext);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NAMESPACE, 0);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public value_constructor(): Value_constructorContext | null {
        return this.getRuleContext(0, Value_constructorContext);
    }
    public bitcast_expr(): Bitcast_exprContext | null {
        return this.getRuleContext(0, Bitcast_exprContext);
    }
    public list_literal(): List_literalContext | null {
        return this.getRuleContext(0, List_literalContext);
    }
    public dict_literal(): Dict_literalContext | null {
        return this.getRuleContext(0, Dict_literalContext);
    }
    public struct_literal(): Struct_literalContext | null {
        return this.getRuleContext(0, Struct_literalContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_in_atom_expr;
    }
}


export class Cast_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CAST(): antlr.TerminalNode {
        return this.getToken(YQLParser.CAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_cast_expr;
    }
}


export class Bitcast_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BITCAST(): antlr.TerminalNode {
        return this.getToken(YQLParser.BITCAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public type_name_simple(): Type_name_simpleContext {
        return this.getRuleContext(0, Type_name_simpleContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bitcast_expr;
    }
}


export class Exists_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXISTS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_exists_expr;
    }
}


export class Case_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(YQLParser.END, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public when_expr(): When_exprContext[];
    public when_expr(i: number): When_exprContext | null;
    public when_expr(i?: number): When_exprContext[] | When_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(When_exprContext);
        }

        return this.getRuleContext(i, When_exprContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_case_expr;
    }
}


export class LambdaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public smart_parenthesis(): Smart_parenthesisContext {
        return this.getRuleContext(0, Smart_parenthesisContext)!;
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARROW, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public LBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_CURLY, 0);
    }
    public lambda_body(): Lambda_bodyContext | null {
        return this.getRuleContext(0, Lambda_bodyContext);
    }
    public RBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_CURLY, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_lambda;
    }
}


export class In_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public in_unary_subexpr(): In_unary_subexprContext {
        return this.getRuleContext(0, In_unary_subexprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_in_expr;
    }
}


export class Json_api_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json_value(): Json_valueContext | null {
        return this.getRuleContext(0, Json_valueContext);
    }
    public json_exists(): Json_existsContext | null {
        return this.getRuleContext(0, Json_existsContext);
    }
    public json_query(): Json_queryContext | null {
        return this.getRuleContext(0, Json_queryContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_api_expr;
    }
}


export class Jsonpath_specContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRING_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_jsonpath_spec;
    }
}


export class Json_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_expr(): Id_exprContext | null {
        return this.getRuleContext(0, Id_exprContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_variable_name;
    }
}


export class Json_variableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public json_variable_name(): Json_variable_nameContext {
        return this.getRuleContext(0, Json_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_variable;
    }
}


export class Json_variablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json_variable(): Json_variableContext[];
    public json_variable(i: number): Json_variableContext | null;
    public json_variable(i?: number): Json_variableContext[] | Json_variableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Json_variableContext);
        }

        return this.getRuleContext(i, Json_variableContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_variables;
    }
}


export class Json_common_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMA, 0)!;
    }
    public jsonpath_spec(): Jsonpath_specContext {
        return this.getRuleContext(0, Jsonpath_specContext)!;
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSING, 0);
    }
    public json_variables(): Json_variablesContext | null {
        return this.getRuleContext(0, Json_variablesContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_common_args;
    }
}


export class Json_case_handlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_case_handler;
    }
}


export class Json_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.JSON_VALUE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public json_common_args(): Json_common_argsContext {
        return this.getRuleContext(0, Json_common_argsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RETURNING, 0);
    }
    public type_name_simple(): Type_name_simpleContext | null {
        return this.getRuleContext(0, Type_name_simpleContext);
    }
    public json_case_handler(): Json_case_handlerContext[];
    public json_case_handler(i: number): Json_case_handlerContext | null;
    public json_case_handler(i?: number): Json_case_handlerContext[] | Json_case_handlerContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Json_case_handlerContext);
        }

        return this.getRuleContext(i, Json_case_handlerContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ON);
    	} else {
    		return this.getToken(YQLParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode[];
    public EMPTY(i: number): antlr.TerminalNode | null;
    public EMPTY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.EMPTY);
    	} else {
    		return this.getToken(YQLParser.EMPTY, i);
    	}
    }
    public ERROR(): antlr.TerminalNode[];
    public ERROR(i: number): antlr.TerminalNode | null;
    public ERROR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ERROR);
    	} else {
    		return this.getToken(YQLParser.ERROR, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_value;
    }
}


export class Json_exists_handlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public ERROR(): antlr.TerminalNode[];
    public ERROR(i: number): antlr.TerminalNode | null;
    public ERROR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ERROR);
    	} else {
    		return this.getToken(YQLParser.ERROR, i);
    	}
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FALSE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNKNOWN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_exists_handler;
    }
}


export class Json_existsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_EXISTS(): antlr.TerminalNode {
        return this.getToken(YQLParser.JSON_EXISTS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public json_common_args(): Json_common_argsContext {
        return this.getRuleContext(0, Json_common_argsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public json_exists_handler(): Json_exists_handlerContext | null {
        return this.getRuleContext(0, Json_exists_handlerContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_exists;
    }
}


export class Json_query_wrapperContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITHOUT, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARRAY, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONDITIONAL, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNCONDITIONAL, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_query_wrapper;
    }
}


export class Json_query_handlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARRAY, 0);
    }
    public OBJECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OBJECT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_query_handler;
    }
}


export class Json_queryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_QUERY(): antlr.TerminalNode {
        return this.getToken(YQLParser.JSON_QUERY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public json_common_args(): Json_common_argsContext {
        return this.getRuleContext(0, Json_common_argsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public json_query_wrapper(): Json_query_wrapperContext | null {
        return this.getRuleContext(0, Json_query_wrapperContext);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WRAPPER, 0);
    }
    public json_query_handler(): Json_query_handlerContext[];
    public json_query_handler(i: number): Json_query_handlerContext | null;
    public json_query_handler(i?: number): Json_query_handlerContext[] | Json_query_handlerContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Json_query_handlerContext);
        }

        return this.getRuleContext(i, Json_query_handlerContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ON);
    	} else {
    		return this.getToken(YQLParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_json_query;
    }
}


export class Smart_parenthesisContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public named_expr_list(): Named_expr_listContext | null {
        return this.getRuleContext(0, Named_expr_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_smart_parenthesis;
    }
}


export class Expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_expr_list;
    }
}


export class Pure_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pure_column_list;
    }
}


export class Pure_column_or_namedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pure_column_or_named;
    }
}


export class Pure_column_or_named_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public pure_column_or_named(): Pure_column_or_namedContext[];
    public pure_column_or_named(i: number): Pure_column_or_namedContext | null;
    public pure_column_or_named(i?: number): Pure_column_or_namedContext[] | Pure_column_or_namedContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Pure_column_or_namedContext);
        }

        return this.getRuleContext(i, Pure_column_or_namedContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pure_column_or_named_list;
    }
}


export class Column_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_id_prefix(): Opt_id_prefixContext {
        return this.getRuleContext(0, Opt_id_prefixContext)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_column_name;
    }
}


export class Without_column_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public an_id_without(): An_id_withoutContext | null {
        return this.getRuleContext(0, An_id_withoutContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_without_column_name;
    }
}


export class Column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext[];
    public column_name(i: number): Column_nameContext | null;
    public column_name(i?: number): Column_nameContext[] | Column_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_nameContext);
        }

        return this.getRuleContext(i, Column_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_column_list;
    }
}


export class Without_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public without_column_name(): Without_column_nameContext[];
    public without_column_name(i: number): Without_column_nameContext | null;
    public without_column_name(i?: number): Without_column_nameContext[] | Without_column_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Without_column_nameContext);
        }

        return this.getRuleContext(i, Without_column_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_without_column_list;
    }
}


export class Named_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_expr;
    }
}


export class Named_expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_expr(): Named_exprContext[];
    public named_expr(i: number): Named_exprContext | null;
    public named_expr(i?: number): Named_exprContext[] | Named_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Named_exprContext);
        }

        return this.getRuleContext(i, Named_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_expr_list;
    }
}


export class Invoke_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public invoke_expr_tail(): Invoke_expr_tailContext {
        return this.getRuleContext(0, Invoke_expr_tailContext)!;
    }
    public opt_set_quantifier(): Opt_set_quantifierContext | null {
        return this.getRuleContext(0, Opt_set_quantifierContext);
    }
    public named_expr_list(): Named_expr_listContext | null {
        return this.getRuleContext(0, Named_expr_listContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_invoke_expr;
    }
}


export class Invoke_expr_tailContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public null_treatment(): Null_treatmentContext | null {
        return this.getRuleContext(0, Null_treatmentContext);
    }
    public filter_clause(): Filter_clauseContext | null {
        return this.getRuleContext(0, Filter_clauseContext);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OVER, 0);
    }
    public window_name_or_specification(): Window_name_or_specificationContext | null {
        return this.getRuleContext(0, Window_name_or_specificationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_invoke_expr_tail;
    }
}


export class Using_call_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public invoke_expr(): Invoke_exprContext {
        return this.getRuleContext(0, Invoke_exprContext)!;
    }
    public an_id_or_type(): An_id_or_typeContext[];
    public an_id_or_type(i: number): An_id_or_typeContext | null;
    public an_id_or_type(i?: number): An_id_or_typeContext[] | An_id_or_typeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_or_typeContext);
        }

        return this.getRuleContext(i, An_id_or_typeContext);
    }
    public NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NAMESPACE, 0);
    }
    public an_id_expr(): An_id_exprContext | null {
        return this.getRuleContext(0, An_id_exprContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FUNCTION, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_using_call_expr;
    }
}


export class Key_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACE_SQUARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.LBRACE_SQUARE, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public RBRACE_SQUARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RBRACE_SQUARE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_key_expr;
    }
}


export class When_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(YQLParser.WHEN, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(YQLParser.THEN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_when_expr;
    }
}


export class Literal_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public real(): RealContext | null {
        return this.getRuleContext(0, RealContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public BLOB(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BLOB, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_TIME, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_DATE, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_TIMESTAMP, 0);
    }
    public bool_value(): Bool_valueContext | null {
        return this.getRuleContext(0, Bool_valueContext);
    }
    public EMPTY_ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY_ACTION, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_literal_value;
    }
}


export class Bind_parameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOLLAR(): antlr.TerminalNode {
        return this.getToken(YQLParser.DOLLAR, 0)!;
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bind_parameter;
    }
}


export class Opt_bind_parameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter(): Bind_parameterContext {
        return this.getRuleContext(0, Bind_parameterContext)!;
    }
    public QUESTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUESTION, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_bind_parameter;
    }
}


export class Bind_parameter_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter(): Bind_parameterContext[];
    public bind_parameter(i: number): Bind_parameterContext | null;
    public bind_parameter(i?: number): Bind_parameterContext[] | Bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Bind_parameterContext);
        }

        return this.getRuleContext(i, Bind_parameterContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bind_parameter_list;
    }
}


export class Named_bind_parameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter(): Bind_parameterContext[];
    public bind_parameter(i: number): Bind_parameterContext | null;
    public bind_parameter(i?: number): Bind_parameterContext[] | Bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Bind_parameterContext);
        }

        return this.getRuleContext(i, Bind_parameterContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_bind_parameter;
    }
}


export class Named_bind_parameter_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_bind_parameter(): Named_bind_parameterContext[];
    public named_bind_parameter(i: number): Named_bind_parameterContext | null;
    public named_bind_parameter(i?: number): Named_bind_parameterContext[] | Named_bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Named_bind_parameterContext);
        }

        return this.getRuleContext(i, Named_bind_parameterContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_bind_parameter_list;
    }
}


export class Signed_numberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public real(): RealContext | null {
        return this.getRuleContext(0, RealContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_signed_number;
    }
}


export class Type_name_simpleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_pure(): An_id_pureContext {
        return this.getRuleContext(0, An_id_pureContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_simple;
    }
}


export class Integer_or_bindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_integer_or_bind;
    }
}


export class Type_name_tagContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_tag;
    }
}


export class Struct_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_tag(): Type_name_tagContext {
        return this.getRuleContext(0, Type_name_tagContext)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLON, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_struct_arg;
    }
}


export class Struct_arg_positionalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_tag(): Type_name_tagContext {
        return this.getRuleContext(0, Type_name_tagContext)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_struct_arg_positional;
    }
}


export class Variant_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public type_name_tag(): Type_name_tagContext | null {
        return this.getRuleContext(0, Type_name_tagContext);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLON, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_variant_arg;
    }
}


export class Callable_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public variant_arg(): Variant_argContext {
        return this.getRuleContext(0, Variant_argContext)!;
    }
    public LBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_CURLY, 0);
    }
    public AUTOMAP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AUTOMAP, 0);
    }
    public RBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_CURLY, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_callable_arg;
    }
}


export class Callable_arg_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public callable_arg(): Callable_argContext[];
    public callable_arg(i: number): Callable_argContext | null;
    public callable_arg(i?: number): Callable_argContext[] | Callable_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Callable_argContext);
        }

        return this.getRuleContext(i, Callable_argContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_callable_arg_list;
    }
}


export class Type_name_decimalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECIMAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.DECIMAL, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public integer_or_bind(): Integer_or_bindContext[];
    public integer_or_bind(i: number): Integer_or_bindContext | null;
    public integer_or_bind(i?: number): Integer_or_bindContext[] | Integer_or_bindContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Integer_or_bindContext);
        }

        return this.getRuleContext(i, Integer_or_bindContext);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMA, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_decimal;
    }
}


export class Type_name_optionalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIONAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.OPTIONAL, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_optional;
    }
}


export class Type_name_tupleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TUPLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TUPLE, 0)!;
    }
    public LESS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LESS, 0);
    }
    public GREATER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GREATER, 0);
    }
    public NOT_EQUALS2(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT_EQUALS2, 0);
    }
    public type_name_or_bind(): Type_name_or_bindContext[];
    public type_name_or_bind(i: number): Type_name_or_bindContext | null;
    public type_name_or_bind(i?: number): Type_name_or_bindContext[] | Type_name_or_bindContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Type_name_or_bindContext);
        }

        return this.getRuleContext(i, Type_name_or_bindContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_tuple;
    }
}


export class Type_name_structContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRUCT(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRUCT, 0)!;
    }
    public LESS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LESS, 0);
    }
    public GREATER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GREATER, 0);
    }
    public NOT_EQUALS2(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT_EQUALS2, 0);
    }
    public struct_arg(): Struct_argContext[];
    public struct_arg(i: number): Struct_argContext | null;
    public struct_arg(i?: number): Struct_argContext[] | Struct_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Struct_argContext);
        }

        return this.getRuleContext(i, Struct_argContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_struct;
    }
}


export class Type_name_variantContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VARIANT(): antlr.TerminalNode {
        return this.getToken(YQLParser.VARIANT, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public variant_arg(): Variant_argContext[];
    public variant_arg(i: number): Variant_argContext | null;
    public variant_arg(i?: number): Variant_argContext[] | Variant_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Variant_argContext);
        }

        return this.getRuleContext(i, Variant_argContext);
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_variant;
    }
}


export class Type_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIST(): antlr.TerminalNode {
        return this.getToken(YQLParser.LIST, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_list;
    }
}


export class Type_name_streamContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STREAM(): antlr.TerminalNode {
        return this.getToken(YQLParser.STREAM, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_stream;
    }
}


export class Type_name_flowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FLOW(): antlr.TerminalNode {
        return this.getToken(YQLParser.FLOW, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_flow;
    }
}


export class Type_name_dictContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DICT(): antlr.TerminalNode {
        return this.getToken(YQLParser.DICT, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext[];
    public type_name_or_bind(i: number): Type_name_or_bindContext | null;
    public type_name_or_bind(i?: number): Type_name_or_bindContext[] | Type_name_or_bindContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Type_name_or_bindContext);
        }

        return this.getRuleContext(i, Type_name_or_bindContext);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMA, 0)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_dict;
    }
}


export class Type_name_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_set;
    }
}


export class Type_name_enumContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENUM(): antlr.TerminalNode {
        return this.getToken(YQLParser.ENUM, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_tag(): Type_name_tagContext[];
    public type_name_tag(i: number): Type_name_tagContext | null;
    public type_name_tag(i?: number): Type_name_tagContext[] | Type_name_tagContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Type_name_tagContext);
        }

        return this.getRuleContext(i, Type_name_tagContext);
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_enum;
    }
}


export class Type_name_resourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_tag(): Type_name_tagContext {
        return this.getRuleContext(0, Type_name_tagContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_resource;
    }
}


export class Type_name_taggedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TAGGED(): antlr.TerminalNode {
        return this.getToken(YQLParser.TAGGED, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMA, 0)!;
    }
    public type_name_tag(): Type_name_tagContext {
        return this.getRuleContext(0, Type_name_tagContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_tagged;
    }
}


export class Type_name_callableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CALLABLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CALLABLE, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.LESS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public ARROW(): antlr.TerminalNode {
        return this.getToken(YQLParser.ARROW, 0)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(YQLParser.GREATER, 0)!;
    }
    public callable_arg_list(): Callable_arg_listContext[];
    public callable_arg_list(i: number): Callable_arg_listContext | null;
    public callable_arg_list(i?: number): Callable_arg_listContext[] | Callable_arg_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Callable_arg_listContext);
        }

        return this.getRuleContext(i, Callable_arg_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public LBRACE_SQUARE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_SQUARE, 0);
    }
    public RBRACE_SQUARE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_SQUARE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_callable;
    }
}


export class Type_name_compositeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_optional(): Type_name_optionalContext | null {
        return this.getRuleContext(0, Type_name_optionalContext);
    }
    public type_name_tuple(): Type_name_tupleContext | null {
        return this.getRuleContext(0, Type_name_tupleContext);
    }
    public type_name_struct(): Type_name_structContext | null {
        return this.getRuleContext(0, Type_name_structContext);
    }
    public type_name_variant(): Type_name_variantContext | null {
        return this.getRuleContext(0, Type_name_variantContext);
    }
    public type_name_list(): Type_name_listContext | null {
        return this.getRuleContext(0, Type_name_listContext);
    }
    public type_name_stream(): Type_name_streamContext | null {
        return this.getRuleContext(0, Type_name_streamContext);
    }
    public type_name_flow(): Type_name_flowContext | null {
        return this.getRuleContext(0, Type_name_flowContext);
    }
    public type_name_dict(): Type_name_dictContext | null {
        return this.getRuleContext(0, Type_name_dictContext);
    }
    public type_name_set(): Type_name_setContext | null {
        return this.getRuleContext(0, Type_name_setContext);
    }
    public type_name_enum(): Type_name_enumContext | null {
        return this.getRuleContext(0, Type_name_enumContext);
    }
    public type_name_resource(): Type_name_resourceContext | null {
        return this.getRuleContext(0, Type_name_resourceContext);
    }
    public type_name_tagged(): Type_name_taggedContext | null {
        return this.getRuleContext(0, Type_name_taggedContext);
    }
    public type_name_callable(): Type_name_callableContext | null {
        return this.getRuleContext(0, Type_name_callableContext);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_composite;
    }
}


export class Type_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name_composite(): Type_name_compositeContext | null {
        return this.getRuleContext(0, Type_name_compositeContext);
    }
    public type_name_decimal(): Type_name_decimalContext | null {
        return this.getRuleContext(0, Type_name_decimalContext);
    }
    public type_name_simple(): Type_name_simpleContext | null {
        return this.getRuleContext(0, Type_name_simpleContext);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name;
    }
}


export class Type_name_or_bindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_name(): Type_nameContext | null {
        return this.getRuleContext(0, Type_nameContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_name_or_bind;
    }
}


export class Value_constructor_literalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRING_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_value_constructor_literal;
    }
}


export class Value_constructorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VARIANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VARIANT, 0);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public ENUM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENUM, 0);
    }
    public CALLABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CALLABLE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_value_constructor;
    }
}


export class Declare_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE(): antlr.TerminalNode {
        return this.getToken(YQLParser.DECLARE, 0)!;
    }
    public bind_parameter(): Bind_parameterContext {
        return this.getRuleContext(0, Bind_parameterContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public type_name(): Type_nameContext {
        return this.getRuleContext(0, Type_nameContext)!;
    }
    public EQUALS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EQUALS, 0);
    }
    public literal_value(): Literal_valueContext | null {
        return this.getRuleContext(0, Literal_valueContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_declare_stmt;
    }
}


export class Module_pathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DOT);
    	} else {
    		return this.getToken(YQLParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_module_path;
    }
}


export class Import_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IMPORT(): antlr.TerminalNode {
        return this.getToken(YQLParser.IMPORT, 0)!;
    }
    public module_path(): Module_pathContext {
        return this.getRuleContext(0, Module_pathContext)!;
    }
    public SYMBOLS(): antlr.TerminalNode {
        return this.getToken(YQLParser.SYMBOLS, 0)!;
    }
    public named_bind_parameter_list(): Named_bind_parameter_listContext {
        return this.getRuleContext(0, Named_bind_parameter_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_import_stmt;
    }
}


export class Export_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPORT(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXPORT, 0)!;
    }
    public bind_parameter_list(): Bind_parameter_listContext {
        return this.getRuleContext(0, Bind_parameter_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_export_stmt;
    }
}


export class Call_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public EMPTY_ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY_ACTION, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_call_action;
    }
}


export class Inline_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEGIN(): antlr.TerminalNode {
        return this.getToken(YQLParser.BEGIN, 0)!;
    }
    public define_action_or_subquery_body(): Define_action_or_subquery_bodyContext {
        return this.getRuleContext(0, Define_action_or_subquery_bodyContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(YQLParser.END, 0)!;
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(YQLParser.DO, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_inline_action;
    }
}


export class Do_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(YQLParser.DO, 0)!;
    }
    public call_action(): Call_actionContext | null {
        return this.getRuleContext(0, Call_actionContext);
    }
    public inline_action(): Inline_actionContext | null {
        return this.getRuleContext(0, Inline_actionContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_do_stmt;
    }
}


export class Pragma_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRAGMA(): antlr.TerminalNode {
        return this.getToken(YQLParser.PRAGMA, 0)!;
    }
    public opt_id_prefix_or_type(): Opt_id_prefix_or_typeContext {
        return this.getRuleContext(0, Opt_id_prefix_or_typeContext)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EQUALS, 0);
    }
    public pragma_value(): Pragma_valueContext[];
    public pragma_value(i: number): Pragma_valueContext | null;
    public pragma_value(i?: number): Pragma_valueContext[] | Pragma_valueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Pragma_valueContext);
        }

        return this.getRuleContext(i, Pragma_valueContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pragma_stmt;
    }
}


export class Pragma_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public signed_number(): Signed_numberContext | null {
        return this.getRuleContext(0, Signed_numberContext);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public bool_value(): Bool_valueContext | null {
        return this.getRuleContext(0, Bool_valueContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_pragma_value;
    }
}


export class Sort_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESC, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sort_specification;
    }
}


export class Sort_specification_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sort_specification(): Sort_specificationContext[];
    public sort_specification(i: number): Sort_specificationContext | null;
    public sort_specification(i?: number): Sort_specificationContext[] | Sort_specificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sort_specificationContext);
        }

        return this.getRuleContext(i, Sort_specificationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sort_specification_list;
    }
}


export class Select_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_kind_parenthesis(): Select_kind_parenthesisContext[];
    public select_kind_parenthesis(i: number): Select_kind_parenthesisContext | null;
    public select_kind_parenthesis(i?: number): Select_kind_parenthesisContext[] | Select_kind_parenthesisContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_kind_parenthesisContext);
        }

        return this.getRuleContext(i, Select_kind_parenthesisContext);
    }
    public select_op(): Select_opContext[];
    public select_op(i: number): Select_opContext | null;
    public select_op(i?: number): Select_opContext[] | Select_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_opContext);
        }

        return this.getRuleContext(i, Select_opContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_stmt;
    }
}


export class Select_unparenthesized_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_kind_partial(): Select_kind_partialContext {
        return this.getRuleContext(0, Select_kind_partialContext)!;
    }
    public select_op(): Select_opContext[];
    public select_op(i: number): Select_opContext | null;
    public select_op(i?: number): Select_opContext[] | Select_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_opContext);
        }

        return this.getRuleContext(i, Select_opContext);
    }
    public select_kind_parenthesis(): Select_kind_parenthesisContext[];
    public select_kind_parenthesis(i: number): Select_kind_parenthesisContext | null;
    public select_kind_parenthesis(i?: number): Select_kind_parenthesisContext[] | Select_kind_parenthesisContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_kind_parenthesisContext);
        }

        return this.getRuleContext(i, Select_kind_parenthesisContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_unparenthesized_stmt;
    }
}


export class Select_kind_parenthesisContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_kind_partial(): Select_kind_partialContext {
        return this.getRuleContext(0, Select_kind_partialContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_kind_parenthesis;
    }
}


export class Select_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNION, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTERSECT, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCEPT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_op;
    }
}


export class Select_kind_partialContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_kind(): Select_kindContext {
        return this.getRuleContext(0, Select_kindContext)!;
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIMIT, 0);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OFFSET, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_kind_partial;
    }
}


export class Select_kindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public process_core(): Process_coreContext | null {
        return this.getRuleContext(0, Process_coreContext);
    }
    public reduce_core(): Reduce_coreContext | null {
        return this.getRuleContext(0, Reduce_coreContext);
    }
    public select_core(): Select_coreContext | null {
        return this.getRuleContext(0, Select_coreContext);
    }
    public DISCARD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISCARD, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTO, 0);
    }
    public RESULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESULT, 0);
    }
    public pure_column_or_named(): Pure_column_or_namedContext | null {
        return this.getRuleContext(0, Pure_column_or_namedContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_kind;
    }
}


export class Process_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCESS(): antlr.TerminalNode {
        return this.getToken(YQLParser.PROCESS, 0)!;
    }
    public named_single_source(): Named_single_sourceContext[];
    public named_single_source(i: number): Named_single_sourceContext | null;
    public named_single_source(i?: number): Named_single_sourceContext[] | Named_single_sourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Named_single_sourceContext);
        }

        return this.getRuleContext(i, Named_single_sourceContext);
    }
    public STREAM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STREAM, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USING, 0);
    }
    public using_call_expr(): Using_call_exprContext | null {
        return this.getRuleContext(0, Using_call_exprContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public external_call_settings(): External_call_settingsContext | null {
        return this.getRuleContext(0, External_call_settingsContext);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WHERE, 0);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HAVING, 0);
    }
    public ASSUME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASSUME, 0);
    }
    public order_by_clause(): Order_by_clauseContext | null {
        return this.getRuleContext(0, Order_by_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_process_core;
    }
}


export class External_call_paramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_external_call_param;
    }
}


export class External_call_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public external_call_param(): External_call_paramContext[];
    public external_call_param(i: number): External_call_paramContext | null;
    public external_call_param(i?: number): External_call_paramContext[] | External_call_paramContext | null {
        if (i === undefined) {
            return this.getRuleContexts(External_call_paramContext);
        }

        return this.getRuleContext(i, External_call_paramContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_external_call_settings;
    }
}


export class Reduce_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REDUCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.REDUCE, 0)!;
    }
    public named_single_source(): Named_single_sourceContext[];
    public named_single_source(i: number): Named_single_sourceContext | null;
    public named_single_source(i?: number): Named_single_sourceContext[] | Named_single_sourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Named_single_sourceContext);
        }

        return this.getRuleContext(i, Named_single_sourceContext);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public column_list(): Column_listContext {
        return this.getRuleContext(0, Column_listContext)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(YQLParser.USING, 0)!;
    }
    public using_call_expr(): Using_call_exprContext {
        return this.getRuleContext(0, Using_call_exprContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public PRESORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRESORT, 0);
    }
    public sort_specification_list(): Sort_specification_listContext | null {
        return this.getRuleContext(0, Sort_specification_listContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WHERE, 0);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HAVING, 0);
    }
    public ASSUME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASSUME, 0);
    }
    public order_by_clause(): Order_by_clauseContext | null {
        return this.getRuleContext(0, Order_by_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_reduce_core;
    }
}


export class Opt_set_quantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_set_quantifier;
    }
}


export class Select_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.SELECT, 0)!;
    }
    public opt_set_quantifier(): Opt_set_quantifierContext {
        return this.getRuleContext(0, Opt_set_quantifierContext)!;
    }
    public result_column(): Result_columnContext[];
    public result_column(i: number): Result_columnContext | null;
    public result_column(i?: number): Result_columnContext[] | Result_columnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Result_columnContext);
        }

        return this.getRuleContext(i, Result_columnContext);
    }
    public FROM(): antlr.TerminalNode[];
    public FROM(i: number): antlr.TerminalNode | null;
    public FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.FROM);
    	} else {
    		return this.getToken(YQLParser.FROM, i);
    	}
    }
    public join_source(): Join_sourceContext[];
    public join_source(i: number): Join_sourceContext | null;
    public join_source(i?: number): Join_sourceContext[] | Join_sourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_sourceContext);
        }

        return this.getRuleContext(i, Join_sourceContext);
    }
    public STREAM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STREAM, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITHOUT, 0);
    }
    public without_column_list(): Without_column_listContext | null {
        return this.getRuleContext(0, Without_column_listContext);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WHERE, 0);
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public group_by_clause(): Group_by_clauseContext | null {
        return this.getRuleContext(0, Group_by_clauseContext);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HAVING, 0);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public ext_order_by_clause(): Ext_order_by_clauseContext | null {
        return this.getRuleContext(0, Ext_order_by_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_select_core;
    }
}


export class Row_pattern_recognition_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode {
        return this.getToken(YQLParser.MATCH_RECOGNIZE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public row_pattern_common_syntax(): Row_pattern_common_syntaxContext {
        return this.getRuleContext(0, Row_pattern_common_syntaxContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public window_partition_clause(): Window_partition_clauseContext | null {
        return this.getRuleContext(0, Window_partition_clauseContext);
    }
    public order_by_clause(): Order_by_clauseContext | null {
        return this.getRuleContext(0, Order_by_clauseContext);
    }
    public row_pattern_measures(): Row_pattern_measuresContext | null {
        return this.getRuleContext(0, Row_pattern_measuresContext);
    }
    public row_pattern_rows_per_match(): Row_pattern_rows_per_matchContext | null {
        return this.getRuleContext(0, Row_pattern_rows_per_matchContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_recognition_clause;
    }
}


export class Row_pattern_rows_per_matchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONE, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public PER(): antlr.TerminalNode {
        return this.getToken(YQLParser.PER, 0)!;
    }
    public MATCH(): antlr.TerminalNode {
        return this.getToken(YQLParser.MATCH, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROWS, 0);
    }
    public row_pattern_empty_match_handling(): Row_pattern_empty_match_handlingContext | null {
        return this.getRuleContext(0, Row_pattern_empty_match_handlingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_rows_per_match;
    }
}


export class Row_pattern_empty_match_handlingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SHOW, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCHES, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OMIT, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNMATCHED, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROWS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_empty_match_handling;
    }
}


export class Row_pattern_measuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MEASURES(): antlr.TerminalNode {
        return this.getToken(YQLParser.MEASURES, 0)!;
    }
    public row_pattern_measure_list(): Row_pattern_measure_listContext {
        return this.getRuleContext(0, Row_pattern_measure_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_measures;
    }
}


export class Row_pattern_measure_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_measure_definition(): Row_pattern_measure_definitionContext[];
    public row_pattern_measure_definition(i: number): Row_pattern_measure_definitionContext | null;
    public row_pattern_measure_definition(i?: number): Row_pattern_measure_definitionContext[] | Row_pattern_measure_definitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_measure_definitionContext);
        }

        return this.getRuleContext(i, Row_pattern_measure_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_measure_list;
    }
}


export class Row_pattern_measure_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_measure_definition;
    }
}


export class Row_pattern_common_syntaxContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PATTERN(): antlr.TerminalNode {
        return this.getToken(YQLParser.PATTERN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public row_pattern(): Row_patternContext {
        return this.getRuleContext(0, Row_patternContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public DEFINE(): antlr.TerminalNode {
        return this.getToken(YQLParser.DEFINE, 0)!;
    }
    public row_pattern_definition_list(): Row_pattern_definition_listContext {
        return this.getRuleContext(0, Row_pattern_definition_listContext)!;
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AFTER, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH, 0);
    }
    public row_pattern_skip_to(): Row_pattern_skip_toContext | null {
        return this.getRuleContext(0, Row_pattern_skip_toContext);
    }
    public row_pattern_initial_or_seek(): Row_pattern_initial_or_seekContext | null {
        return this.getRuleContext(0, Row_pattern_initial_or_seekContext);
    }
    public row_pattern_subset_clause(): Row_pattern_subset_clauseContext | null {
        return this.getRuleContext(0, Row_pattern_subset_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_common_syntax;
    }
}


export class Row_pattern_skip_toContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TSKIP(): antlr.TerminalNode {
        return this.getToken(YQLParser.TSKIP, 0)!;
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NEXT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PAST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LAST, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FIRST, 0);
    }
    public row_pattern_skip_to_variable_name(): Row_pattern_skip_to_variable_nameContext | null {
        return this.getRuleContext(0, Row_pattern_skip_to_variable_nameContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_skip_to;
    }
}


export class Row_pattern_skip_to_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_skip_to_variable_name;
    }
}


export class Row_pattern_initial_or_seekContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIAL, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEEK, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_initial_or_seek;
    }
}


export class Row_patternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_term(): Row_pattern_termContext[];
    public row_pattern_term(i: number): Row_pattern_termContext | null;
    public row_pattern_term(i?: number): Row_pattern_termContext[] | Row_pattern_termContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_termContext);
        }

        return this.getRuleContext(i, Row_pattern_termContext);
    }
    public PIPE(): antlr.TerminalNode[];
    public PIPE(i: number): antlr.TerminalNode | null;
    public PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.PIPE);
    	} else {
    		return this.getToken(YQLParser.PIPE, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern;
    }
}


export class Row_pattern_termContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_factor(): Row_pattern_factorContext[];
    public row_pattern_factor(i: number): Row_pattern_factorContext | null;
    public row_pattern_factor(i?: number): Row_pattern_factorContext[] | Row_pattern_factorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_factorContext);
        }

        return this.getRuleContext(i, Row_pattern_factorContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_term;
    }
}


export class Row_pattern_factorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_primary(): Row_pattern_primaryContext {
        return this.getRuleContext(0, Row_pattern_primaryContext)!;
    }
    public row_pattern_quantifier(): Row_pattern_quantifierContext | null {
        return this.getRuleContext(0, Row_pattern_quantifierContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_factor;
    }
}


export class Row_pattern_quantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public QUESTION(): antlr.TerminalNode[];
    public QUESTION(i: number): antlr.TerminalNode | null;
    public QUESTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.QUESTION);
    	} else {
    		return this.getToken(YQLParser.QUESTION, i);
    	}
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLUS, 0);
    }
    public LBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_CURLY, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public RBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_CURLY, 0);
    }
    public integer(): IntegerContext[];
    public integer(i: number): IntegerContext | null;
    public integer(i?: number): IntegerContext[] | IntegerContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntegerContext);
        }

        return this.getRuleContext(i, IntegerContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_quantifier;
    }
}


export class Row_pattern_primaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_primary_variable_name(): Row_pattern_primary_variable_nameContext | null {
        return this.getRuleContext(0, Row_pattern_primary_variable_nameContext);
    }
    public DOLLAR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOLLAR, 0);
    }
    public CARET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CARET, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public row_pattern(): Row_patternContext | null {
        return this.getRuleContext(0, Row_patternContext);
    }
    public LBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LBRACE_CURLY, 0);
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.MINUS);
    	} else {
    		return this.getToken(YQLParser.MINUS, i);
    	}
    }
    public RBRACE_CURLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RBRACE_CURLY, 0);
    }
    public row_pattern_permute(): Row_pattern_permuteContext | null {
        return this.getRuleContext(0, Row_pattern_permuteContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_primary;
    }
}


export class Row_pattern_primary_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_primary_variable_name;
    }
}


export class Row_pattern_permuteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PERMUTE(): antlr.TerminalNode {
        return this.getToken(YQLParser.PERMUTE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public row_pattern(): Row_patternContext[];
    public row_pattern(i: number): Row_patternContext | null;
    public row_pattern(i?: number): Row_patternContext[] | Row_patternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_patternContext);
        }

        return this.getRuleContext(i, Row_patternContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_permute;
    }
}


export class Row_pattern_subset_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBSET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SUBSET, 0)!;
    }
    public row_pattern_subset_list(): Row_pattern_subset_listContext {
        return this.getRuleContext(0, Row_pattern_subset_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_clause;
    }
}


export class Row_pattern_subset_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_subset_item(): Row_pattern_subset_itemContext[];
    public row_pattern_subset_item(i: number): Row_pattern_subset_itemContext | null;
    public row_pattern_subset_item(i?: number): Row_pattern_subset_itemContext[] | Row_pattern_subset_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_subset_itemContext);
        }

        return this.getRuleContext(i, Row_pattern_subset_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_list;
    }
}


export class Row_pattern_subset_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_subset_item_variable_name(): Row_pattern_subset_item_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_subset_item_variable_nameContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public row_pattern_subset_rhs(): Row_pattern_subset_rhsContext {
        return this.getRuleContext(0, Row_pattern_subset_rhsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_item;
    }
}


export class Row_pattern_subset_item_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_item_variable_name;
    }
}


export class Row_pattern_subset_rhsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_subset_rhs_variable_name(): Row_pattern_subset_rhs_variable_nameContext[];
    public row_pattern_subset_rhs_variable_name(i: number): Row_pattern_subset_rhs_variable_nameContext | null;
    public row_pattern_subset_rhs_variable_name(i?: number): Row_pattern_subset_rhs_variable_nameContext[] | Row_pattern_subset_rhs_variable_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_subset_rhs_variable_nameContext);
        }

        return this.getRuleContext(i, Row_pattern_subset_rhs_variable_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_rhs;
    }
}


export class Row_pattern_subset_rhs_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_subset_rhs_variable_name;
    }
}


export class Row_pattern_definition_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_definition(): Row_pattern_definitionContext[];
    public row_pattern_definition(i: number): Row_pattern_definitionContext | null;
    public row_pattern_definition(i?: number): Row_pattern_definitionContext[] | Row_pattern_definitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Row_pattern_definitionContext);
        }

        return this.getRuleContext(i, Row_pattern_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_definition_list;
    }
}


export class Row_pattern_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_definition_variable_name(): Row_pattern_definition_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_definition_variable_nameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public row_pattern_definition_search_condition(): Row_pattern_definition_search_conditionContext {
        return this.getRuleContext(0, Row_pattern_definition_search_conditionContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_definition;
    }
}


export class Row_pattern_definition_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public row_pattern_variable_name(): Row_pattern_variable_nameContext {
        return this.getRuleContext(0, Row_pattern_variable_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_definition_variable_name;
    }
}


export class Row_pattern_definition_search_conditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public search_condition(): Search_conditionContext {
        return this.getRuleContext(0, Search_conditionContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_definition_search_condition;
    }
}


export class Search_conditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_search_condition;
    }
}


export class Row_pattern_variable_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_row_pattern_variable_name;
    }
}


export class Order_by_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(YQLParser.BY, 0)!;
    }
    public sort_specification_list(): Sort_specification_listContext {
        return this.getRuleContext(0, Sort_specification_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_order_by_clause;
    }
}


export class Ext_order_by_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public order_by_clause(): Order_by_clauseContext {
        return this.getRuleContext(0, Order_by_clauseContext)!;
    }
    public ASSUME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASSUME, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_ext_order_by_clause;
    }
}


export class Group_by_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.GROUP, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(YQLParser.BY, 0)!;
    }
    public opt_set_quantifier(): Opt_set_quantifierContext {
        return this.getRuleContext(0, Opt_set_quantifierContext)!;
    }
    public grouping_element_list(): Grouping_element_listContext {
        return this.getRuleContext(0, Grouping_element_listContext)!;
    }
    public COMPACT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMPACT, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_group_by_clause;
    }
}


export class Grouping_element_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public grouping_element(): Grouping_elementContext[];
    public grouping_element(i: number): Grouping_elementContext | null;
    public grouping_element(i?: number): Grouping_elementContext[] | Grouping_elementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Grouping_elementContext);
        }

        return this.getRuleContext(i, Grouping_elementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_grouping_element_list;
    }
}


export class Grouping_elementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ordinary_grouping_set(): Ordinary_grouping_setContext | null {
        return this.getRuleContext(0, Ordinary_grouping_setContext);
    }
    public rollup_list(): Rollup_listContext | null {
        return this.getRuleContext(0, Rollup_listContext);
    }
    public cube_list(): Cube_listContext | null {
        return this.getRuleContext(0, Cube_listContext);
    }
    public grouping_sets_specification(): Grouping_sets_specificationContext | null {
        return this.getRuleContext(0, Grouping_sets_specificationContext);
    }
    public hopping_window_specification(): Hopping_window_specificationContext | null {
        return this.getRuleContext(0, Hopping_window_specificationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_grouping_element;
    }
}


export class Ordinary_grouping_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_expr(): Named_exprContext {
        return this.getRuleContext(0, Named_exprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_ordinary_grouping_set;
    }
}


export class Ordinary_grouping_set_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ordinary_grouping_set(): Ordinary_grouping_setContext[];
    public ordinary_grouping_set(i: number): Ordinary_grouping_setContext | null;
    public ordinary_grouping_set(i?: number): Ordinary_grouping_setContext[] | Ordinary_grouping_setContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Ordinary_grouping_setContext);
        }

        return this.getRuleContext(i, Ordinary_grouping_setContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_ordinary_grouping_set_list;
    }
}


export class Rollup_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLLUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.ROLLUP, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public ordinary_grouping_set_list(): Ordinary_grouping_set_listContext {
        return this.getRuleContext(0, Ordinary_grouping_set_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_rollup_list;
    }
}


export class Cube_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CUBE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CUBE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public ordinary_grouping_set_list(): Ordinary_grouping_set_listContext {
        return this.getRuleContext(0, Ordinary_grouping_set_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_cube_list;
    }
}


export class Grouping_sets_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUPING(): antlr.TerminalNode {
        return this.getToken(YQLParser.GROUPING, 0)!;
    }
    public SETS(): antlr.TerminalNode {
        return this.getToken(YQLParser.SETS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public grouping_element_list(): Grouping_element_listContext {
        return this.getRuleContext(0, Grouping_element_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_grouping_sets_specification;
    }
}


export class Hopping_window_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HOP(): antlr.TerminalNode {
        return this.getToken(YQLParser.HOP, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext[];
    public expr(i: number): ExprContext | null;
    public expr(i?: number): ExprContext[] | ExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprContext);
        }

        return this.getRuleContext(i, ExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_hopping_window_specification;
    }
}


export class Result_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_id_prefix(): Opt_id_prefixContext | null {
        return this.getRuleContext(0, Opt_id_prefixContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public an_id_as_compat(): An_id_as_compatContext | null {
        return this.getRuleContext(0, An_id_as_compatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_result_column;
    }
}


export class Join_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public flatten_source(): Flatten_sourceContext[];
    public flatten_source(i: number): Flatten_sourceContext | null;
    public flatten_source(i?: number): Flatten_sourceContext[] | Flatten_sourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Flatten_sourceContext);
        }

        return this.getRuleContext(i, Flatten_sourceContext);
    }
    public ANY(): antlr.TerminalNode[];
    public ANY(i: number): antlr.TerminalNode | null;
    public ANY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.ANY);
    	} else {
    		return this.getToken(YQLParser.ANY, i);
    	}
    }
    public join_op(): Join_opContext[];
    public join_op(i: number): Join_opContext | null;
    public join_op(i?: number): Join_opContext[] | Join_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_opContext);
        }

        return this.getRuleContext(i, Join_opContext);
    }
    public join_constraint(): Join_constraintContext[];
    public join_constraint(i: number): Join_constraintContext | null;
    public join_constraint(i?: number): Join_constraintContext[] | Join_constraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_constraintContext);
        }

        return this.getRuleContext(i, Join_constraintContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_join_source;
    }
}


export class Named_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_column;
    }
}


export class Flatten_by_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_column(): Named_columnContext | null {
        return this.getRuleContext(0, Named_columnContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public named_expr_list(): Named_expr_listContext | null {
        return this.getRuleContext(0, Named_expr_listContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_flatten_by_arg;
    }
}


export class Flatten_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_single_source(): Named_single_sourceContext {
        return this.getRuleContext(0, Named_single_sourceContext)!;
    }
    public FLATTEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FLATTEN, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public flatten_by_arg(): Flatten_by_argContext | null {
        return this.getRuleContext(0, Flatten_by_argContext);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMNS, 0);
    }
    public OPTIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTIONAL, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIST, 0);
    }
    public DICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DICT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_flatten_source;
    }
}


export class Named_single_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public single_source(): Single_sourceContext {
        return this.getRuleContext(0, Single_sourceContext)!;
    }
    public row_pattern_recognition_clause(): Row_pattern_recognition_clauseContext | null {
        return this.getRuleContext(0, Row_pattern_recognition_clauseContext);
    }
    public sample_clause(): Sample_clauseContext | null {
        return this.getRuleContext(0, Sample_clauseContext);
    }
    public tablesample_clause(): Tablesample_clauseContext | null {
        return this.getRuleContext(0, Tablesample_clauseContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public an_id_as_compat(): An_id_as_compatContext | null {
        return this.getRuleContext(0, An_id_as_compatContext);
    }
    public pure_column_list(): Pure_column_listContext | null {
        return this.getRuleContext(0, Pure_column_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_single_source;
    }
}


export class Single_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_ref(): Table_refContext | null {
        return this.getRuleContext(0, Table_refContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_single_source;
    }
}


export class Sample_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAMPLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SAMPLE, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sample_clause;
    }
}


export class Tablesample_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLESAMPLE, 0)!;
    }
    public sampling_mode(): Sampling_modeContext {
        return this.getRuleContext(0, Sampling_modeContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public repeatable_clause(): Repeatable_clauseContext | null {
        return this.getRuleContext(0, Repeatable_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_tablesample_clause;
    }
}


export class Sampling_modeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BERNOULLI, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYSTEM, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_sampling_mode;
    }
}


export class Repeatable_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPEATABLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.REPEATABLE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_repeatable_clause;
    }
}


export class Join_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMA, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JOIN, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INNER, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CROSS, 0);
    }
    public NATURAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NATURAL, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RIGHT, 0);
    }
    public EXCLUSION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUSION, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FULL, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OUTER, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONLY, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEMI, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_join_op;
    }
}


export class Join_constraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USING, 0);
    }
    public pure_column_or_named_list(): Pure_column_or_named_listContext | null {
        return this.getRuleContext(0, Pure_column_or_named_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_join_constraint;
    }
}


export class Returning_columns_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURNING(): antlr.TerminalNode {
        return this.getToken(YQLParser.RETURNING, 0)!;
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_returning_columns_list;
    }
}


export class Into_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(YQLParser.INTO, 0)!;
    }
    public into_simple_table_ref(): Into_simple_table_refContext {
        return this.getRuleContext(0, Into_simple_table_refContext)!;
    }
    public into_values_source(): Into_values_sourceContext {
        return this.getRuleContext(0, Into_values_sourceContext)!;
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public ABORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ABORT, 0);
    }
    public REVERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVERT, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public UPSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPSERT, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public returning_columns_list(): Returning_columns_listContext | null {
        return this.getRuleContext(0, Returning_columns_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_into_table_stmt;
    }
}


export class Into_values_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public values_source(): Values_sourceContext | null {
        return this.getRuleContext(0, Values_sourceContext);
    }
    public pure_column_list(): Pure_column_listContext | null {
        return this.getRuleContext(0, Pure_column_listContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VALUES, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_into_values_source;
    }
}


export class Values_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(YQLParser.VALUES, 0)!;
    }
    public values_source_row_list(): Values_source_row_listContext {
        return this.getRuleContext(0, Values_source_row_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_values_stmt;
    }
}


export class Values_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public values_stmt(): Values_stmtContext | null {
        return this.getRuleContext(0, Values_stmtContext);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_values_source;
    }
}


export class Values_source_row_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public values_source_row(): Values_source_rowContext[];
    public values_source_row(i: number): Values_source_rowContext | null;
    public values_source_row(i?: number): Values_source_rowContext[] | Values_source_rowContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Values_source_rowContext);
        }

        return this.getRuleContext(i, Values_source_rowContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_values_source_row_list;
    }
}


export class Values_source_rowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_values_source_row;
    }
}


export class Simple_values_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_simple_values_source;
    }
}


export class Create_external_data_source_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public EXTERNAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXTERNAL, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(YQLParser.DATA, 0)!;
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SOURCE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public with_table_settings(): With_table_settingsContext {
        return this.getRuleContext(0, With_table_settingsContext)!;
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_external_data_source_stmt;
    }
}


export class Alter_external_data_source_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public EXTERNAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXTERNAL, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(YQLParser.DATA, 0)!;
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SOURCE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_external_data_source_action(): Alter_external_data_source_actionContext[];
    public alter_external_data_source_action(i: number): Alter_external_data_source_actionContext | null;
    public alter_external_data_source_action(i?: number): Alter_external_data_source_actionContext[] | Alter_external_data_source_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_external_data_source_actionContext);
        }

        return this.getRuleContext(i, Alter_external_data_source_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_external_data_source_stmt;
    }
}


export class Alter_external_data_source_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_uncompatContext);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_external_data_source_action;
    }
}


export class Drop_external_data_source_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public EXTERNAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXTERNAL, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(YQLParser.DATA, 0)!;
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.SOURCE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_external_data_source_stmt;
    }
}


export class Create_view_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(YQLParser.VIEW, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public with_table_settings(): With_table_settingsContext {
        return this.getRuleContext(0, With_table_settingsContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public select_stmt(): Select_stmtContext {
        return this.getRuleContext(0, Select_stmtContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_view_stmt;
    }
}


export class Drop_view_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(YQLParser.VIEW, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_view_stmt;
    }
}


export class Upsert_object_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPSERT(): antlr.TerminalNode {
        return this.getToken(YQLParser.UPSERT, 0)!;
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.OBJECT, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TYPE, 0)!;
    }
    public object_type_ref(): Object_type_refContext {
        return this.getRuleContext(0, Object_type_refContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public create_object_features(): Create_object_featuresContext | null {
        return this.getRuleContext(0, Create_object_featuresContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_upsert_object_stmt;
    }
}


export class Create_object_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.OBJECT, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TYPE, 0)!;
    }
    public object_type_ref(): Object_type_refContext {
        return this.getRuleContext(0, Object_type_refContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public create_object_features(): Create_object_featuresContext | null {
        return this.getRuleContext(0, Create_object_featuresContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_object_stmt;
    }
}


export class Create_object_featuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public object_features(): Object_featuresContext {
        return this.getRuleContext(0, Object_featuresContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_object_features;
    }
}


export class Alter_object_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.OBJECT, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TYPE, 0)!;
    }
    public object_type_ref(): Object_type_refContext {
        return this.getRuleContext(0, Object_type_refContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public alter_object_features(): Alter_object_featuresContext {
        return this.getRuleContext(0, Alter_object_featuresContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_object_stmt;
    }
}


export class Alter_object_featuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public object_features(): Object_featuresContext {
        return this.getRuleContext(0, Object_featuresContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_object_features;
    }
}


export class Drop_object_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public OBJECT(): antlr.TerminalNode {
        return this.getToken(YQLParser.OBJECT, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TYPE, 0)!;
    }
    public object_type_ref(): Object_type_refContext {
        return this.getRuleContext(0, Object_type_refContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public drop_object_features(): Drop_object_featuresContext | null {
        return this.getRuleContext(0, Drop_object_featuresContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_object_stmt;
    }
}


export class Drop_object_featuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public object_features(): Object_featuresContext {
        return this.getRuleContext(0, Object_featuresContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_object_features;
    }
}


export class Object_feature_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_feature_value;
    }
}


export class Object_feature_kvContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext {
        return this.getRuleContext(0, An_id_or_typeContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public object_feature_value(): Object_feature_valueContext {
        return this.getRuleContext(0, Object_feature_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_feature_kv;
    }
}


export class Object_feature_flagContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext {
        return this.getRuleContext(0, An_id_or_typeContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_feature_flag;
    }
}


export class Object_featureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object_feature_kv(): Object_feature_kvContext | null {
        return this.getRuleContext(0, Object_feature_kvContext);
    }
    public object_feature_flag(): Object_feature_flagContext | null {
        return this.getRuleContext(0, Object_feature_flagContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_feature;
    }
}


export class Object_featuresContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object_feature(): Object_featureContext[];
    public object_feature(i: number): Object_featureContext | null;
    public object_feature(i?: number): Object_featureContext[] | Object_featureContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Object_featureContext);
        }

        return this.getRuleContext(i, Object_featureContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_features;
    }
}


export class Object_type_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext {
        return this.getRuleContext(0, An_id_or_typeContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_type_ref;
    }
}


export class Create_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public create_table_entry(): Create_table_entryContext[];
    public create_table_entry(i: number): Create_table_entryContext | null;
    public create_table_entry(i?: number): Create_table_entryContext[] | Create_table_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Create_table_entryContext);
        }

        return this.getRuleContext(i, Create_table_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public TABLESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESTORE, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMP, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMPORARY, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public table_inherits(): Table_inheritsContext | null {
        return this.getRuleContext(0, Table_inheritsContext);
    }
    public table_partition_by(): Table_partition_byContext | null {
        return this.getRuleContext(0, Table_partition_byContext);
    }
    public with_table_settings(): With_table_settingsContext | null {
        return this.getRuleContext(0, With_table_settingsContext);
    }
    public table_tablestore(): Table_tablestoreContext | null {
        return this.getRuleContext(0, Table_tablestoreContext);
    }
    public table_as_source(): Table_as_sourceContext | null {
        return this.getRuleContext(0, Table_as_sourceContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_table_stmt;
    }
}


export class Create_table_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_schema(): Column_schemaContext | null {
        return this.getRuleContext(0, Column_schemaContext);
    }
    public table_constraint(): Table_constraintContext | null {
        return this.getRuleContext(0, Table_constraintContext);
    }
    public table_index(): Table_indexContext | null {
        return this.getRuleContext(0, Table_indexContext);
    }
    public family_entry(): Family_entryContext | null {
        return this.getRuleContext(0, Family_entryContext);
    }
    public changefeed(): ChangefeedContext | null {
        return this.getRuleContext(0, ChangefeedContext);
    }
    public an_id_schema(): An_id_schemaContext | null {
        return this.getRuleContext(0, An_id_schemaContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_table_entry;
    }
}


export class Create_backup_collection_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public backup_collection(): Backup_collectionContext {
        return this.getRuleContext(0, Backup_collectionContext)!;
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public backup_collection_settings(): Backup_collection_settingsContext {
        return this.getRuleContext(0, Backup_collection_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_backup_collection_stmt;
    }
}


export class Alter_backup_collection_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public backup_collection(): Backup_collectionContext {
        return this.getRuleContext(0, Backup_collectionContext)!;
    }
    public alter_backup_collection_actions(): Alter_backup_collection_actionsContext {
        return this.getRuleContext(0, Alter_backup_collection_actionsContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_backup_collection_stmt;
    }
}


export class Drop_backup_collection_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public backup_collection(): Backup_collectionContext {
        return this.getRuleContext(0, Backup_collectionContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_backup_collection_stmt;
    }
}


export class Alter_backup_collection_actionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_backup_collection_action(): Alter_backup_collection_actionContext[];
    public alter_backup_collection_action(i: number): Alter_backup_collection_actionContext | null;
    public alter_backup_collection_action(i?: number): Alter_backup_collection_actionContext[] | Alter_backup_collection_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_backup_collection_actionContext);
        }

        return this.getRuleContext(i, Alter_backup_collection_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_backup_collection_actions;
    }
}


export class Alter_backup_collection_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_backup_collection_action;
    }
}


export class Backup_collectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BACKUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.BACKUP, 0)!;
    }
    public COLLECTION(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLLECTION, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_backup_collection;
    }
}


export class Backup_collection_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public backup_collection_settings_entry(): Backup_collection_settings_entryContext[];
    public backup_collection_settings_entry(i: number): Backup_collection_settings_entryContext | null;
    public backup_collection_settings_entry(i?: number): Backup_collection_settings_entryContext[] | Backup_collection_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Backup_collection_settings_entryContext);
        }

        return this.getRuleContext(i, Backup_collection_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_backup_collection_settings;
    }
}


export class Backup_collection_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public table_setting_value(): Table_setting_valueContext {
        return this.getRuleContext(0, Table_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_backup_collection_settings_entry;
    }
}


export class Table_inheritsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INHERITS(): antlr.TerminalNode {
        return this.getToken(YQLParser.INHERITS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public simple_table_ref_core(): Simple_table_ref_coreContext[];
    public simple_table_ref_core(i: number): Simple_table_ref_coreContext | null;
    public simple_table_ref_core(i?: number): Simple_table_ref_coreContext[] | Simple_table_ref_coreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Simple_table_ref_coreContext);
        }

        return this.getRuleContext(i, Simple_table_ref_coreContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_inherits;
    }
}


export class Table_partition_byContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(YQLParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(YQLParser.BY, 0)!;
    }
    public HASH(): antlr.TerminalNode {
        return this.getToken(YQLParser.HASH, 0)!;
    }
    public pure_column_list(): Pure_column_listContext {
        return this.getRuleContext(0, Pure_column_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_partition_by;
    }
}


export class With_table_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public table_settings_entry(): Table_settings_entryContext[];
    public table_settings_entry(i: number): Table_settings_entryContext | null;
    public table_settings_entry(i?: number): Table_settings_entryContext[] | Table_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_settings_entryContext);
        }

        return this.getRuleContext(i, Table_settings_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_with_table_settings;
    }
}


export class Table_tablestoreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESTORE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLESTORE, 0)!;
    }
    public simple_table_ref_core(): Simple_table_ref_coreContext {
        return this.getRuleContext(0, Simple_table_ref_coreContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_tablestore;
    }
}


export class Table_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public table_setting_value(): Table_setting_valueContext {
        return this.getRuleContext(0, Table_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_settings_entry;
    }
}


export class Table_as_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public values_source(): Values_sourceContext {
        return this.getRuleContext(0, Values_sourceContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_as_source;
    }
}


export class Alter_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLE, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public alter_table_action(): Alter_table_actionContext[];
    public alter_table_action(i: number): Alter_table_actionContext | null;
    public alter_table_action(i?: number): Alter_table_actionContext[] | Alter_table_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_table_actionContext);
        }

        return this.getRuleContext(i, Alter_table_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_stmt;
    }
}


export class Alter_table_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_add_column(): Alter_table_add_columnContext | null {
        return this.getRuleContext(0, Alter_table_add_columnContext);
    }
    public alter_table_drop_column(): Alter_table_drop_columnContext | null {
        return this.getRuleContext(0, Alter_table_drop_columnContext);
    }
    public alter_table_alter_column(): Alter_table_alter_columnContext | null {
        return this.getRuleContext(0, Alter_table_alter_columnContext);
    }
    public alter_table_add_column_family(): Alter_table_add_column_familyContext | null {
        return this.getRuleContext(0, Alter_table_add_column_familyContext);
    }
    public alter_table_alter_column_family(): Alter_table_alter_column_familyContext | null {
        return this.getRuleContext(0, Alter_table_alter_column_familyContext);
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_uncompatContext);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public alter_table_add_index(): Alter_table_add_indexContext | null {
        return this.getRuleContext(0, Alter_table_add_indexContext);
    }
    public alter_table_drop_index(): Alter_table_drop_indexContext | null {
        return this.getRuleContext(0, Alter_table_drop_indexContext);
    }
    public alter_table_rename_to(): Alter_table_rename_toContext | null {
        return this.getRuleContext(0, Alter_table_rename_toContext);
    }
    public alter_table_add_changefeed(): Alter_table_add_changefeedContext | null {
        return this.getRuleContext(0, Alter_table_add_changefeedContext);
    }
    public alter_table_alter_changefeed(): Alter_table_alter_changefeedContext | null {
        return this.getRuleContext(0, Alter_table_alter_changefeedContext);
    }
    public alter_table_drop_changefeed(): Alter_table_drop_changefeedContext | null {
        return this.getRuleContext(0, Alter_table_drop_changefeedContext);
    }
    public alter_table_rename_index_to(): Alter_table_rename_index_toContext | null {
        return this.getRuleContext(0, Alter_table_rename_index_toContext);
    }
    public alter_table_alter_index(): Alter_table_alter_indexContext | null {
        return this.getRuleContext(0, Alter_table_alter_indexContext);
    }
    public alter_table_alter_column_drop_not_null(): Alter_table_alter_column_drop_not_nullContext | null {
        return this.getRuleContext(0, Alter_table_alter_column_drop_not_nullContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_action;
    }
}


export class Alter_external_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public EXTERNAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXTERNAL, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLE, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public alter_external_table_action(): Alter_external_table_actionContext[];
    public alter_external_table_action(i: number): Alter_external_table_actionContext | null;
    public alter_external_table_action(i?: number): Alter_external_table_actionContext[] | Alter_external_table_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_external_table_actionContext);
        }

        return this.getRuleContext(i, Alter_external_table_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_external_table_stmt;
    }
}


export class Alter_external_table_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_add_column(): Alter_table_add_columnContext | null {
        return this.getRuleContext(0, Alter_table_add_columnContext);
    }
    public alter_table_drop_column(): Alter_table_drop_columnContext | null {
        return this.getRuleContext(0, Alter_table_drop_columnContext);
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_uncompatContext);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_external_table_action;
    }
}


export class Alter_table_store_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public TABLESTORE(): antlr.TerminalNode {
        return this.getToken(YQLParser.TABLESTORE, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_table_store_action(): Alter_table_store_actionContext[];
    public alter_table_store_action(i: number): Alter_table_store_actionContext | null;
    public alter_table_store_action(i?: number): Alter_table_store_actionContext[] | Alter_table_store_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_table_store_actionContext);
        }

        return this.getRuleContext(i, Alter_table_store_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_store_stmt;
    }
}


export class Alter_table_store_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_add_column(): Alter_table_add_columnContext | null {
        return this.getRuleContext(0, Alter_table_add_columnContext);
    }
    public alter_table_drop_column(): Alter_table_drop_columnContext | null {
        return this.getRuleContext(0, Alter_table_drop_columnContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_store_action;
    }
}


export class Alter_table_add_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public column_schema(): Column_schemaContext {
        return this.getRuleContext(0, Column_schemaContext)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_add_column;
    }
}


export class Alter_table_drop_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_drop_column;
    }
}


export class Alter_table_alter_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLUMN, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public family_relation(): Family_relationContext {
        return this.getRuleContext(0, Family_relationContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_column;
    }
}


export class Alter_table_alter_column_drop_not_nullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLUMN, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(YQLParser.NOT, 0)!;
    }
    public NULL(): antlr.TerminalNode {
        return this.getToken(YQLParser.NULL, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_column_drop_not_null;
    }
}


export class Alter_table_add_column_familyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public family_entry(): Family_entryContext {
        return this.getRuleContext(0, Family_entryContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_add_column_family;
    }
}


export class Alter_table_alter_column_familyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(YQLParser.FAMILY, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public family_setting_value(): Family_setting_valueContext {
        return this.getRuleContext(0, Family_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_column_family;
    }
}


export class Alter_table_set_table_setting_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public table_setting_value(): Table_setting_valueContext {
        return this.getRuleContext(0, Table_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_set_table_setting_uncompat;
    }
}


export class Alter_table_set_table_setting_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public alter_table_setting_entry(): Alter_table_setting_entryContext[];
    public alter_table_setting_entry(i: number): Alter_table_setting_entryContext | null;
    public alter_table_setting_entry(i?: number): Alter_table_setting_entryContext[] | Alter_table_setting_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_table_setting_entryContext);
        }

        return this.getRuleContext(i, Alter_table_setting_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_set_table_setting_compat;
    }
}


export class Alter_table_reset_table_settingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_reset_table_setting;
    }
}


export class Alter_table_add_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public table_index(): Table_indexContext {
        return this.getRuleContext(0, Table_indexContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_add_index;
    }
}


export class Alter_table_drop_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(YQLParser.INDEX, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_drop_index;
    }
}


export class Alter_table_rename_toContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(YQLParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(YQLParser.TO, 0)!;
    }
    public an_id_table(): An_id_tableContext {
        return this.getRuleContext(0, An_id_tableContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_rename_to;
    }
}


export class Alter_table_rename_index_toContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(YQLParser.RENAME, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(YQLParser.INDEX, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(YQLParser.TO, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_rename_index_to;
    }
}


export class Alter_table_add_changefeedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public changefeed(): ChangefeedContext {
        return this.getRuleContext(0, ChangefeedContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_add_changefeed;
    }
}


export class Alter_table_alter_changefeedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public CHANGEFEED(): antlr.TerminalNode {
        return this.getToken(YQLParser.CHANGEFEED, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public changefeed_alter_settings(): Changefeed_alter_settingsContext {
        return this.getRuleContext(0, Changefeed_alter_settingsContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_changefeed;
    }
}


export class Alter_table_drop_changefeedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public CHANGEFEED(): antlr.TerminalNode {
        return this.getToken(YQLParser.CHANGEFEED, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_drop_changefeed;
    }
}


export class Alter_table_alter_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(YQLParser.INDEX, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public alter_table_alter_index_action(): Alter_table_alter_index_actionContext {
        return this.getRuleContext(0, Alter_table_alter_index_actionContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_index;
    }
}


export class Column_schemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_schema(): An_id_schemaContext {
        return this.getRuleContext(0, An_id_schemaContext)!;
    }
    public type_name_or_bind(): Type_name_or_bindContext {
        return this.getRuleContext(0, Type_name_or_bindContext)!;
    }
    public opt_column_constraints(): Opt_column_constraintsContext {
        return this.getRuleContext(0, Opt_column_constraintsContext)!;
    }
    public family_relation(): Family_relationContext | null {
        return this.getRuleContext(0, Family_relationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_column_schema;
    }
}


export class Family_relationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(YQLParser.FAMILY, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_relation;
    }
}


export class Opt_column_constraintsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_column_constraints;
    }
}


export class Column_order_by_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESC, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_column_order_by_specification;
    }
}


export class Table_constraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIMARY, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.KEY, 0);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARTITION, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ORDER, 0);
    }
    public column_order_by_specification(): Column_order_by_specificationContext[];
    public column_order_by_specification(i: number): Column_order_by_specificationContext | null;
    public column_order_by_specification(i?: number): Column_order_by_specificationContext[] | Column_order_by_specificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_order_by_specificationContext);
        }

        return this.getRuleContext(i, Column_order_by_specificationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_constraint;
    }
}


export class Table_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(YQLParser.INDEX, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public table_index_type(): Table_index_typeContext {
        return this.getRuleContext(0, Table_index_typeContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.LPAREN);
    	} else {
    		return this.getToken(YQLParser.LPAREN, i);
    	}
    }
    public an_id_schema(): An_id_schemaContext[];
    public an_id_schema(i: number): An_id_schemaContext | null;
    public an_id_schema(i?: number): An_id_schemaContext[] | An_id_schemaContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_schemaContext);
        }

        return this.getRuleContext(i, An_id_schemaContext);
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.RPAREN);
    	} else {
    		return this.getToken(YQLParser.RPAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public COVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COVER, 0);
    }
    public with_index_settings(): With_index_settingsContext | null {
        return this.getRuleContext(0, With_index_settingsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_index;
    }
}


export class Table_index_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public global_index(): Global_indexContext | null {
        return this.getRuleContext(0, Global_indexContext);
    }
    public local_index(): Local_indexContext | null {
        return this.getRuleContext(0, Local_indexContext);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USING, 0);
    }
    public index_subtype(): Index_subtypeContext | null {
        return this.getRuleContext(0, Index_subtypeContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_index_type;
    }
}


export class Global_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GLOBAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.GLOBAL, 0)!;
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNIQUE, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYNC, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYNC, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_global_index;
    }
}


export class Local_indexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.LOCAL, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_local_index;
    }
}


export class Index_subtypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_index_subtype;
    }
}


export class With_index_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public index_setting_entry(): Index_setting_entryContext[];
    public index_setting_entry(i: number): Index_setting_entryContext | null;
    public index_setting_entry(i?: number): Index_setting_entryContext[] | Index_setting_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Index_setting_entryContext);
        }

        return this.getRuleContext(i, Index_setting_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_with_index_settings;
    }
}


export class Index_setting_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public index_setting_value(): Index_setting_valueContext {
        return this.getRuleContext(0, Index_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_index_setting_entry;
    }
}


export class Index_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public bool_value(): Bool_valueContext | null {
        return this.getRuleContext(0, Bool_valueContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_index_setting_value;
    }
}


export class ChangefeedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHANGEFEED(): antlr.TerminalNode {
        return this.getToken(YQLParser.CHANGEFEED, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public changefeed_settings(): Changefeed_settingsContext {
        return this.getRuleContext(0, Changefeed_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed;
    }
}


export class Changefeed_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public changefeed_settings_entry(): Changefeed_settings_entryContext[];
    public changefeed_settings_entry(i: number): Changefeed_settings_entryContext | null;
    public changefeed_settings_entry(i?: number): Changefeed_settings_entryContext[] | Changefeed_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Changefeed_settings_entryContext);
        }

        return this.getRuleContext(i, Changefeed_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed_settings;
    }
}


export class Changefeed_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public changefeed_setting_value(): Changefeed_setting_valueContext {
        return this.getRuleContext(0, Changefeed_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed_settings_entry;
    }
}


export class Changefeed_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed_setting_value;
    }
}


export class Changefeed_alter_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISABLE, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SET, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public changefeed_settings(): Changefeed_settingsContext | null {
        return this.getRuleContext(0, Changefeed_settingsContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_changefeed_alter_settings;
    }
}


export class Alter_table_setting_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public table_setting_value(): Table_setting_valueContext {
        return this.getRuleContext(0, Table_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_setting_entry;
    }
}


export class Table_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public integer(): IntegerContext | null {
        return this.getRuleContext(0, IntegerContext);
    }
    public split_boundaries(): Split_boundariesContext | null {
        return this.getRuleContext(0, Split_boundariesContext);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public SECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SECONDS, 0);
    }
    public MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MILLISECONDS, 0);
    }
    public MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MICROSECONDS, 0);
    }
    public NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NANOSECONDS, 0);
    }
    public bool_value(): Bool_valueContext | null {
        return this.getRuleContext(0, Bool_valueContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_setting_value;
    }
}


export class Family_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(YQLParser.FAMILY, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public family_settings(): Family_settingsContext {
        return this.getRuleContext(0, Family_settingsContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_entry;
    }
}


export class Family_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public family_settings_entry(): Family_settings_entryContext[];
    public family_settings_entry(i: number): Family_settings_entryContext | null;
    public family_settings_entry(i?: number): Family_settings_entryContext[] | Family_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Family_settings_entryContext);
        }

        return this.getRuleContext(i, Family_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_settings;
    }
}


export class Family_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public family_setting_value(): Family_setting_valueContext {
        return this.getRuleContext(0, Family_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_settings_entry;
    }
}


export class Family_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRING_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_family_setting_value;
    }
}


export class Split_boundariesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public literal_value_list(): Literal_value_listContext[];
    public literal_value_list(i: number): Literal_value_listContext | null;
    public literal_value_list(i?: number): Literal_value_listContext[] | Literal_value_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Literal_value_listContext);
        }

        return this.getRuleContext(i, Literal_value_listContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_split_boundaries;
    }
}


export class Literal_value_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public literal_value(): Literal_valueContext[];
    public literal_value(i: number): Literal_valueContext | null;
    public literal_value(i?: number): Literal_valueContext[] | Literal_valueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Literal_valueContext);
        }

        return this.getRuleContext(i, Literal_valueContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_literal_value_list;
    }
}


export class Alter_table_alter_index_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_set_table_setting_uncompat(): Alter_table_set_table_setting_uncompatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_uncompatContext);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_table_alter_index_action;
    }
}


export class Drop_table_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public TABLESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESTORE, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_table_stmt;
    }
}


export class Create_user_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(YQLParser.USER, 0)!;
    }
    public role_name(): Role_nameContext {
        return this.getRuleContext(0, Role_nameContext)!;
    }
    public create_user_option(): Create_user_optionContext | null {
        return this.getRuleContext(0, Create_user_optionContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_user_stmt;
    }
}


export class Alter_user_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(YQLParser.USER, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public create_user_option(): Create_user_optionContext | null {
        return this.getRuleContext(0, Create_user_optionContext);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RENAME, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_user_stmt;
    }
}


export class Create_group_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.GROUP, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_group_stmt;
    }
}


export class Alter_group_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(YQLParser.GROUP, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RENAME, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ADD, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DROP, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_group_stmt;
    }
}


export class Drop_role_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUP, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_role_stmt;
    }
}


export class Role_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_role_name;
    }
}


export class Create_user_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSWORD(): antlr.TerminalNode {
        return this.getToken(YQLParser.PASSWORD, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENCRYPTED, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_user_option;
    }
}


export class Grant_permissions_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT(): antlr.TerminalNode[];
    public GRANT(i: number): antlr.TerminalNode | null;
    public GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.GRANT);
    	} else {
    		return this.getToken(YQLParser.GRANT, i);
    	}
    }
    public permission_name_target(): Permission_name_targetContext {
        return this.getRuleContext(0, Permission_name_targetContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public an_id_schema(): An_id_schemaContext[];
    public an_id_schema(i: number): An_id_schemaContext | null;
    public an_id_schema(i?: number): An_id_schemaContext[] | An_id_schemaContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_schemaContext);
        }

        return this.getRuleContext(i, An_id_schemaContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(YQLParser.TO, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTION, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_grant_permissions_stmt;
    }
}


export class Revoke_permissions_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(YQLParser.REVOKE, 0)!;
    }
    public permission_name_target(): Permission_name_targetContext {
        return this.getRuleContext(0, Permission_name_targetContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(YQLParser.ON, 0)!;
    }
    public an_id_schema(): An_id_schemaContext[];
    public an_id_schema(i: number): An_id_schemaContext | null;
    public an_id_schema(i?: number): An_id_schemaContext[] | An_id_schemaContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_schemaContext);
        }

        return this.getRuleContext(i, An_id_schemaContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(YQLParser.FROM, 0)!;
    }
    public role_name(): Role_nameContext[];
    public role_name(i: number): Role_nameContext | null;
    public role_name(i?: number): Role_nameContext[] | Role_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_nameContext);
        }

        return this.getRuleContext(i, Role_nameContext);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOR, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_revoke_permissions_stmt;
    }
}


export class Permission_idContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONNECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONNECT, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIST, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public MANAGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MANAGE, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DROP, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GRANT, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MODIFY, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLES, 0);
    }
    public ATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTRIBUTES, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPDATE, 0);
    }
    public ERASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERASE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SCHEMA, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REMOVE, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESCRIBE, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALTER, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SELECT, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USE, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FULL, 0);
    }
    public LEGACY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEGACY, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CREATE, 0);
    }
    public DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIRECTORY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public QUEUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUEUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_permission_id;
    }
}


export class Permission_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public permission_id(): Permission_idContext | null {
        return this.getRuleContext(0, Permission_idContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_permission_name;
    }
}


export class Permission_name_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public permission_name(): Permission_nameContext[];
    public permission_name(i: number): Permission_nameContext | null;
    public permission_name(i?: number): Permission_nameContext[] | Permission_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Permission_nameContext);
        }

        return this.getRuleContext(i, Permission_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIVILEGES, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_permission_name_target;
    }
}


export class Create_resource_pool_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public POOL(): antlr.TerminalNode {
        return this.getToken(YQLParser.POOL, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public with_table_settings(): With_table_settingsContext {
        return this.getRuleContext(0, With_table_settingsContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_resource_pool_stmt;
    }
}


export class Alter_resource_pool_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public POOL(): antlr.TerminalNode {
        return this.getToken(YQLParser.POOL, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_resource_pool_action(): Alter_resource_pool_actionContext[];
    public alter_resource_pool_action(i: number): Alter_resource_pool_actionContext | null;
    public alter_resource_pool_action(i?: number): Alter_resource_pool_actionContext[] | Alter_resource_pool_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_resource_pool_actionContext);
        }

        return this.getRuleContext(i, Alter_resource_pool_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_resource_pool_stmt;
    }
}


export class Alter_resource_pool_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_resource_pool_action;
    }
}


export class Drop_resource_pool_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public POOL(): antlr.TerminalNode {
        return this.getToken(YQLParser.POOL, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_resource_pool_stmt;
    }
}


export class Create_resource_pool_classifier_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public POOL(): antlr.TerminalNode {
        return this.getToken(YQLParser.POOL, 0)!;
    }
    public CLASSIFIER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CLASSIFIER, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public with_table_settings(): With_table_settingsContext {
        return this.getRuleContext(0, With_table_settingsContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_resource_pool_classifier_stmt;
    }
}


export class Alter_resource_pool_classifier_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public POOL(): antlr.TerminalNode {
        return this.getToken(YQLParser.POOL, 0)!;
    }
    public CLASSIFIER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CLASSIFIER, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_resource_pool_classifier_action(): Alter_resource_pool_classifier_actionContext[];
    public alter_resource_pool_classifier_action(i: number): Alter_resource_pool_classifier_actionContext | null;
    public alter_resource_pool_classifier_action(i?: number): Alter_resource_pool_classifier_actionContext[] | Alter_resource_pool_classifier_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_resource_pool_classifier_actionContext);
        }

        return this.getRuleContext(i, Alter_resource_pool_classifier_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_resource_pool_classifier_stmt;
    }
}


export class Alter_resource_pool_classifier_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_set_table_setting_compat(): Alter_table_set_table_setting_compatContext | null {
        return this.getRuleContext(0, Alter_table_set_table_setting_compatContext);
    }
    public alter_table_reset_table_setting(): Alter_table_reset_table_settingContext | null {
        return this.getRuleContext(0, Alter_table_reset_table_settingContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_resource_pool_classifier_action;
    }
}


export class Drop_resource_pool_classifier_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESOURCE, 0)!;
    }
    public POOL(): antlr.TerminalNode {
        return this.getToken(YQLParser.POOL, 0)!;
    }
    public CLASSIFIER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CLASSIFIER, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_resource_pool_classifier_stmt;
    }
}


export class Create_replication_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public ASYNC(): antlr.TerminalNode {
        return this.getToken(YQLParser.ASYNC, 0)!;
    }
    public REPLICATION(): antlr.TerminalNode {
        return this.getToken(YQLParser.REPLICATION, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(YQLParser.FOR, 0)!;
    }
    public replication_target(): Replication_targetContext[];
    public replication_target(i: number): Replication_targetContext | null;
    public replication_target(i?: number): Replication_targetContext[] | Replication_targetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Replication_targetContext);
        }

        return this.getRuleContext(i, Replication_targetContext);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public replication_settings(): Replication_settingsContext {
        return this.getRuleContext(0, Replication_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_replication_stmt;
    }
}


export class Replication_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object_ref(): Object_refContext[];
    public object_ref(i: number): Object_refContext | null;
    public object_ref(i?: number): Object_refContext[] | Object_refContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Object_refContext);
        }

        return this.getRuleContext(i, Object_refContext);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_replication_target;
    }
}


export class Replication_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public replication_settings_entry(): Replication_settings_entryContext[];
    public replication_settings_entry(i: number): Replication_settings_entryContext | null;
    public replication_settings_entry(i?: number): Replication_settings_entryContext[] | Replication_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Replication_settings_entryContext);
        }

        return this.getRuleContext(i, Replication_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_replication_settings;
    }
}


export class Replication_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public STRING_VALUE(): antlr.TerminalNode {
        return this.getToken(YQLParser.STRING_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_replication_settings_entry;
    }
}


export class Alter_replication_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public ASYNC(): antlr.TerminalNode {
        return this.getToken(YQLParser.ASYNC, 0)!;
    }
    public REPLICATION(): antlr.TerminalNode {
        return this.getToken(YQLParser.REPLICATION, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public alter_replication_action(): Alter_replication_actionContext[];
    public alter_replication_action(i: number): Alter_replication_actionContext | null;
    public alter_replication_action(i?: number): Alter_replication_actionContext[] | Alter_replication_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_replication_actionContext);
        }

        return this.getRuleContext(i, Alter_replication_actionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_replication_stmt;
    }
}


export class Alter_replication_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_replication_set_setting(): Alter_replication_set_settingContext {
        return this.getRuleContext(0, Alter_replication_set_settingContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_replication_action;
    }
}


export class Alter_replication_set_settingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public replication_settings(): Replication_settingsContext {
        return this.getRuleContext(0, Replication_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_replication_set_setting;
    }
}


export class Drop_replication_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public ASYNC(): antlr.TerminalNode {
        return this.getToken(YQLParser.ASYNC, 0)!;
    }
    public REPLICATION(): antlr.TerminalNode {
        return this.getToken(YQLParser.REPLICATION, 0)!;
    }
    public object_ref(): Object_refContext {
        return this.getRuleContext(0, Object_refContext)!;
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_replication_stmt;
    }
}


export class Action_or_subquery_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_bind_parameter(): Opt_bind_parameterContext[];
    public opt_bind_parameter(i: number): Opt_bind_parameterContext | null;
    public opt_bind_parameter(i?: number): Opt_bind_parameterContext[] | Opt_bind_parameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_bind_parameterContext);
        }

        return this.getRuleContext(i, Opt_bind_parameterContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_action_or_subquery_args;
    }
}


export class Define_action_or_subquery_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFINE(): antlr.TerminalNode[];
    public DEFINE(i: number): antlr.TerminalNode | null;
    public DEFINE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.DEFINE);
    	} else {
    		return this.getToken(YQLParser.DEFINE, i);
    	}
    }
    public bind_parameter(): Bind_parameterContext {
        return this.getRuleContext(0, Bind_parameterContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public define_action_or_subquery_body(): Define_action_or_subquery_bodyContext {
        return this.getRuleContext(0, Define_action_or_subquery_bodyContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(YQLParser.END, 0)!;
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ACTION, 0);
    }
    public SUBQUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBQUERY, 0);
    }
    public action_or_subquery_args(): Action_or_subquery_argsContext | null {
        return this.getRuleContext(0, Action_or_subquery_argsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_define_action_or_subquery_stmt;
    }
}


export class Define_action_or_subquery_bodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.SEMICOLON);
    	} else {
    		return this.getToken(YQLParser.SEMICOLON, i);
    	}
    }
    public sql_stmt_core(): Sql_stmt_coreContext[];
    public sql_stmt_core(i: number): Sql_stmt_coreContext | null;
    public sql_stmt_core(i?: number): Sql_stmt_coreContext[] | Sql_stmt_coreContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sql_stmt_coreContext);
        }

        return this.getRuleContext(i, Sql_stmt_coreContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_define_action_or_subquery_body;
    }
}


export class If_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF(): antlr.TerminalNode {
        return this.getToken(YQLParser.IF, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public do_stmt(): Do_stmtContext[];
    public do_stmt(i: number): Do_stmtContext | null;
    public do_stmt(i?: number): Do_stmtContext[] | Do_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Do_stmtContext);
        }

        return this.getRuleContext(i, Do_stmtContext);
    }
    public EVALUATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EVALUATE, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_if_stmt;
    }
}


export class For_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(YQLParser.FOR, 0)!;
    }
    public bind_parameter(): Bind_parameterContext {
        return this.getRuleContext(0, Bind_parameterContext)!;
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(YQLParser.IN, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public do_stmt(): Do_stmtContext[];
    public do_stmt(i: number): Do_stmtContext | null;
    public do_stmt(i?: number): Do_stmtContext[] | Do_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Do_stmtContext);
        }

        return this.getRuleContext(i, Do_stmtContext);
    }
    public EVALUATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EVALUATE, 0);
    }
    public PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARALLEL, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_for_stmt;
    }
}


export class Table_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_key(): Table_keyContext | null {
        return this.getRuleContext(0, Table_keyContext);
    }
    public an_id_expr(): An_id_exprContext | null {
        return this.getRuleContext(0, An_id_exprContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public cluster_expr(): Cluster_exprContext | null {
        return this.getRuleContext(0, Cluster_exprContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public table_hints(): Table_hintsContext | null {
        return this.getRuleContext(0, Table_hintsContext);
    }
    public table_arg(): Table_argContext[];
    public table_arg(i: number): Table_argContext | null;
    public table_arg(i?: number): Table_argContext[] | Table_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_argContext);
        }

        return this.getRuleContext(i, Table_argContext);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_ref;
    }
}


export class Table_keyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_table_or_type(): Id_table_or_typeContext {
        return this.getRuleContext(0, Id_table_or_typeContext)!;
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_key;
    }
}


export class Table_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public named_expr(): Named_exprContext {
        return this.getRuleContext(0, Named_exprContext)!;
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_arg;
    }
}


export class Table_hintsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public table_hint(): Table_hintContext[];
    public table_hint(i: number): Table_hintContext | null;
    public table_hint(i?: number): Table_hintContext[] | Table_hintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_hintContext);
        }

        return this.getRuleContext(i, Table_hintContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_hints;
    }
}


export class Table_hintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_hint(): An_id_hintContext | null {
        return this.getRuleContext(0, An_id_hintContext);
    }
    public EQUALS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EQUALS, 0);
    }
    public type_name_tag(): Type_name_tagContext[];
    public type_name_tag(i: number): Type_name_tagContext | null;
    public type_name_tag(i?: number): Type_name_tagContext[] | Type_name_tagContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Type_name_tagContext);
        }

        return this.getRuleContext(i, Type_name_tagContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public type_name_or_bind(): Type_name_or_bindContext | null {
        return this.getRuleContext(0, Type_name_or_bindContext);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SCHEMA, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMNS, 0);
    }
    public struct_arg_positional(): Struct_arg_positionalContext[];
    public struct_arg_positional(i: number): Struct_arg_positionalContext | null;
    public struct_arg_positional(i?: number): Struct_arg_positionalContext[] | Struct_arg_positionalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Struct_arg_positionalContext);
        }

        return this.getRuleContext(i, Struct_arg_positionalContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_table_hint;
    }
}


export class Object_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_or_at(): Id_or_atContext {
        return this.getRuleContext(0, Id_or_atContext)!;
    }
    public cluster_expr(): Cluster_exprContext | null {
        return this.getRuleContext(0, Cluster_exprContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_object_ref;
    }
}


export class Simple_table_ref_coreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object_ref(): Object_refContext | null {
        return this.getRuleContext(0, Object_refContext);
    }
    public bind_parameter(): Bind_parameterContext | null {
        return this.getRuleContext(0, Bind_parameterContext);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_simple_table_ref_core;
    }
}


export class Simple_table_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simple_table_ref_core(): Simple_table_ref_coreContext {
        return this.getRuleContext(0, Simple_table_ref_coreContext)!;
    }
    public table_hints(): Table_hintsContext | null {
        return this.getRuleContext(0, Table_hintsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_simple_table_ref;
    }
}


export class Into_simple_table_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public ERASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERASE, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public pure_column_list(): Pure_column_listContext | null {
        return this.getRuleContext(0, Pure_column_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_into_simple_table_ref;
    }
}


export class Delete_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(YQLParser.DELETE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(YQLParser.FROM, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WHERE, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public into_values_source(): Into_values_sourceContext | null {
        return this.getRuleContext(0, Into_values_sourceContext);
    }
    public returning_columns_list(): Returning_columns_listContext | null {
        return this.getRuleContext(0, Returning_columns_listContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_delete_stmt;
    }
}


export class Update_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.UPDATE, 0)!;
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SET, 0);
    }
    public set_clause_choice(): Set_clause_choiceContext | null {
        return this.getRuleContext(0, Set_clause_choiceContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public into_values_source(): Into_values_sourceContext | null {
        return this.getRuleContext(0, Into_values_sourceContext);
    }
    public returning_columns_list(): Returning_columns_listContext | null {
        return this.getRuleContext(0, Returning_columns_listContext);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WHERE, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_update_stmt;
    }
}


export class Set_clause_choiceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_clause_list(): Set_clause_listContext | null {
        return this.getRuleContext(0, Set_clause_listContext);
    }
    public multiple_column_assignment(): Multiple_column_assignmentContext | null {
        return this.getRuleContext(0, Multiple_column_assignmentContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_clause_choice;
    }
}


export class Set_clause_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_clause(): Set_clauseContext[];
    public set_clause(i: number): Set_clauseContext | null;
    public set_clause(i?: number): Set_clauseContext[] | Set_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Set_clauseContext);
        }

        return this.getRuleContext(i, Set_clauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_clause_list;
    }
}


export class Set_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_target(): Set_targetContext {
        return this.getRuleContext(0, Set_targetContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_clause;
    }
}


export class Set_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_target;
    }
}


export class Multiple_column_assignmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_target_list(): Set_target_listContext {
        return this.getRuleContext(0, Set_target_listContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public simple_values_source(): Simple_values_sourceContext {
        return this.getRuleContext(0, Simple_values_sourceContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_multiple_column_assignment;
    }
}


export class Set_target_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public set_target(): Set_targetContext[];
    public set_target(i: number): Set_targetContext | null;
    public set_target(i?: number): Set_targetContext[] | Set_targetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Set_targetContext);
        }

        return this.getRuleContext(i, Set_targetContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_set_target_list;
    }
}


export class Create_topic_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(YQLParser.CREATE, 0)!;
    }
    public TOPIC(): antlr.TerminalNode {
        return this.getToken(YQLParser.TOPIC, 0)!;
    }
    public topic_ref(): Topic_refContext {
        return this.getRuleContext(0, Topic_refContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public create_topic_entries(): Create_topic_entriesContext | null {
        return this.getRuleContext(0, Create_topic_entriesContext);
    }
    public with_topic_settings(): With_topic_settingsContext | null {
        return this.getRuleContext(0, With_topic_settingsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_topic_stmt;
    }
}


export class Create_topic_entriesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public create_topic_entry(): Create_topic_entryContext[];
    public create_topic_entry(i: number): Create_topic_entryContext | null;
    public create_topic_entry(i?: number): Create_topic_entryContext[] | Create_topic_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Create_topic_entryContext);
        }

        return this.getRuleContext(i, Create_topic_entryContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_topic_entries;
    }
}


export class Create_topic_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public topic_create_consumer_entry(): Topic_create_consumer_entryContext {
        return this.getRuleContext(0, Topic_create_consumer_entryContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_create_topic_entry;
    }
}


export class With_topic_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public topic_settings(): Topic_settingsContext {
        return this.getRuleContext(0, Topic_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_with_topic_settings;
    }
}


export class Alter_topic_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public TOPIC(): antlr.TerminalNode {
        return this.getToken(YQLParser.TOPIC, 0)!;
    }
    public topic_ref(): Topic_refContext {
        return this.getRuleContext(0, Topic_refContext)!;
    }
    public alter_topic_action(): Alter_topic_actionContext[];
    public alter_topic_action(i: number): Alter_topic_actionContext | null;
    public alter_topic_action(i?: number): Alter_topic_actionContext[] | Alter_topic_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_topic_actionContext);
        }

        return this.getRuleContext(i, Alter_topic_actionContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_stmt;
    }
}


export class Alter_topic_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_topic_add_consumer(): Alter_topic_add_consumerContext | null {
        return this.getRuleContext(0, Alter_topic_add_consumerContext);
    }
    public alter_topic_alter_consumer(): Alter_topic_alter_consumerContext | null {
        return this.getRuleContext(0, Alter_topic_alter_consumerContext);
    }
    public alter_topic_drop_consumer(): Alter_topic_drop_consumerContext | null {
        return this.getRuleContext(0, Alter_topic_drop_consumerContext);
    }
    public alter_topic_set_settings(): Alter_topic_set_settingsContext | null {
        return this.getRuleContext(0, Alter_topic_set_settingsContext);
    }
    public alter_topic_reset_settings(): Alter_topic_reset_settingsContext | null {
        return this.getRuleContext(0, Alter_topic_reset_settingsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_action;
    }
}


export class Alter_topic_add_consumerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(YQLParser.ADD, 0)!;
    }
    public topic_create_consumer_entry(): Topic_create_consumer_entryContext {
        return this.getRuleContext(0, Topic_create_consumer_entryContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_add_consumer;
    }
}


export class Topic_create_consumer_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONSUMER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CONSUMER, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public topic_consumer_with_settings(): Topic_consumer_with_settingsContext | null {
        return this.getRuleContext(0, Topic_consumer_with_settingsContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_create_consumer_entry;
    }
}


export class Alter_topic_alter_consumerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.ALTER, 0)!;
    }
    public CONSUMER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CONSUMER, 0)!;
    }
    public topic_consumer_ref(): Topic_consumer_refContext {
        return this.getRuleContext(0, Topic_consumer_refContext)!;
    }
    public alter_topic_alter_consumer_entry(): Alter_topic_alter_consumer_entryContext {
        return this.getRuleContext(0, Alter_topic_alter_consumer_entryContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_alter_consumer;
    }
}


export class Alter_topic_alter_consumer_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public topic_alter_consumer_set(): Topic_alter_consumer_setContext | null {
        return this.getRuleContext(0, Topic_alter_consumer_setContext);
    }
    public topic_alter_consumer_reset(): Topic_alter_consumer_resetContext | null {
        return this.getRuleContext(0, Topic_alter_consumer_resetContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_alter_consumer_entry;
    }
}


export class Alter_topic_drop_consumerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public CONSUMER(): antlr.TerminalNode {
        return this.getToken(YQLParser.CONSUMER, 0)!;
    }
    public topic_consumer_ref(): Topic_consumer_refContext {
        return this.getRuleContext(0, Topic_consumer_refContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_drop_consumer;
    }
}


export class Topic_alter_consumer_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public topic_consumer_settings(): Topic_consumer_settingsContext {
        return this.getRuleContext(0, Topic_consumer_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_alter_consumer_set;
    }
}


export class Topic_alter_consumer_resetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext[];
    public an_id(i: number): An_idContext | null;
    public an_id(i?: number): An_idContext[] | An_idContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_idContext);
        }

        return this.getRuleContext(i, An_idContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_alter_consumer_reset;
    }
}


export class Alter_topic_set_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(YQLParser.SET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public topic_settings(): Topic_settingsContext {
        return this.getRuleContext(0, Topic_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_set_settings;
    }
}


export class Alter_topic_reset_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(YQLParser.RESET, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public an_id_pure(): An_id_pureContext[];
    public an_id_pure(i: number): An_id_pureContext | null;
    public an_id_pure(i?: number): An_id_pureContext[] | An_id_pureContext | null {
        if (i === undefined) {
            return this.getRuleContexts(An_id_pureContext);
        }

        return this.getRuleContext(i, An_id_pureContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_alter_topic_reset_settings;
    }
}


export class Drop_topic_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(YQLParser.DROP, 0)!;
    }
    public TOPIC(): antlr.TerminalNode {
        return this.getToken(YQLParser.TOPIC, 0)!;
    }
    public topic_ref(): Topic_refContext {
        return this.getRuleContext(0, Topic_refContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_drop_topic_stmt;
    }
}


export class Topic_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public topic_settings_entry(): Topic_settings_entryContext[];
    public topic_settings_entry(i: number): Topic_settings_entryContext | null;
    public topic_settings_entry(i?: number): Topic_settings_entryContext[] | Topic_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Topic_settings_entryContext);
        }

        return this.getRuleContext(i, Topic_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_settings;
    }
}


export class Topic_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public topic_setting_value(): Topic_setting_valueContext {
        return this.getRuleContext(0, Topic_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_settings_entry;
    }
}


export class Topic_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_setting_value;
    }
}


export class Topic_consumer_with_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(YQLParser.WITH, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public topic_consumer_settings(): Topic_consumer_settingsContext {
        return this.getRuleContext(0, Topic_consumer_settingsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_with_settings;
    }
}


export class Topic_consumer_settingsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public topic_consumer_settings_entry(): Topic_consumer_settings_entryContext[];
    public topic_consumer_settings_entry(i: number): Topic_consumer_settings_entryContext | null;
    public topic_consumer_settings_entry(i?: number): Topic_consumer_settings_entryContext[] | Topic_consumer_settings_entryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Topic_consumer_settings_entryContext);
        }

        return this.getRuleContext(i, Topic_consumer_settings_entryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_settings;
    }
}


export class Topic_consumer_settings_entryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public topic_consumer_setting_value(): Topic_consumer_setting_valueContext {
        return this.getRuleContext(0, Topic_consumer_setting_valueContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_settings_entry;
    }
}


export class Topic_consumer_setting_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_setting_value;
    }
}


export class Topic_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext {
        return this.getRuleContext(0, An_idContext)!;
    }
    public cluster_expr(): Cluster_exprContext | null {
        return this.getRuleContext(0, Cluster_exprContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_ref;
    }
}


export class Topic_consumer_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_pure(): An_id_pureContext {
        return this.getRuleContext(0, An_id_pureContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_topic_consumer_ref;
    }
}


export class Null_treatmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESPECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESPECT, 0);
    }
    public NULLS(): antlr.TerminalNode {
        return this.getToken(YQLParser.NULLS, 0)!;
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_null_treatment;
    }
}


export class Filter_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(YQLParser.FILTER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(YQLParser.WHERE, 0)!;
    }
    public expr(): ExprContext {
        return this.getRuleContext(0, ExprContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_filter_clause;
    }
}


export class Window_name_or_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_name(): Window_nameContext | null {
        return this.getRuleContext(0, Window_nameContext);
    }
    public window_specification(): Window_specificationContext | null {
        return this.getRuleContext(0, Window_specificationContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_name_or_specification;
    }
}


export class Window_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_window(): An_id_windowContext {
        return this.getRuleContext(0, An_id_windowContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_name;
    }
}


export class Window_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WINDOW(): antlr.TerminalNode {
        return this.getToken(YQLParser.WINDOW, 0)!;
    }
    public window_definition_list(): Window_definition_listContext {
        return this.getRuleContext(0, Window_definition_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_clause;
    }
}


export class Window_definition_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_definition(): Window_definitionContext[];
    public window_definition(i: number): Window_definitionContext | null;
    public window_definition(i?: number): Window_definitionContext[] | Window_definitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_definitionContext);
        }

        return this.getRuleContext(i, Window_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_definition_list;
    }
}


export class Window_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public new_window_name(): New_window_nameContext {
        return this.getRuleContext(0, New_window_nameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(YQLParser.AS, 0)!;
    }
    public window_specification(): Window_specificationContext {
        return this.getRuleContext(0, Window_specificationContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_definition;
    }
}


export class New_window_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_name(): Window_nameContext {
        return this.getRuleContext(0, Window_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_new_window_name;
    }
}


export class Window_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.LPAREN, 0)!;
    }
    public window_specification_details(): Window_specification_detailsContext {
        return this.getRuleContext(0, Window_specification_detailsContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(YQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_specification;
    }
}


export class Window_specification_detailsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public existing_window_name(): Existing_window_nameContext | null {
        return this.getRuleContext(0, Existing_window_nameContext);
    }
    public window_partition_clause(): Window_partition_clauseContext | null {
        return this.getRuleContext(0, Window_partition_clauseContext);
    }
    public window_order_clause(): Window_order_clauseContext | null {
        return this.getRuleContext(0, Window_order_clauseContext);
    }
    public window_frame_clause(): Window_frame_clauseContext | null {
        return this.getRuleContext(0, Window_frame_clauseContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_specification_details;
    }
}


export class Existing_window_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_name(): Window_nameContext {
        return this.getRuleContext(0, Window_nameContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_existing_window_name;
    }
}


export class Window_partition_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(YQLParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(YQLParser.BY, 0)!;
    }
    public named_expr_list(): Named_expr_listContext {
        return this.getRuleContext(0, Named_expr_listContext)!;
    }
    public COMPACT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMPACT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_partition_clause;
    }
}


export class Window_order_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public order_by_clause(): Order_by_clauseContext {
        return this.getRuleContext(0, Order_by_clauseContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_order_clause;
    }
}


export class Window_frame_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_frame_units(): Window_frame_unitsContext {
        return this.getRuleContext(0, Window_frame_unitsContext)!;
    }
    public window_frame_extent(): Window_frame_extentContext {
        return this.getRuleContext(0, Window_frame_extentContext)!;
    }
    public window_frame_exclusion(): Window_frame_exclusionContext | null {
        return this.getRuleContext(0, Window_frame_exclusionContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_clause;
    }
}


export class Window_frame_unitsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROWS, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RANGE, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUPS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_units;
    }
}


export class Window_frame_extentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_frame_bound(): Window_frame_boundContext | null {
        return this.getRuleContext(0, Window_frame_boundContext);
    }
    public window_frame_between(): Window_frame_betweenContext | null {
        return this.getRuleContext(0, Window_frame_betweenContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_extent;
    }
}


export class Window_frame_betweenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(YQLParser.BETWEEN, 0)!;
    }
    public window_frame_bound(): Window_frame_boundContext[];
    public window_frame_bound(i: number): Window_frame_boundContext | null;
    public window_frame_bound(i?: number): Window_frame_boundContext[] | Window_frame_boundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_frame_boundContext);
        }

        return this.getRuleContext(i, Window_frame_boundContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(YQLParser.AND, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_between;
    }
}


export class Window_frame_boundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOLLOWING, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNBOUNDED, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_bound;
    }
}


export class Window_frame_exclusionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXCLUDE(): antlr.TerminalNode {
        return this.getToken(YQLParser.EXCLUDE, 0)!;
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUP, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TIES, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NO, 0);
    }
    public OTHERS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OTHERS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_window_frame_exclusion;
    }
}


export class Use_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(YQLParser.USE, 0)!;
    }
    public cluster_expr(): Cluster_exprContext {
        return this.getRuleContext(0, Cluster_exprContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_use_stmt;
    }
}


export class Subselect_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public select_stmt(): Select_stmtContext | null {
        return this.getRuleContext(0, Select_stmtContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public select_unparenthesized_stmt(): Select_unparenthesized_stmtContext | null {
        return this.getRuleContext(0, Select_unparenthesized_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_subselect_stmt;
    }
}


export class Named_nodes_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bind_parameter_list(): Bind_parameter_listContext {
        return this.getRuleContext(0, Bind_parameter_listContext)!;
    }
    public EQUALS(): antlr.TerminalNode {
        return this.getToken(YQLParser.EQUALS, 0)!;
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(0, ExprContext);
    }
    public subselect_stmt(): Subselect_stmtContext | null {
        return this.getRuleContext(0, Subselect_stmtContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_named_nodes_stmt;
    }
}


export class Commit_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMIT(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMMIT, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_commit_stmt;
    }
}


export class Rollback_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLLBACK(): antlr.TerminalNode {
        return this.getToken(YQLParser.ROLLBACK, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_rollback_stmt;
    }
}


export class Analyze_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simple_table_ref(): Simple_table_refContext {
        return this.getRuleContext(0, Simple_table_refContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LPAREN, 0);
    }
    public column_list(): Column_listContext | null {
        return this.getRuleContext(0, Column_listContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_analyze_table;
    }
}


export class Analyze_table_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public analyze_table(): Analyze_tableContext[];
    public analyze_table(i: number): Analyze_tableContext | null;
    public analyze_table(i?: number): Analyze_tableContext[] | Analyze_tableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Analyze_tableContext);
        }

        return this.getRuleContext(i, Analyze_tableContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(YQLParser.COMMA);
    	} else {
    		return this.getToken(YQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_analyze_table_list;
    }
}


export class Analyze_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(YQLParser.ANALYZE, 0)!;
    }
    public analyze_table_list(): Analyze_table_listContext {
        return this.getRuleContext(0, Analyze_table_listContext)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_analyze_stmt;
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ID_PLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ID_PLAIN, 0);
    }
    public ID_QUOTED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ID_QUOTED, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_identifier;
    }
}


export class IdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword(): KeywordContext | null {
        return this.getRuleContext(0, KeywordContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id;
    }
}


export class Id_schemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_schema;
    }
}


export class Id_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_expr;
    }
}


export class Id_expr_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_expr_in;
    }
}


export class Id_windowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext | null {
        return this.getRuleContext(0, Keyword_table_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_window;
    }
}


export class Id_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_table;
    }
}


export class Id_withoutContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext | null {
        return this.getRuleContext(0, Keyword_table_uncompatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_without;
    }
}


export class Id_hintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext | null {
        return this.getRuleContext(0, Keyword_table_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_hint;
    }
}


export class Id_as_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public keyword_as_compat(): Keyword_as_compatContext | null {
        return this.getRuleContext(0, Keyword_as_compatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_as_compat;
    }
}


export class An_idContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id;
    }
}


export class An_id_or_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_or_type(): Id_or_typeContext | null {
        return this.getRuleContext(0, Id_or_typeContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_or_type;
    }
}


export class An_id_schemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_schema(): Id_schemaContext | null {
        return this.getRuleContext(0, Id_schemaContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_schema;
    }
}


export class An_id_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_expr(): Id_exprContext | null {
        return this.getRuleContext(0, Id_exprContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_expr;
    }
}


export class An_id_expr_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_expr_in(): Id_expr_inContext | null {
        return this.getRuleContext(0, Id_expr_inContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_expr_in;
    }
}


export class An_id_windowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_window(): Id_windowContext | null {
        return this.getRuleContext(0, Id_windowContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_window;
    }
}


export class An_id_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_table(): Id_tableContext | null {
        return this.getRuleContext(0, Id_tableContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_table;
    }
}


export class An_id_withoutContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_without(): Id_withoutContext | null {
        return this.getRuleContext(0, Id_withoutContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_without;
    }
}


export class An_id_hintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_hint(): Id_hintContext | null {
        return this.getRuleContext(0, Id_hintContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_hint;
    }
}


export class An_id_pureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_pure;
    }
}


export class An_id_as_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_as_compat(): Id_as_compatContext | null {
        return this.getRuleContext(0, Id_as_compatContext);
    }
    public STRING_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRING_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_an_id_as_compat;
    }
}


export class View_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIMARY, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.KEY, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_view_name;
    }
}


export class Opt_id_prefixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_id_prefix;
    }
}


export class Cluster_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pure_column_or_named(): Pure_column_or_namedContext | null {
        return this.getRuleContext(0, Pure_column_or_namedContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASTERISK, 0);
    }
    public an_id(): An_idContext | null {
        return this.getRuleContext(0, An_idContext);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLON, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_cluster_expr;
    }
}


export class Id_or_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id(): IdContext | null {
        return this.getRuleContext(0, IdContext);
    }
    public type_id(): Type_idContext | null {
        return this.getRuleContext(0, Type_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_or_type;
    }
}


export class Opt_id_prefix_or_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext | null {
        return this.getRuleContext(0, An_id_or_typeContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_opt_id_prefix_or_type;
    }
}


export class Id_or_atContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_or_type(): An_id_or_typeContext {
        return this.getRuleContext(0, An_id_or_typeContext)!;
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_or_at;
    }
}


export class Id_table_or_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public an_id_table(): An_id_tableContext | null {
        return this.getRuleContext(0, An_id_tableContext);
    }
    public type_id(): Type_idContext | null {
        return this.getRuleContext(0, Type_idContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_table_or_type;
    }
}


export class Id_table_or_atContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_table_or_type(): Id_table_or_typeContext {
        return this.getRuleContext(0, Id_table_or_typeContext)!;
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_id_table_or_at;
    }
}


export class KeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyword_compat(): Keyword_compatContext | null {
        return this.getRuleContext(0, Keyword_compatContext);
    }
    public keyword_expr_uncompat(): Keyword_expr_uncompatContext | null {
        return this.getRuleContext(0, Keyword_expr_uncompatContext);
    }
    public keyword_table_uncompat(): Keyword_table_uncompatContext | null {
        return this.getRuleContext(0, Keyword_table_uncompatContext);
    }
    public keyword_select_uncompat(): Keyword_select_uncompatContext | null {
        return this.getRuleContext(0, Keyword_select_uncompatContext);
    }
    public keyword_alter_uncompat(): Keyword_alter_uncompatContext | null {
        return this.getRuleContext(0, Keyword_alter_uncompatContext);
    }
    public keyword_in_uncompat(): Keyword_in_uncompatContext | null {
        return this.getRuleContext(0, Keyword_in_uncompatContext);
    }
    public keyword_window_uncompat(): Keyword_window_uncompatContext | null {
        return this.getRuleContext(0, Keyword_window_uncompatContext);
    }
    public keyword_hint_uncompat(): Keyword_hint_uncompatContext | null {
        return this.getRuleContext(0, Keyword_hint_uncompatContext);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword;
    }
}


export class Keyword_expr_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYMMETRIC, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BETWEEN, 0);
    }
    public BITCAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BITCAST, 0);
    }
    public CASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CASE, 0);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CAST, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CUBE, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_DATE, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_TIME, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT_TIMESTAMP, 0);
    }
    public EMPTY_ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY_ACTION, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXISTS, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FROM, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FULL, 0);
    }
    public HOP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HOP, 0);
    }
    public JSON_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JSON_EXISTS, 0);
    }
    public JSON_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JSON_VALUE, 0);
    }
    public JSON_QUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JSON_QUERY, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LOCAL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOT, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULL, 0);
    }
    public PROCESS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PROCESS, 0);
    }
    public REDUCE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REDUCE, 0);
    }
    public RETURN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RETURN, 0);
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RETURNING, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROLLUP, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SELECT, 0);
    }
    public SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYMMETRIC, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNBOUNDED, 0);
    }
    public WHEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WHEN, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WHERE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_expr_uncompat;
    }
}


export class Keyword_table_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANY, 0);
    }
    public ERASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERASE, 0);
    }
    public STREAM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STREAM, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_table_uncompat;
    }
}


export class Keyword_select_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALL, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AS, 0);
    }
    public ASSUME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASSUME, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISTINCT, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCEPT, 0);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HAVING, 0);
    }
    public INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTERSECT, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIMIT, 0);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNION, 0);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WINDOW, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_select_uncompat;
    }
}


export class Keyword_alter_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(YQLParser.COLUMN, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_alter_uncompat;
    }
}


export class Keyword_in_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMPACT(): antlr.TerminalNode {
        return this.getToken(YQLParser.COMPACT, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_in_uncompat;
    }
}


export class Keyword_window_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUPS, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RANGE, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROWS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_window_uncompat;
    }
}


export class Keyword_hint_uncompatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SCHEMA, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLUMNS, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_hint_uncompat;
    }
}


export class Keyword_as_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ABORT, 0);
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ACTION, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ADD, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AFTER, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALTER, 0);
    }
    public ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANALYZE, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AND, 0);
    }
    public ANSI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANSI, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARRAY, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASC, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYNC, 0);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTACH, 0);
    }
    public ATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTRIBUTES, 0);
    }
    public AUTOINCREMENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AUTOINCREMENT, 0);
    }
    public BACKUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BACKUP, 0);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BEFORE, 0);
    }
    public BEGIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BEGIN, 0);
    }
    public BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BERNOULLI, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CASCADE, 0);
    }
    public CHANGEFEED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CHANGEFEED, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CHECK, 0);
    }
    public CLASSIFIER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CLASSIFIER, 0);
    }
    public COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLLECTION, 0);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMIT, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONDITIONAL, 0);
    }
    public CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONFLICT, 0);
    }
    public CONNECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONNECT, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONSTRAINT, 0);
    }
    public CONSUMER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONSUMER, 0);
    }
    public COVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COVER, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CREATE, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT, 0);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATA, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATABASE, 0);
    }
    public DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DECIMAL, 0);
    }
    public DECLARE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DECLARE, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFERRABLE, 0);
    }
    public DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFERRED, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DELETE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESC, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESCRIBE, 0);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DETACH, 0);
    }
    public DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIRECTORY, 0);
    }
    public DISABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISABLE, 0);
    }
    public DISCARD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISCARD, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DROP, 0);
    }
    public EACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EACH, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENCRYPTED, 0);
    }
    public END(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.END, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ESCAPE, 0);
    }
    public EVALUATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EVALUATE, 0);
    }
    public EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUDE, 0);
    }
    public EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUSIVE, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPLAIN, 0);
    }
    public EXPORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPORT, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public FAIL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FAIL, 0);
    }
    public FAMILY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FAMILY, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FILTER, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FIRST, 0);
    }
    public FLATTEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FLATTEN, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOLLOWING, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOR, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOREIGN, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FUNCTION, 0);
    }
    public GLOB(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GLOB, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GRANT, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUP, 0);
    }
    public GROUPING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUPING, 0);
    }
    public HASH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HASH, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ILIKE, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IMMEDIATE, 0);
    }
    public IMPORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IMPORT, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IN, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INDEX, 0);
    }
    public INDEXED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INDEXED, 0);
    }
    public INHERITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INHERITS, 0);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIAL, 0);
    }
    public INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIALLY, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSTEAD, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTO, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IS, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LAST, 0);
    }
    public LEGACY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEGACY, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIKE, 0);
    }
    public MANAGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MANAGE, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCHES, 0);
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH_RECOGNIZE, 0);
    }
    public MEASURES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MEASURES, 0);
    }
    public MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MICROSECONDS, 0);
    }
    public MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MILLISECONDS, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MODIFY, 0);
    }
    public NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NANOSECONDS, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NEXT, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NO, 0);
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULLS, 0);
    }
    public OBJECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OBJECT, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OF, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OFFSET, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OMIT, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONE, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONLY, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTION, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ORDER, 0);
    }
    public OTHERS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OTHERS, 0);
    }
    public PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARALLEL, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARTITION, 0);
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSING, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSWORD, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PAST, 0);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PATTERN, 0);
    }
    public PER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PER, 0);
    }
    public PERMUTE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PERMUTE, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLAN, 0);
    }
    public POOL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.POOL, 0);
    }
    public PRAGMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRAGMA, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRECEDING, 0);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIMARY, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIVILEGES, 0);
    }
    public QUEUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUEUE, 0);
    }
    public RAISE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RAISE, 0);
    }
    public REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REFERENCES, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REGEXP, 0);
    }
    public REINDEX(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REINDEX, 0);
    }
    public RELEASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RELEASE, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REMOVE, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RENAME, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLICATION, 0);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESET, 0);
    }
    public RESPECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESPECT, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESTRICT, 0);
    }
    public REVERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVERT, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVOKE, 0);
    }
    public RLIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RLIKE, 0);
    }
    public ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROLLBACK, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SAVEPOINT, 0);
    }
    public SECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SECONDS, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEEK, 0);
    }
    public SETS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SETS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SHOW, 0);
    }
    public TSKIP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TSKIP, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SOURCE, 0);
    }
    public SUBQUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBQUERY, 0);
    }
    public SUBSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBSET, 0);
    }
    public SYMBOLS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYMBOLS, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYNC, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYSTEM, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLES, 0);
    }
    public TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESAMPLE, 0);
    }
    public TABLESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESTORE, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMP, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMPORARY, 0);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.THEN, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TIES, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public TOPIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TOPIC, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRANSACTION, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRIGGER, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TYPE, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNCONDITIONAL, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNIQUE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNKNOWN, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNMATCHED, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPDATE, 0);
    }
    public UPSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPSERT, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public VACUUM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VACUUM, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VALUES, 0);
    }
    public VIRTUAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIRTUAL, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WRAPPER, 0);
    }
    public XOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.XOR, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_as_compat;
    }
}


export class Keyword_compatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ABORT, 0);
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ACTION, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ADD, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AFTER, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ALTER, 0);
    }
    public ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANALYZE, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AND, 0);
    }
    public ANSI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ANSI, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ARRAY, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASC, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ASYNC, 0);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTACH, 0);
    }
    public ATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ATTRIBUTES, 0);
    }
    public AUTOINCREMENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.AUTOINCREMENT, 0);
    }
    public BACKUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BACKUP, 0);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BEFORE, 0);
    }
    public BEGIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BEGIN, 0);
    }
    public BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BERNOULLI, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.BY, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CASCADE, 0);
    }
    public CHANGEFEED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CHANGEFEED, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CHECK, 0);
    }
    public CLASSIFIER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CLASSIFIER, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLLATE, 0);
    }
    public COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COLLECTION, 0);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COMMIT, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONDITIONAL, 0);
    }
    public CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONFLICT, 0);
    }
    public CONNECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONNECT, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONSTRAINT, 0);
    }
    public CONSUMER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CONSUMER, 0);
    }
    public COVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.COVER, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CREATE, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CROSS, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CURRENT, 0);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATA, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DATABASE, 0);
    }
    public DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DECIMAL, 0);
    }
    public DECLARE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DECLARE, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFAULT, 0);
    }
    public DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFERRABLE, 0);
    }
    public DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFERRED, 0);
    }
    public DEFINE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DEFINE, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DELETE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESC, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DESCRIBE, 0);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DETACH, 0);
    }
    public DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIRECTORY, 0);
    }
    public DISABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISABLE, 0);
    }
    public DISCARD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DISCARD, 0);
    }
    public DO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DO, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DROP, 0);
    }
    public EACH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EACH, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ELSE, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EMPTY, 0);
    }
    public ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENCRYPTED, 0);
    }
    public END(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.END, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ERROR, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ESCAPE, 0);
    }
    public EVALUATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EVALUATE, 0);
    }
    public EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUDE, 0);
    }
    public EXCLUSION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUSION, 0);
    }
    public EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXCLUSIVE, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPLAIN, 0);
    }
    public EXPORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXPORT, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.EXTERNAL, 0);
    }
    public FAIL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FAIL, 0);
    }
    public FAMILY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FAMILY, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FILTER, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FIRST, 0);
    }
    public FLATTEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FLATTEN, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOLLOWING, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOR, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FOREIGN, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FUNCTION, 0);
    }
    public GLOB(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GLOB, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GRANT, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUP, 0);
    }
    public GROUPING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.GROUPING, 0);
    }
    public HASH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.HASH, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IF, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IGNORE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ILIKE, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IMMEDIATE, 0);
    }
    public IMPORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IMPORT, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IN, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INDEX, 0);
    }
    public INDEXED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INDEXED, 0);
    }
    public INHERITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INHERITS, 0);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIAL, 0);
    }
    public INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INITIALLY, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INNER, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSERT, 0);
    }
    public INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INSTEAD, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTO, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.IS, 0);
    }
    public ISNULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ISNULL, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.JOIN, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.KEY, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LAST, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEFT, 0);
    }
    public LEGACY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LEGACY, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIKE, 0);
    }
    public MANAGE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MANAGE, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCHES, 0);
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MATCH_RECOGNIZE, 0);
    }
    public MEASURES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MEASURES, 0);
    }
    public MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MICROSECONDS, 0);
    }
    public MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MILLISECONDS, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.MODIFY, 0);
    }
    public NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NANOSECONDS, 0);
    }
    public NATURAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NATURAL, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NEXT, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NO, 0);
    }
    public NOTNULL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NOTNULL, 0);
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.NULLS, 0);
    }
    public OBJECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OBJECT, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OF, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OFFSET, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OMIT, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ON, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONE, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ONLY, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTION, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OR, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ORDER, 0);
    }
    public OTHERS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OTHERS, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OUTER, 0);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OVER, 0);
    }
    public PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARALLEL, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PARTITION, 0);
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSING, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PASSWORD, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PAST, 0);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PATTERN, 0);
    }
    public PER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PER, 0);
    }
    public PERMUTE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PERMUTE, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PLAN, 0);
    }
    public POOL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.POOL, 0);
    }
    public PRAGMA(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRAGMA, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRECEDING, 0);
    }
    public PRESORT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRESORT, 0);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIMARY, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.PRIVILEGES, 0);
    }
    public QUEUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.QUEUE, 0);
    }
    public RAISE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RAISE, 0);
    }
    public REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REFERENCES, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REGEXP, 0);
    }
    public REINDEX(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REINDEX, 0);
    }
    public RELEASE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RELEASE, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REMOVE, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RENAME, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLACE, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REPLICATION, 0);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESET, 0);
    }
    public RESPECT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESPECT, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESTRICT, 0);
    }
    public RESULT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESULT, 0);
    }
    public REVERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVERT, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.REVOKE, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RIGHT, 0);
    }
    public RLIKE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RLIKE, 0);
    }
    public ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROLLBACK, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ROW, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SAMPLE, 0);
    }
    public SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SAVEPOINT, 0);
    }
    public SECONDS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SECONDS, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEEK, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SEMI, 0);
    }
    public SETS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SETS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SHOW, 0);
    }
    public TSKIP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TSKIP, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SOURCE, 0);
    }
    public SUBQUERY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBQUERY, 0);
    }
    public SUBSET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SUBSET, 0);
    }
    public SYMBOLS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYMBOLS, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYNC, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SYSTEM, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLES, 0);
    }
    public TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESAMPLE, 0);
    }
    public TABLESTORE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TABLESTORE, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMP, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TEMPORARY, 0);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.THEN, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TIES, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TO, 0);
    }
    public TOPIC(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TOPIC, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRANSACTION, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRIGGER, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TYPE, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNCONDITIONAL, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNIQUE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNKNOWN, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UNMATCHED, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPDATE, 0);
    }
    public UPSERT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.UPSERT, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USER, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.USING, 0);
    }
    public VACUUM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VACUUM, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VALUES, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIEW, 0);
    }
    public VIRTUAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VIRTUAL, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WITH, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.WRAPPER, 0);
    }
    public XOR(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.XOR, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_keyword_compat;
    }
}


export class Type_idContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIONAL(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.OPTIONAL, 0);
    }
    public TUPLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TUPLE, 0);
    }
    public STRUCT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.STRUCT, 0);
    }
    public VARIANT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.VARIANT, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.LIST, 0);
    }
    public FLOW(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FLOW, 0);
    }
    public DICT(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DICT, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.SET, 0);
    }
    public ENUM(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.ENUM, 0);
    }
    public RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.RESOURCE, 0);
    }
    public TAGGED(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TAGGED, 0);
    }
    public CALLABLE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.CALLABLE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_type_id;
    }
}


export class Bool_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_bool_value;
    }
}


export class RealContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REAL(): antlr.TerminalNode {
        return this.getToken(YQLParser.REAL, 0)!;
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_real;
    }
}


export class IntegerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DIGITS(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.DIGITS, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(YQLParser.INTEGER_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return YQLParser.RULE_integer;
    }
}
